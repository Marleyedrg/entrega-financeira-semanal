{"version":3,"mappings":"isBAEQA,OAAOC,gBAAkB,IAGrBD,OAAOE,SAASC,SAASC,SAAS,kCAClCJ,OAAOC,gBAAkB,gCAI7BD,OAAOK,gBAAkB,SAASC,GAC1B,IAACA,EAAa,OAAAA,EAClB,GAAIA,EAAKC,WAAW,SAAWD,EAAKC,WAAW,OAASD,EAAKC,WAAW,SAAiB,OAAAD,EAKzF,OAHiBN,OAAOC,iBAENK,EAAKC,WAAW,KAAOD,EAAKE,UAAU,GAAKF,EAEhE,ECTT,MAAMG,EAAU,CAEdC,SAAU,CACRC,GAAI,CAAEC,KAAM,SAAUC,UAAU,GAChCC,YAAa,CACXF,KAAM,SACNC,UAAU,EACVE,SAAWC,GAAQA,GAAOA,EAAIC,OAAOC,OAAS,EAC9CC,QAAS,kCAEXC,IAAK,CACHR,KAAM,SACNC,UAAU,EACVE,SAAWC,GAAgB,OAARA,GAAwB,KAARA,QAAsB,IAARA,GAAqBK,WAAWL,IAAQ,EACzFG,QAAS,8BAEXG,KAAM,CACJV,KAAM,SACNC,UAAU,EACVE,SAAWC,GAAQA,GAAO,sBAAsBO,KAAKP,GACrDG,QAAS,yCAEXK,MAAO,CACLZ,KAAM,MACNC,UAAU,EACVM,QAAS,+BAEXM,OAAQ,CACNb,KAAM,SACNC,UAAU,EACVE,SAAWC,IAASA,GAAO,CAAC,UAAW,aAAaZ,SAASY,GAC7DG,QAAS,6CAKbO,SAAU,CACRf,GAAI,CAAEC,KAAM,SAAUC,UAAU,GAChCS,KAAM,CACJV,KAAM,SACNC,UAAU,EACVE,SAAWC,GAAQA,GAAO,sBAAsBO,KAAKP,GACrDG,QAAS,yCAEXQ,OAAQ,CACNf,KAAM,SACNC,UAAU,EACVE,SAAWC,GAAQA,GAAOK,WAAWL,GAAO,EAC5CG,QAAS,iCAEXK,MAAO,CACLZ,KAAM,MACNC,UAAU,KAYT,SAASe,EAAaC,EAAMC,EAAYC,EAAU,IACjD,MAAAC,EAASvB,EAAQqB,GAEvB,IAAKE,EACH,MAAM,IAAIC,MAAM,wCAAwCH,KAG1D,MAAMI,EAAS,GACTC,EAAS,CAAEC,SAAS,EAAMF,OAAQ,IAqDxC,GAlDOG,OAAAC,QAAQN,GAAQO,SAAQ,EAAEC,EAAOC,MAChC,MAAAC,EAAQb,EAAKW,GAGnB,IAAIC,EAAM5B,UAAa6B,SAAmD,KAAVA,GAS5D,GAACD,EAAM5B,UAAa6B,SAAmD,KAAVA,EAA7D,CAKA,GAAe,QAAfD,EAAM7B,KAAgB,CACxB,MAAM+B,SAAmBD,EAErB,GAAe,WAAfD,EAAM7B,MACR,GAAkB,WAAd+B,GAA0BC,MAAMvB,WAAWqB,IAK7C,YAJAR,EAAOW,KAAK,CACVL,QACArB,QAASsB,EAAMtB,SAAW,WAAWqB,8BAIjD,GAAiBG,IAAcF,EAAM7B,KAK7B,YAJAsB,EAAOW,KAAK,CACVL,QACArB,QAASsB,EAAMtB,SAAW,WAAWqB,sBAA0BC,EAAM7B,QAI/E,CAGQ6B,EAAM1B,UAAsC,mBAAnB0B,EAAM1B,WAC5B0B,EAAM1B,SAAS2B,EAAOb,IACzBK,EAAOW,KAAK,CACVL,QACArB,QAASsB,EAAMtB,SAAW,gBAAgBqB,iBA5BpD,OAVMN,EAAOW,KAAK,CACVL,QACArB,QAASsB,EAAMtB,SAAW,WAAWqB,mBAuC7C,IAIwB,IAAlBN,EAAOhB,SAA+C,IAA/Ba,EAAQe,mBAA8B,CAC/D,MAAMC,EAoBV,SAA+BlB,EAAMC,EAAYC,EAAU,IACzD,MAAMG,EAAS,GAEf,GAAmB,aAAfJ,EAA2B,CAEvB,MAAAkB,EAAiBC,GAAcpB,EAAKP,MAe1C,GAdoB4B,EAAWC,MAC7BzC,KAASI,cAAgBe,EAAKf,aAC9BmC,GAAcvC,EAASY,QAAU0B,KAC/BjB,EAAQqB,WAAa1C,EAASC,KAAOoB,EAAQqB,cAI/ClB,EAAOW,KAAK,CACVL,MAAO,cACPrB,QAAS,oCAAoCU,EAAKf,uBAAuBe,EAAKP,SAK9ES,EAAQsB,iBAAkB,CAC5B,MAAMC,EAAe,IAAIC,KAAK1B,EAAKP,MAC7BkC,MAAYD,KAGlB,GAFAC,EAAMC,SAAS,EAAG,EAAG,EAAG,GAEpBH,EAAeE,EAAO,CAClB,MAAAE,EAAWC,KAAKC,OAAOJ,EAAQF,UAEtBvB,EAAQ8B,YACrB3B,EAAOW,KAAK,CACVL,MAAO,OACPrB,QAAS,sCAAsCuC,iBAG3D,CACA,CACA,SAA4B,aAAf5B,EAA2B,CAErBT,WAAWQ,EAAKF,QAClB,KACXO,EAAOW,KAAK,CACVL,MAAO,SACPrB,QAAS,+CACT2C,cAAc,IAKZ,MAAAd,EAAiBC,GAAcpB,EAAKP,MAC1ByC,EAAWC,QAAOC,GAChChB,GAAcgB,EAAM3C,QAAU0B,KAC5BjB,EAAQqB,WAAaa,EAAMtD,KAAOoB,EAAQqB,aAGlClC,OAAS,IAAMa,EAAQmC,yBACjChC,EAAOW,KAAK,CACVL,MAAO,OACPrB,QAAS,mDACT2C,cAAc,GAGtB,CAES,OAAA5B,CACT,CApF2BiC,CAAsBtC,EAAMC,EAAYC,GACxDG,EAAAW,QAAQE,EACnB,CAQS,OALHb,EAAOhB,OAAS,IAClBiB,EAAOC,SAAU,EACjBD,EAAOD,OAASA,GAGXC,CACT,CAqGO,SAASiC,EAAgBC,EAAOvC,GACrC,MAAMK,EAAS,CACbC,SAAS,EACTF,OAAQ,GACRoC,WAAY,GACZC,aAAc,IAuBT,OApBDF,EAAA9B,SAAQ,CAACiC,EAAMC,KACnB,MAAMC,EAAa9C,EAAa4C,EAAM1C,EAAY,CAAEgB,oBAAoB,IAEnE4B,EAAWtC,QAaPD,EAAAmC,WAAWzB,KAAK2B,IAZvBrC,EAAOC,SAAU,EAENsC,EAAAxC,OAAOK,SAAiBoC,IACjCxC,EAAOD,OAAOW,KAAK,IACd8B,EACHF,QACAD,QACD,IAGIrC,EAAAoC,aAAa1B,KAAK,CAAE4B,QAAOD,OAAMtC,OAAQwC,EAAWxC,SAGjE,IAGSC,CACT,CAKO,SAASyC,IACR,MAAAC,EAAiBT,EAAgBlB,EAAY,YAC7C4B,EAAYV,EAAgBL,EAAY,YAEvC,OACL3B,QAASyC,EAAezC,SAAW0C,EAAU1C,QAC7Cc,WAAY2B,EACZd,WAAYe,EACZC,UAAWxB,KAAKyB,MAEpB,CCnRA,MAAMC,EAqBG,OAAO1B,KAAKyB,SAASrB,KAAKuB,SAASC,SAAS,IAAIC,OAAO,EAAG,KAlBnE,IAAIC,EAAmB,KAGnBC,EAAsB/B,KAAKyB,MAG/B,MAAMO,EAAY,CAChBC,WAAW,EACXC,cAAe,EACfC,aAAc,KACdC,eAAgB,GAChBC,gBAAgB,GAaX,SAASC,IAEV,IACiBR,EAAA,IAAIS,iBAAiB,2BAEvBT,EAAAU,UAAaC,IAC5BC,EAAkBD,EAAMnE,KAAI,EAI9BwD,EAAiBa,YAAY,CAC3BtF,KAAM,gBACNuF,UAAWlB,EACXF,UAAWxB,KAAKyB,QAGlBoB,QAAQC,IAAI,iCACb,OAAQC,GACPF,QAAQG,KAAK,qEAGNvG,OAAAwG,iBAAiB,WAAYR,IAClC,GAAkB,eAAdA,EAAMS,KAAsC,eAAdT,EAAMS,KA0H9C,SAA4BT,GACR,eAAdA,EAAMS,KAAsC,eAAdT,EAAMS,KAClCT,EAAMU,WAAaV,EAAMW,WAEtBpB,EAAUK,gBACHgB,IAIlB,CAlIQC,CAAmBb,QAC3B,GAA+B,iBAAdA,EAAMS,IACX,IAEFR,EADgBa,KAAKC,MAAMf,EAAMU,UAElC,OAAQ/B,GACCyB,QAAAzB,MAAM,+CAAgDA,EACxE,CACA,IAIiBqC,aAAAC,QAAQ,eAAgBH,KAAKI,UAAU,CAClDtG,KAAM,gBACNuF,UAAWlB,EACXF,UAAWxB,KAAKyB,QAEtB,CAiBS,OAdamC,IAGbnH,OAAAwG,iBAAiB,gBAAgB,KACtBY,EAAA,CACdxG,KAAM,mBACNuF,UAAWlB,EACXF,UAAWxB,KAAKyB,OACjB,IAIHqC,YAAYF,EAAoB,KAEzB,CACLhB,UAAWlB,EACXO,UAAW,IAAMD,EAAUC,UAE/B,CAKA,SAAS4B,EAAgBjG,GACvBA,EAAQgF,UAAYlB,EAEhBI,EACFA,EAAiBa,YAAY/E,IAG7B6F,aAAaC,QAAQ,eAAgBH,KAAKI,UAAU/F,IAGpDmG,YAAW,KACTN,aAAaO,WAAW,eAAc,GACrC,IAEP,CAKA,SAAStB,EAAkB9E,GACzB,GAAKA,GAAWA,EAAQgF,YAAclB,KAGlC9D,EAAQ4D,WAAaxB,KAAKyB,MAAQ7D,EAAQ4D,UAAY,KAE1D,OAAQ5D,EAAQP,MACd,IAAK,gBACO2E,EAAAE,gBACU0B,IACpB,MAEF,IAAK,mBACH5B,EAAUE,cAAgB9B,KAAK6D,IAAI,EAAGjC,EAAUE,cAAgB,GAC5C0B,IACpB,MAEF,IAAK,mBAEC5B,EAAUC,WAEI4B,EAAA,CACdxG,KAAM,kBACNmE,UAAWxB,KAAKyB,QAGpB,MAEF,IAAK,kBACHO,EAAUC,WAAY,EACtB,MAEF,IAAK,eACCrE,EAAQ4D,UAAYO,IACtBA,EAAsBnE,EAAQ4D,UACpB6B,KAEZ,MAEF,IAAK,eAECrB,EAAUC,WACI4B,EAAA,CACdxG,KAAM,gBACNmE,UAAWxB,KAAKyB,QAGpB,MAEF,IAAK,cAyDT,WAEEM,EAAsB/B,KAAKyB,MAEvB,IAEEK,IAEFA,EAAiBoC,QAGjBH,YAAW,KACL,IACiBjC,EAAA,IAAIS,iBAAiB,2BACvBT,EAAAU,UAAaC,IAC5BC,EAAkBD,EAAMnE,KAAI,CAE/B,OAAQyE,GACCF,QAAAzB,MAAM,sCAAuC2B,EAC/D,IACS,MAILM,GAAS,GAETR,QAAQC,IAAI,+CACb,OAAQ1B,GACCyB,QAAAzB,MAAM,sCAAuCA,EACzD,CACA,CArF2B+C,GAG3B,CAmBA,SAASP,IAEyB,IAA5B5B,EAAUE,eAAwBF,EAAUC,YAShC4B,EAAA,CACdxG,KAAM,mBACNmE,UAAWxB,KAAKyB,QAIlBsC,YAAW,KAEJ/B,EAAUC,YACbD,EAAUC,WAAY,EACtBY,QAAQC,IAAI,6BAGFO,IAChB,GACK,KArBL,CAgEA,SAASA,EAASe,GAAY,GACxB,IAAApC,EAAUK,gBAAmB+B,EAA7B,CAEJpC,EAAUK,gBAAiB,EAEvB,IAIF,GAHAQ,QAAQC,IAAI,sDAGRsB,EAAW,CAMb,IALAvB,QAAQC,IAAI,6CAKLnD,EAAWhC,OAAS,GAAGgC,EAAW0E,MACzC,KAAO7D,EAAW7C,OAAS,GAAG6C,EAAW6D,KAC/C,CAGoBC,IACAC,IAGFC,IAGEC,IACCC,IAEP1C,EAAAG,aAAenC,KAAKyB,MACtBoB,QAAAC,IAAI,0BAA2B,IAAI9C,KAAKgC,EAAUG,cAAcwC,qBACzE,OAAQvD,GACCyB,QAAAzB,MAAM,8BAA+BA,GAC7CwD,GAAU,4BAA6B,QAC3C,CAAY,QACR5C,EAAUK,gBAAiB,CAC/B,CApC8C,CAqC9C,CAKO,SAASwC,EAAiBC,EAAa,UAC5C/C,EAAsB/B,KAAKyB,MAEXoC,EAAA,CACdxG,KAAM,eACNyH,aACAtD,UAAWO,GAEf,CAKO,SAASgD,IASd,OARgBlB,EAAA,CACdxG,KAAM,eACNmE,UAAWxB,KAAKyB,QAIR4B,IAEHrB,EAAUG,YACnB,CAKO,SAAS6C,IACP,UACFhD,EACHY,UAAWlB,EAEf,CCjVO,IAAI/B,EAAa,GACba,EAAa,GAGpByE,EAAqB,KAGzB,SAASC,IACH,IAEI,MAAAC,EAAkB1B,aAAa2B,QAAQ,cAE3CzF,EADEwF,EACW5B,KAAKC,MAAM2B,GAAiBE,KAAiBlI,IAAA,IACrDA,EACHU,IAAKC,WAAWX,EAASU,MAAQ,EACjCT,GAAID,EAASC,IAAMkI,OAAOtF,KAAKyB,OAC/B1D,KAAM2B,GAAcvC,EAASY,MAC7BG,OAAQf,EAASe,SAAWJ,WAAWX,EAASU,KAAO,EAAI,YAAc,eAG9D,GAIT,MAAA0H,EAAkB9B,aAAa2B,QAAQ,cAE3C5E,EADE+E,EACWhC,KAAKC,MAAM+B,GAAiBF,KAAc3E,IAAA,IAClDA,EACHtC,OAAQN,WAAW4C,EAAMtC,SAAW,EACpChB,GAAIsD,EAAMtD,IAAMkI,OAAOtF,KAAKyB,OAC5B1D,KAAM2B,GAAcgB,EAAM3C,UAGf,GAICyH,IAGV,MAAA/D,EAAMzB,KAAKyB,QACZwD,GAAuBxD,EAAMwD,EAAsB,SAqB5D,WACE,MAAMrG,EAASyC,IAEVzC,EAAOC,UACFgE,QAAAG,KAAK,sCAAuCpE,GAGhDA,EAAOe,WAAWqB,aAAarD,OAAS,IACnCiB,EAAAe,WAAWqB,aAAahC,SAAgBiC,IACvC,MAAAC,EAAQvB,EAAW8F,WAAUC,GAAKA,EAAEtI,KAAO6D,EAAKA,KAAK7D,MACzC,IAAd8D,IAEGvB,EAAWuB,GAAOhD,SACVyB,EAAAuB,GAAOhD,OAASJ,WAAW6B,EAAWuB,GAAOrD,KAAO,EAAI,YAAc,WAE9E8B,EAAWuB,GAAO9D,KACrBuC,EAAWuB,GAAO9D,GAAKkI,OAAOtF,KAAKyB,OAAS,IAAMrB,KAAKuB,SAASC,SAAS,IAAI3E,UAAU,EAAG,IAEtG,IAIMwG,aAAaC,QAAQ,aAAcH,KAAKI,UAAUhE,KAIhDf,EAAO4B,WAAWQ,aAAarD,OAAS,IACnCiB,EAAA4B,WAAWQ,aAAahC,SAAgBiC,IACvC,MAAAC,EAAQV,EAAWiF,WAAUE,GAAKA,EAAEvI,KAAO6D,EAAKA,KAAK7D,MACzC,IAAd8D,IAEGV,EAAWU,GAAO9D,KACrBoD,EAAWU,GAAO9D,GAAKkI,OAAOtF,KAAKyB,OAAS,IAAMrB,KAAKuB,SAASC,SAAS,IAAI3E,UAAU,EAAG,IAEtG,IAIMwG,aAAaC,QAAQ,aAAcH,KAAKI,UAAUnD,KAKxD,CA/D6BoF,GACFX,EAAAxD,GAIAoE,IACPC,IACFtB,IACGE,GAClB,OAAQtD,GACCyB,QAAAzB,MAAM,0BAA2BA,GACzCwD,GAAU,gDAAiD,SAG3DjF,EAAa,GACba,EAAa,EACjB,CACA,CA+DO,SAASuF,IACV,IAEcP,IAGhB/B,aAAaC,QAAQ,aAAcH,KAAKI,UAAUhE,IAGlC8E,IAGOoB,IACTrB,IAGdK,EAAiB,aAClB,OAAQzD,GACCyB,QAAAzB,MAAM,2BAA4BA,GAC1CwD,GAAU,0BAA2B,QACzC,CACA,CAGO,SAASoB,IACV,IACFvC,aAAaC,QAAQ,aAAcH,KAAKI,UAAUnD,IAGlCiE,IAEAqB,IACFtB,IAGdK,EAAiB,aAClB,OAAQzD,GACCyB,QAAAzB,MAAM,wCAAyCA,GACvDwD,GAAU,uCAAwC,QACtD,CACA,CAGO,SAASN,IACQY,GACxB,CAGO,SAASX,IACQW,GACxB,CAGA,SAASe,IACItG,EAAAuG,MAAK,CAACC,EAAGC,KAEZ,MAAAC,EAAiB,IAAIrG,KAAKoG,EAAErI,MAAQ,IAAIiC,KAAKmG,EAAEpI,MACjD,OAAmB,IAAnBsI,EAA6BA,EAG1BF,EAAE5I,YAAY+I,cAAcF,EAAE7I,iBAAa,EAAW,CAC3DgJ,SAAS,EACTC,YAAa,QACd,GAEL,CAGO,SAAShC,IACd,MAAMiC,EAAY9G,EAAW+G,QAAO,CAACC,EAAKxJ,IACjCwJ,GAAO7I,WAAWX,EAASU,MAAQ,IACzC,GAEG+I,EAAWpG,EAAWkG,QAAO,CAACC,EAAKjG,IAChCiG,GAAO7I,WAAW4C,EAAMtC,SAAW,IACzC,GAEHyI,SAASC,eAAe,aAAaC,YAAcC,GAAeP,GAClEI,SAASC,eAAe,YAAYC,YAAcC,GAAeJ,GAEjE,MAAMK,EAAYR,EAAYG,EACxBM,EAAmBL,SAASC,eAAe,aAChCI,EAAAH,YAAcC,GAAeC,GAC7BC,EAAAC,UAAYF,GAAa,EAAI,eAAiB,aAG/CxC,IACCC,GACnB,CAGO,SAASmB,IACR,MAAAuB,EAAQP,SAASC,eAAe,uBACtC,IAAKM,EAAO,OAEZA,EAAMC,UAAY,GAGlB,MAAMC,EAAgB,CAAE,EAExB3H,EAAWX,SAAoB7B,IACvB,MAAAY,EAAOZ,EAASY,MAAQwJ,KACzBD,EAAcvJ,KACjBuJ,EAAcvJ,GAAQ,CACpBgB,QAAS,GACT0H,UAAW,IAGfa,EAAcvJ,GAAMgB,QAAQO,KAAKnC,GAGjC,MAAMU,EAAMC,WAAWX,EAASU,MAAQ,EAC1ByJ,EAAAvJ,GAAM0I,WAAa5I,CAAA,IAI7B,MAAA2J,EAAc1I,OAAO2I,KAAKH,GAAepB,MAAK,CAACC,EAAGC,IAC/C,IAAIpG,KAAKoG,GAAK,IAAIpG,KAAKmG,KA0G5B,GAtGJqB,EAAYxI,SAAgBjB,IACpB,MAAA2J,EAAiBJ,EAAcvJ,GAAMgB,QACrC4I,EAAmBL,EAAcvJ,GAAM0I,UAGvCmB,EAAaf,SAASgB,cAAc,MAC1CD,EAAWT,UAAY,cACvBS,EAAWP,UAAY,2GAGUS,GAAW/J,qDACPgK,GAAehK,8FAEb2J,EAAe/J,mEAChBqJ,GAAeW,iEAKrDP,EAAMY,YAAYJ,GAGlBF,EAAe1I,SAAoB7B,IAC3B,MAAA8K,EAAKpB,SAASgB,cAAc,MAClCI,EAAGd,UAAY,eAGf,IAAIe,EAAa,eACbC,EAAc,GAEM,YAApBhL,EAASe,QACEgK,EAAA,WACCC,EAAA,kBACe,cAApBhL,EAASe,QAGTJ,WAAWX,EAASU,KAAO,GAFvBqK,EAAA,YACCC,EAAA,qBAKDD,EAAA,WACCC,EAAA,kBAKhB,MAAMC,EAAkBvB,SAASwB,eAAelL,EAASI,aAAe,IAAIwJ,YACtElJ,EAAMC,WAAWX,EAASU,MAAQ,EAExCoK,EAAGZ,UAAY,iBACPe,0BACGpB,GAAenJ,qCACLsK,MAAgBD,6bAe/B,MAAAI,EAAcL,EAAGM,cAAc,+BAC/BC,EAAaP,EAAGM,cAAc,+BAC9BE,EAAeR,EAAGM,cAAc,+BAE1BD,EAAArF,iBAAiB,SAAS,KAEhC9F,EAASc,MACJxB,OAAAiM,eAAevL,EAASc,OAE/B2G,GAAU,mCAAoC,OACxD,IAGiB4D,EAAAvF,iBAAiB,SAAS,KAC5BxG,OAAAkM,aAAaxL,EAASC,GAAE,IAGpBqL,EAAAxF,iBAAiB,SAAS,KAC/B,MAAA1F,EAAcJ,EAASI,aAAe,eAExCd,OAAOmM,wBACFnM,OAAAmM,wBAAwBzL,EAASC,GAAIG,GAGxCsL,QAAQ,kDAAkDtL,OACrDd,OAAAqM,eAAe3L,EAASC,GAE3C,IAGMgK,EAAMY,YAAYC,EAAE,GACrB,IAIwB,IAAvBT,EAAY7J,OAAc,CACtB,MAAAoL,EAAWlC,SAASgB,cAAc,MACxCkB,EAAS1B,UAAY,sGAKrBD,EAAMY,YAAYe,EACtB,CACA,CAGO,SAASjD,IACR,MAAAsB,EAAQP,SAASC,eAAe,gBACjCM,IAELA,EAAMC,UAAY,GAElB7G,EAAWxB,SAAiB0B,IACpB,MAAAuH,EAAKpB,SAASgB,cAAc,MAG5BmB,EAAgBlB,GAAWpH,EAAM3C,OAAS,gBAC1CK,EAASN,WAAW4C,EAAMtC,SAAW,EACrC6K,EAASpC,SAASwB,eAAe3H,EAAMtD,IAAM,IAAI2J,YAEvDkB,EAAGZ,UAAY,eACP2B,wBACGhC,GAAe5I,mKASpB,MAAAqK,EAAeR,EAAGM,cAAc,yBAClCE,GACWA,EAAAxF,iBAAiB,SAAS,KAC/B,MAAAiG,EAAkBlC,GAAe5I,GAEnC3B,OAAO0M,mBACF1M,OAAA0M,mBAAmBF,EAAQC,GAG9BL,QAAQ,iEAAiEK,OAC3EzM,OAAO2M,eAAeH,EAElC,IAGI7B,EAAMY,YAAYC,EAAE,IAExB,CAiEO,SAASa,EAAe1L,GACzB,IACFuC,EAAaA,EAAWc,QAAmBtD,KAASC,KAAOA,IAC3C2I,IACOF,IACTrB,IACdI,GAAU,+BAAgC,UAC3C,OAAQxD,GACCyB,QAAAzB,MAAM,2BAA4BA,GAC1CwD,GAAU,0BAA2B,QACzC,CACA,CAEO,SAASwE,EAAehM,GACzB,IACFoD,EAAaA,EAAWC,QAAgBC,KAAMtD,KAAOA,IACrC4I,IACAF,IACFtB,IACdI,GAAU,4CAA6C,UACxD,OAAQxD,GACCyB,QAAAzB,MAAM,wCAAyCA,GACvDwD,GAAU,uCAAwC,QACtD,CACA,CA0CO,SAASyE,IACd,OAAOtE,GACT,CChhBA,SAASuE,EAAoBnK,GAE3B,MAAMoK,EAAuB,iBAAVpK,EAAqBrB,WAAWqB,GAASA,EAGxD,OAAAE,MAAMkK,GAAa,EAIhBnJ,KAAKoJ,MAAY,IAAND,GAAa,GACjC,CAGA,IAAIE,EAAY,CACdC,UAAW,KACXC,WAAY,GAIP,SAASC,IACFH,EAAA,CACVC,UAAW,KACXC,WAAY,EAEhB,CAuBO,SAASjF,IAIV,GAHJ7B,QAAQgH,KAAK,4BAGa,IAAtBlK,EAAWhC,OAGb,MA1BiB,CACjB,mBACA,sBACA,uBACA,qBACA,qBACA,UACA,YAGSqB,SAAc5B,IACjB,MAAA0M,EAAUjD,SAASC,eAAe1J,GACpC0M,IACFA,EAAQzC,UAAY,oDAC1B,SAWIxE,QAAQkH,QAAQ,4BA2BlBpK,EAAWX,SAAoB7B,IACxBA,EAASe,SACZf,EAASe,OAASJ,WAAWX,EAASU,KAAO,EAAI,YAAc,UACrE,IAtBE,MAAMmM,EAAW,CAkGV,IAAIC,SAAmBC,IAC5BrH,QAAQgH,KAAK,qCAEP,MAAApD,EAAY9G,EAAW+G,QAAO,CAACC,EAAKjB,IAAMiB,EAAM2C,EAAoB5D,EAAE7H,MAAM,GAC5E+I,EAAWpG,EAAWkG,QAAO,CAACC,EAAKhB,IAAMgB,EAAM2C,EAAoB3D,EAAEvH,SAAS,GAC9E6I,EAAYqC,EAAoB7C,EAAYG,GAC5CuD,EAAe1D,EAAY,EAAKQ,EAAYR,EAAa,IAAM,EAG/D2D,EAAgBzK,EAAWc,WAAyB,YAAbiF,EAAExH,SAAsBP,OAC/D0M,EAAkB1K,EAAWc,WAAyB,cAAbiF,EAAExH,SAAwBP,OAEnEmM,EAAUjD,SAASC,eAAe,oBACxC,IAAKgD,EAGH,OAFAjH,QAAQkH,QAAQ,0CACPG,IAIXJ,EAAQzC,UAAY,gHAGiBL,GAAeP,iKAIfO,GAAeJ,gKAInBK,GAAa,EAAI,kBAAoB,yBAAyBD,GAAeC,4JAI7EkD,GAAgB,EAAI,kBAAoB,sBAAsBA,EAAaG,QAAQ,qQAKlCD,yBACxED,EAAgB,EAAI,uFACkDA,yBACpE,uHAOZvH,QAAQkH,QAAQ,qCACPG,GAAA,IA6ZJ,IAAID,SAAmBC,IAC5BrH,QAAQgH,KAAK,mDAEP,MAAApD,EAAY9G,EAAW+G,QAAO,CAACC,EAAKjB,IAAMiB,EAAM2C,EAAoB5D,EAAE7H,MAAM,GAC5E+I,EAAWpG,EAAWkG,QAAO,CAACC,EAAKhB,IAAMgB,EAAM2C,EAAoB3D,EAAEvH,SAAS,GAC9EmM,EAAc9D,EAAYG,EAE1BkD,EAAUjD,SAASC,eAAe,uBACxC,IAAKgD,EAGH,OAFAjH,QAAQkH,QAAQ,wDACPG,IAKX,GAAIK,GAAe,EAMjB,OALAT,EAAQzC,UAAY,6GAGpBxE,QAAQkH,QAAQ,wDACPG,IAIL,MAAAM,EAAkB/D,EAAY8D,EAAe,IAC7CE,EAAiB7D,EAAW2D,EAAe,IAEjDT,EAAQzC,UAAY,4HAE4DmD,eAA4BA,kNAKrFA,EAAeF,QAAQ,WAAWtD,GAAeP,qLAI9CgE,EAAcH,QAAQ,WAAWtD,GAAeJ,mEAM1E/D,QAAQkH,QAAQ,mDACPG,GAAA,IApcJ,IAAID,SAAmBC,IAC5BrH,QAAQgH,KAAK,0CAEb,MAAMH,EAAYgB,IACZC,EAAS7L,OAAOC,QAAQ2K,GAC3BrE,KAAI,EAAEtH,EAAMO,MAEL,MAAAsM,EAAQtM,EAAKuM,cAAgB,EAAIvB,EAAoBhL,EAAKwM,YAAcxM,EAAKuM,eAAiB,EAC9FE,EAAiBzM,EAAKuM,cAAgB,EAAIvB,EAAoBhL,EAAKmI,UAAYnI,EAAKuM,eAAiB,EAEpG,OACL9M,OACA6M,QACAC,cAAevM,EAAKuM,cACpBC,YAAaxM,EAAKwM,YAClBC,iBACAtE,UAAWnI,EAAKmI,UACjB,IAEFP,MAAK,CAACC,EAAGC,IAAMA,EAAErI,KAAKuI,cAAcH,EAAEpI,QACtCiN,MAAM,EAAG,GAENlB,EAAUjD,SAASC,eAAe,wBACxC,OAAKgD,EAMiB,IAAlBa,EAAOhN,QACTmM,EAAQzC,UAAY,mEACpBxE,QAAQkH,QAAQ,+CACPG,MAIXJ,EAAQzC,UAAY,8CAEdsD,EAAOtF,KAAI,EAAGtH,OAAM6M,QAAOC,gBAAeC,cAAaC,iBAAgBtE,gBAEjE,MAAAwE,EAAaH,EAAc,EAAIxB,EAAqB7C,EAAYqE,EAAe,KAAQrE,EAAY,EAAI,IAAM,EAC7GyE,EAAkBD,GAAc,IAAM,kBACtBA,GAAc,IAAM,oBAAsB,iBAEzD,+CACqBC,4FAEKpD,GAAW/J,OAAUgK,GAAehK,mHAE3DkN,EAAWX,QAAQ,+QAMWtD,GAAe4D,wMAIf5D,GAAe+D,qMAIlBF,iMAIG7D,GAAe8D,kMAIf9D,GAAeP,oKAITrG,KAAK+K,IAAIF,EAAY,KAAO,kEAAC,IAI1EG,KAAK,0BAIZvI,QAAQkH,QAAQ,+CACPG,MA5DPrH,QAAQkH,QAAQ,+CACPG,IA2DF,IAMJ,IAAID,SAAmBC,IAC5BrH,QAAQgH,KAAK,yCAEb,MAAMH,EAAYgB,IACZC,EAAS7L,OAAOC,QAAQ2K,GAC3BrE,KAAI,EAAEtH,EAAMO,MAEX,MAAMsM,EAAQtM,EAAKmI,UAAY,EAAI6C,EAAqBhL,EAAKwM,YAAcxM,EAAKmI,UAAa,KAAQnI,EAAKwM,YAAc,EAAI,IAAM,EAC5HO,EAAS/B,EAAoBhL,EAAKmI,UAAYnI,EAAKwM,aAElD,OACL/M,OACA6M,QACAU,OAAQhN,EAAKmI,UACb8E,SAAUjN,EAAKwM,YACfO,SACAR,cAAevM,EAAKuM,cACpBW,aAAclN,EAAKkN,aACnBC,eAAgBnN,EAAKmN,eACtB,IAEFvF,MAAK,CAACC,EAAGC,IAAMA,EAAErI,KAAKuI,cAAcH,EAAEpI,QACtCiN,MAAM,EAAG,GAENlB,EAAUjD,SAASC,eAAe,sBACxC,OAAKgD,EAMiB,IAAlBa,EAAOhN,QACTmM,EAAQzC,UAAY,mEACpBxE,QAAQkH,QAAQ,8CACPG,MAIXJ,EAAQzC,UAAY,8CAEdsD,EAAOtF,KAAI,EAAGtH,OAAM6M,QAAOU,SAAQC,WAAUF,SAAQR,gBAAeW,eAAcC,qBAElF,MAAMtB,EAAemB,EAAS,EAAKD,EAASC,EAAU,IAAM,EACtDJ,EAAkBN,GAAS,GAAK,kBAChBA,GAAS,GAAK,oBAAsB,iBAEnD,+CACqBM,4FAEKpD,GAAW/J,OAAUgK,GAAehK,sHAE3D6M,EAAMN,QAAQ,+VAO4DmB,iCACxED,EAAe,EAAI,+FACmDA,iCACpE,iNAK0BxE,GAAesE,6LAIftE,GAAeuE,wLAInBF,GAAU,EAAI,kBAAoB,+CACvDrE,GAAeqE,sNAKMlB,GAAgB,EAAI,kBAAoB,4CAChEA,EAAaG,QAAQ,0NAKIO,mMAISzK,KAAK+K,IAAIP,EAAO,qEAAI,IAIjEQ,KAAK,0BAIZvI,QAAQkH,QAAQ,8CACPG,MAzEPrH,QAAQkH,QAAQ,8CACPG,IAwEF,IAMJ,IAAID,SAAmBC,IAC5BrH,QAAQgH,KAAK,2CAEb,MAAMH,EAAYgB,IACZgB,EAAU5M,OAAO6M,OAAOjC,GAE1B,GAAmB,IAAnBgC,EAAQ/N,OAAc,CAClBmM,QAAUjD,SAASC,eAAe,sBAMxC,OALIgD,IACFA,EAAQzC,UAAY,oEAEtBxE,QAAQkH,QAAQ,gDACPG,GAEf,CAGI,MAAM0B,EAAsBF,EAAQ/N,OAAS,EAAI+N,EAAQhF,QAAO,CAACC,EAAKrI,IAASqI,EAAMrI,EAAKuM,eAAe,GAAKa,EAAQ/N,OAAS,EACzHkO,EAAoBlM,EAAWhC,OAAS,EAC1C2L,EAAoB3J,EAAW+G,QAAO,CAACC,EAAKjB,IAAMiB,EAAM2C,EAAoB5D,EAAE7H,MAAM,GAAK8B,EAAWhC,QACpG,EACEmO,EAAeJ,EAAQ/N,OAAS,EAAI2L,EAAoBoC,EAAQhF,QAAO,CAACC,EAAKrI,IAASqI,EAAMrI,EAAKwM,aAAa,GAAKY,EAAQ/N,QAAU,EAErImM,EAAUjD,SAASC,eAAe,sBACxC,IAAKgD,EAGH,OAFAjH,QAAQkH,QAAQ,gDACPG,IAIXJ,EAAQzC,UAAY,6GAGcuE,EAAoBtB,QAAQ,wKAIzBtD,GAAe6E,oKAIf7E,GAAe8E,0GAMpDjJ,QAAQkH,QAAQ,2CACPG,GAAA,IAMJ,IAAID,SAAmBC,IAC5BrH,QAAQgH,KAAK,8BAEb,MAAMH,EAAYgB,IAElB,GAAsC,IAAlC5L,OAAO2I,KAAKiC,GAAW/L,OAAc,CACjCmM,QAAUjD,SAASC,eAAe,WAMxC,OALIgD,IACFA,EAAQzC,UAAY,oEAEtBxE,QAAQkH,QAAQ,mCACPG,GAEf,CAEU,MAAA6B,EAAUjN,OAAOC,QAAQ2K,GAC5BrE,KAAI,EAAEtH,EAAMO,MAAW,CACtBP,OACAsN,OAAQ/M,EAAKmI,UAAYnI,EAAKwM,YAC9BD,cAAevM,EAAKuM,cACpBpE,UAAWnI,EAAKmI,UAChBqE,YAAaxM,EAAKwM,gBAEnB5E,MAAK,CAACC,EAAGC,KAEF,MAAA4F,EAAa5F,EAAEiF,OAASlF,EAAEkF,OAC5B,OAAe,IAAfW,EAAyBA,EAEtB5F,EAAEyE,cAAgB1E,EAAE0E,aAAA,IAC1B,GAEL,IAAKkB,EAGH,OAFAlJ,QAAQkH,QAAQ,mCACPG,IAIL,MAAAJ,EAAUjD,SAASC,eAAe,WACxC,IAAKgD,EAGH,OAFAjH,QAAQkH,QAAQ,mCACPG,IAIXJ,EAAQzC,UAAY,6EAEUS,GAAWiE,EAAQhO,UAAUgK,GAAegE,EAAQhO,8HAG/CgO,EAAQV,QAAU,EAAI,kBAAoB,yCAC9DrE,GAAe+E,EAAQV,gLAKFU,EAAQlB,8KAIL7D,GAAe+E,EAAQtF,yKAIvBO,GAAe+E,EAAQjB,+HAO9DjI,QAAQkH,QAAQ,8BACPG,GAAA,IAMJ,IAAID,SAAmBC,IAC5BrH,QAAQgH,KAAK,4BAEb,MAAMH,EAAYgB,IAElB,GAAsC,IAAlC5L,OAAO2I,KAAKiC,GAAW/L,OAAc,CACjCmM,QAAUjD,SAASC,eAAe,YAMxC,OALIgD,IACFA,EAAQzC,UAAY,oEAEtBxE,QAAQkH,QAAQ,iCACPG,GAEf,CAEU,MAAA+B,EAAWnN,OAAOC,QAAQ2K,GAC7BrE,KAAI,EAAEtH,EAAMO,MAAW,CACtBP,OACAsN,OAAQ/M,EAAKmI,UAAYnI,EAAKwM,YAC9BD,cAAevM,EAAKuM,cACpBpE,UAAWnI,EAAKmI,UAChBqE,YAAaxM,EAAKwM,YAClBC,eAAgBzM,EAAKuM,cAAgB,EAAIvM,EAAKmI,UAAYnI,EAAKuM,cAAgB,MAEhF3E,MAAK,CAACC,EAAGC,KAEF,MAAA4F,EAAa7F,EAAEkF,OAASjF,EAAEiF,OAC5B,OAAe,IAAfW,EAAyBA,EAEtB7F,EAAE4E,eAAiB3E,EAAE2E,cAAA,IAC3B,GAEL,IAAKkB,EAGH,OAFApJ,QAAQkH,QAAQ,iCACPG,IAIL,MAAAJ,EAAUjD,SAASC,eAAe,YACxC,IAAKgD,EAGH,OAFAjH,QAAQkH,QAAQ,iCACPG,IAIXJ,EAAQzC,UAAY,8EAEUS,GAAWmE,EAASlO,UAAUgK,GAAekE,EAASlO,8HAGjDkO,EAASZ,QAAU,EAAI,kBAAoB,yCAC/DrE,GAAeiF,EAASZ,gLAKHY,EAASpB,8KAIN7D,GAAeiF,EAASxF,yKAIxBO,GAAeiF,EAASnB,wLAK5B9D,GAAeiF,EAASlB,4DAK3DlI,QAAQkH,QAAQ,4BACPG,GAAA,KAhiBXD,QAAQiC,IAAIlC,GAAUmC,MAAK,KAiBZtF,SAASuF,iBAAiB,oBAClCpN,SAAiBqN,IC+BnB,IAAgCC,KD9BZD,ICkCrBE,MAEoBD,EAAUF,iBAAiB,uCACnCpN,SAAiBqN,IAC7BA,EAAMG,MAAMC,WAAa,YACzBJ,EAAMG,MAAME,UAAY,mBAIXJ,EAAUF,iBAAiB,0BACnCpN,SAAiB2N,IACtBA,EAAMH,MAAMI,OAAS,QAUpB,SAA6BN,GAClC,GAAKA,GAGDC,IAAkB,CAEAD,EAAU/D,cAAc,6BAE1C+D,EAAUE,MAAMK,UAAY,OAC5BP,EAAUE,MAAMM,wBAA0B,SAItC,MAAAC,EAAWT,EAAU/D,cAAc,cACrCwE,IACFA,EAASP,MAAMQ,cAAgB,SAC/BD,EAASP,MAAMS,WAAa,SAC5BF,EAASP,MAAMU,UAAY,OAEjC,CACA,CD1EIC,CAAoBd,EAAK,IAlBzBxJ,QAAQkH,QAAQ,2BAA0B,GAE9C,CAqBA,SAASW,IAEP,MAAM0C,EAAWpN,KAAKyB,MAAQgI,EAAUE,WACpC,GAAAF,EAAUC,WAAa0D,EAAW,IACpC,OAAO3D,EAAUC,UAGnB7G,QAAQgH,KAAK,wBACb,MAAMH,EAAY,CAAE,EAiDb,OA9CP/J,EAAWX,SAAoB7B,IAC7B,MAAMY,EAAOZ,EAASY,KACjB2L,EAAU3L,KACb2L,EAAU3L,GAAQ,CAChB4B,WAAY,GACZ8G,UAAW,EACXqE,YAAa,EACbD,cAAe,EACfW,aAAc,EACdC,eAAgB,IAGpB/B,EAAU3L,GAAM4B,WAAWL,KAAKnC,GAGR,YAApBA,EAASe,OACDwL,EAAA3L,GAAMyN,cAAgB,EACH,cAApBrO,EAASe,SACRwL,EAAA3L,GAAM0N,gBAAkB,EAClC/B,EAAU3L,GAAM0I,WAAa6C,EAAoBnM,EAASU,MAGlD6L,EAAA3L,GAAM8M,eAAiB,KAInCrK,EAAWxB,SAAiB0B,IAC1B,MAAM3C,EAAO2C,EAAM3C,KACd2L,EAAU3L,KACb2L,EAAU3L,GAAQ,CAChB4B,WAAY,GACZ8G,UAAW,EACXqE,YAAa,EACbD,cAAe,EACfW,aAAc,EACdC,eAAgB,IAGpB/B,EAAU3L,GAAM+M,aAAexB,EAAoB5I,EAAMtC,OAAM,IAIjEqL,EAAUC,UAAYA,EACZD,EAAAE,WAAa3J,KAAKyB,MAE5BoB,QAAQkH,QAAQ,wBACTL,CACT,CEnKA,SAAS2D,EAAqB3M,EAAOrD,GACnC,MAAMsB,EAAS,GA6BR,OA1BF+B,EAAM3C,MACFY,EAAAW,KAAK,sBAAsBjC,KAI/BqD,EAAMtD,IACFuB,EAAAW,KAAK,oBAAoBjC,KAGrB,YAATA,GAEGqD,EAAMnD,aACToB,EAAOW,KAAK,6BAIW,iBAAdoB,EAAM7C,KAAkC,KAAd6C,EAAM7C,KACzCc,EAAOW,KAAK,6BAEI,aAATjC,GAEmB,iBAAjBqD,EAAMtC,QAAwC,KAAjBsC,EAAMtC,QAC5CO,EAAOW,KAAK,8BAITX,CACT,CAyBO,SAAS2O,EAAU7K,GAExB,MAAM8K,EAAa,KACb9K,GAASA,EAAM+K,SACjB/K,EAAM+K,OAAOrO,MAAQ,GAC3B,EAIQsO,EAAOhL,EAAM+K,OAAS/K,EAAM+K,OAAOE,MAAM,GAAMjL,EAAMgL,MAAQ,KACnE,IAAKA,EAGH,OAFYF,SACZ3I,GAAU,6BAA8B,SAKtC,IAvCN,SAAmB6I,GAkBjB,OAJiBA,EAAKE,KAAKC,cACMC,SAAS,SAbvB,CACjB,WACA,8BACA,kBACA,oBACA,2BACA,0BACA,eACA,cAQmChR,SAAS4Q,EAAKpQ,KACrD,CAoBOyQ,CAAUL,GAGb,OAFYF,SACZ3I,GAAU,6CAA8C,SAK1D,MAAMmJ,EAAenJ,GAAU,yBAA0B,OAAQ,GAE3DoJ,EAAS,IAAIC,WACZD,EAAAE,OAAS,SAASnL,GACnB,IAEEgL,GACOlH,SAAAsH,KAAKC,YAAYL,GAGtB,MAAAM,EAAOtL,EAAEyK,OAAO5O,OAGtB,IAAKyP,IAASA,EAAK3Q,OACX,UAAIgB,MAAM,wBAIlB,MAAM4P,EAAYD,EAAKE,MAAM,MAAM,GACnC,IAAIC,EAAY,IAEZF,EAAUzR,SAAS,KACT2R,EAAA,IACHF,EAAUzR,SAAS,QAChB2R,EAAA,MAGR,MAAAC,EAAQJ,EAAKE,MAAM,MAAM9N,QAAOiO,GAAKA,EAAEhR,SAGvCiR,EAAkB,CAAC,OAAQ,OAAQ,KAAM,mBAAoB,eAAgB,iBAAkB,SAAU,UACzGC,EAAUH,EAAM,GAAGF,MAAMC,GAAWnJ,KAAIwJ,GAAKA,EAAEnR,SAE/CoR,EAAiBH,EAAgBlO,QAAOoO,IAAMD,EAAQ/R,SAASgS,KACjE,GAAAC,EAAenR,OAAS,EAC1B,MAAM,IAAIe,MAAM,+BAA+BoQ,EAAe1D,KAAK,SAIrE,MAAM2D,EAAqB,GACrBC,EAAkB,GAClBrQ,EAAS,GAEf,QAASsQ,EAAI,EAAGA,EAAIR,EAAM9Q,OAAQsR,IAAK,CACrC,IAAKR,EAAMQ,GAAGvR,OAAQ,SAGtB,MAAMiO,EAAS,GACf,IAAIuD,EAAe,GACfC,GAAe,EAEV,QAAAC,KAAQX,EAAMQ,GACR,MAATG,EACFD,GAAgBA,EACPC,IAASZ,GAAcW,EAIhBD,GAAAE,GAHhBzD,EAAOrM,KAAK4P,GACGA,EAAA,IAKnBvD,EAAOrM,KAAK4P,GAGZ,MAAMxO,EAAQ,CAAE,EAMZ,GALIkO,EAAA5P,SAAQ,CAACqQ,EAAQnO,WACvBR,EAAM2O,IAAU,OAAAC,EAAA3D,EAAOzK,aAAQxD,SAAU,MAIrB,aAAlBgD,EAAY,KAAkB,CAChC,MAAMvC,EAAW,CACff,GAAIsD,EAAU,IAAK4E,OAAOtF,KAAKyB,OAC/B1D,KAAM2B,GAAc6P,GAAa7O,EAAY,OAC7CtC,OAAQN,WAAW4C,EAAM,oBAAsB,EAC/CzC,MAAOyC,EAAc,QAAK,MAGtB8O,EAAmBnC,EAAqBlP,EAAU,YACpDqR,EAAiB7R,OAAS,EACrBgB,EAAAW,KAAK,SAAS2P,EAAI,iBAAiBO,EAAiBpE,KAAK,SAEhE4D,EAAgB1P,KAAKnB,EAEjC,KAAe,CACL,MAAMhB,EAAW,CACfC,GAAIsD,EAAU,IAAK4E,OAAOtF,KAAKyB,OAC/B1D,KAAM2B,GAAc6P,GAAa7O,EAAY,OAC7CnD,YAAamD,EAAM,oBACnB7C,IAAKC,WAAW4C,EAAM,kBAAoB,EAC1CzC,MAAOyC,EAAc,QAAK,MAGtB8O,EAAmBnC,EAAqBlQ,EAAU,WACpDqS,EAAiB7R,OAAS,EACrBgB,EAAAW,KAAK,SAAS2P,EAAI,gBAAgBO,EAAiBpE,KAAK,SAE/D2D,EAAmBzP,KAAKnC,EAEpC,CACA,CAGU,GAAAwB,EAAOhB,OAAS,EAClB,MAAM,IAAIe,MAAM,yBAAyBC,EAAOyM,KAAK,SAIvD,GAAkC,IAA9B2D,EAAmBpR,QAA2C,IAA3BqR,EAAgBrR,OAC/C,UAAIe,MAAM,iDAIlB+E,aAAaC,QAAQ,aAAcH,KAAKI,UAAUoL,IAClDtL,aAAaC,QAAQ,aAAcH,KAAKI,UAAUqL,IAGlC1K,IACAC,IACFC,IAEdI,GAAU,yBAAyBmK,EAAmBpR,qBAAqBqR,EAAgBrR,wBAAyB,UACrH,OAAQyD,GACCyB,QAAAzB,MAAM,sBAAuBA,GAC3BwD,GAAAxD,EAAMxD,QAAS,QAC/B,CAEgB2P,GACb,EAEDS,EAAOyB,QAAU,WACf7K,GAAU,wBAAyB,SACvB2I,GACb,EAGDS,EAAO0B,WAAWjC,EACpB,CCtMO,SAASkC,EAAgB5R,EAAM6R,EAAiBC,GAE/C,MAaAC,EAhCR,SAAsBC,GACpB,IAAID,EAAO,EACX,QAASb,EAAI,EAAGA,EAAIc,EAAIpS,OAAQsR,IAErBa,MAAQ,GAAKA,EADTC,EAAIC,WAAWf,GAE5Ba,GAAcA,EAET,OAAA1P,KAAK6P,IAAIH,EAClB,CAwBeI,CAHM,GAPH,GAHJ5K,OAAOvH,EAAKoS,WAAWC,SAAS,EAAG,OACjC9K,OAAOvH,EAAKsS,WAAa,GAAGD,SAAS,EAAG,OACzCrS,EAAKuS,mBAICV,EAAgBtF,QAAQ,MACzBuF,EAAevF,QAAQ,MAUzC,OAAOhF,OAHYwK,EAAO,KAGAM,SAAS,EAAG,IACxC,CAmBO,SAASG,EAA4BxS,GAE1C,MAAMyS,EAAUzS,EAAK0S,cAAclC,MAAM,KAAK,GACxCmC,EAAmB/Q,EACtBc,QAAOiF,GAAKA,EAAE3H,OAASyS,IACvBtK,MAAK,CAACC,EAAGC,IAAM,IAAIpG,KAAKmG,EAAEpI,MAAQ,IAAIiC,KAAKoG,EAAErI,QAG1C6R,EAAkBc,EAAiB/S,OAAS,GAChDG,WAAW4S,EAAiB,GAAG7S,MAAY,EACvCgS,EAAiBa,EAAiB/S,OAAS,GAC/CG,WAAW4S,EAAiBA,EAAiB/S,OAAS,GAAGE,MAAY,EAGjET,EAAKuS,EAAgB5R,EAAM6R,EAAiBC,GAC5Cc,EA1BD,SAA0B5S,EAAMX,GAGrC,MAAO,GAFKkI,OAAOvH,EAAKoS,WAAWC,SAAS,EAAG,QACjC9K,OAAOvH,EAAKsS,WAAa,GAAGD,SAAS,EAAG,QAC5BhT,GAC5B,CAsBmBwT,CAAiB7S,EAAMX,GAEjC,OACLA,KACAuT,WACAf,kBACAC,iBAEJ,CC9EA,SAASgB,EAAmBvS,EAAMjB,GAChC,MAAMsB,EAAS,GAwBR,OAtBFL,EAAAU,SAAQ,CAACiC,EAAMC,KACbD,EAAKlD,MACRY,EAAOW,KAAK,GAAGjC,MAAS6D,EAAQ,oBAE7BD,EAAK7D,IACRuB,EAAOW,KAAK,GAAGjC,MAAS6D,EAAQ,kBAGrB,YAAT7D,GACG4D,EAAK1D,aACRoB,EAAOW,KAAK,YAAY4B,EAAQ,gCAEV,iBAAbD,EAAKpD,KAAiC,KAAboD,EAAKpD,KACvCc,EAAOW,KAAK,YAAY4B,EAAQ,qBAEhB,aAAT7D,GACkB,iBAAhB4D,EAAK7C,QAAuC,KAAhB6C,EAAK7C,QAC1CO,EAAOW,KAAK,aAAa4B,EAAQ,oBAEzC,IAGSvC,CACT,CAGO,SAASmS,EAAYC,GAAa,GAEjC,MAGAC,EAAY,IAHKH,EAAmBlR,EAAY,cACpCoR,EAAaF,EAAmBrQ,EAAY,YAAc,IAGxE,GAAAwQ,EAAUrT,OAAS,EACrB,MAAM,IAAIe,MAAM,qBAAqBsS,EAAU5F,KAAK,SAGhD,MACA6F,EAAO,GAiCN,OA9BPtR,EAAWX,SAAoB7B,IAC7B8T,EAAK3R,KAAK,CACRwI,GAAW3K,EAASY,MACpB,UACAZ,EAASC,GACTD,EAASI,YACTJ,EAASU,IACT,GACAV,EAASU,IAAM,YAAc,WAC7BV,EAASc,OAAS,IACnB,IAIC8S,GACFvQ,EAAWxB,SAAiB0B,IAC1BuQ,EAAK3R,KAAK,CACRwI,GAAWpH,EAAM3C,MACjB,WACA2C,EAAMtD,GACN,GACA,GACAsD,EAAMtC,OACN,OACAsC,EAAMzC,OAAS,IAChB,IAKE,CAlCS,CAAC,OAAQ,OAAQ,KAAM,mBAAoB,eAAgB,iBAAkB,SAAU,UAmC7FmN,KAAK,QACV6F,EAAK5L,KAAW6L,KAAI7L,KAAapG,GAEb,iBAAVA,IAAuBA,EAAMpC,SAAS,MAAQoC,EAAMpC,SAAS,OAASoC,EAAMpC,SAAS,MACvF,IAAIoC,EAAMkS,QAAQ,KAAM,SAE1BlS,IACNmM,KAAK,QACRA,KAAK,KACT,CAuCO,SAASgG,IACV,GAACvI,QAAQ,kFAIT,IAE0BwI,IAE5BzM,GAAU,2CAA4C,UACvD,OAAQxD,GACCyB,QAAAzB,MAAM,wBAAyBA,GAC7BwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,CAMA,SAASyT,IAEP5N,aAAa6N,QAGbC,eAAeD,QAGf3R,EAAWhC,OAAS,EACpB6C,EAAW7C,OAAS,EAGJ8G,IAGZ,IACI,MAAA+M,EAAc,IAAIjP,iBAAiB,2BACzCiP,EAAY7O,YAAY,CACtBtF,KAAM,aACNmE,UAAWxB,KAAKyB,QAElB+P,EAAYtN,OACb,OAAQnB,GACPF,QAAQC,IAAI,+CAChB,CAGiB+D,SAASuF,iBAAiB,qBAClCpN,SAAeyS,IAChBA,EAAIC,IAAI1U,WAAW,UACjB2U,IAAAC,gBAAgBH,EAAIC,IAC9B,IAIkBpN,IACAC,IACFC,IAGIqN,GACpB,CAGO,SAASC,IACV,GAACjJ,QAAQ,yFAIT,IA2DO,IAAAkJ,EAAT,SAA+BC,GACvB,MAAAC,EAASN,IAAIO,gBAAgBC,GAC7BC,EAAOvL,SAASgB,cAAc,KACpCuK,EAAKC,KAAOJ,EACZG,EAAKE,SAAWC,EAChBH,EAAK5F,MAAMgG,QAAU,OACZ3L,SAAAsH,KAAKnG,YAAYoK,GAC1BA,EAAKK,QAEL1O,YAAW,KACA8C,SAAAsH,KAAKC,YAAYgE,GAC1BT,IAAIC,gBAAgBK,GAEhBD,GACoBU,GAChC,GACS,IACT,EA1EI,GAA0B,IAAtB/S,EAAWhC,QAAsC,IAAtB6C,EAAW7C,OAClC,UAAIe,MAAM,8BAGZ,MAAAX,MAAWiC,MACX2Q,SAAEA,GAAaJ,EAA4BxS,GAC3CwU,EAAmB,aAAa5B,QAGhCgC,EAAa7B,GAAY,GACzBqB,EAAU,IAAIS,KAAK,CAACD,GAAa,CAAEtV,KAAM,4BAGzCkP,EAAiB9P,OAAOoW,YAAc,KAC1C,iEAAiE7U,KAAK8U,UAAUC,WAG5EL,EAAuB,KAECrB,IAE5BzM,GAAU,iCAAkC,UAAS,EAGvD,GAAI2H,EACE,IAEF,GAAIuG,UAAUE,OAAS,oBAAoBhV,KAAK8U,UAAUC,WAAY,CAE9D,MAAAtF,EAAO,IAAIwF,KAAK,CAACd,GAAUI,EAAkB,CAAElV,KAAM,aAE3DyV,UAAUE,MAAM,CACdtF,MAAO,CAACD,GACRyF,MAAO,8BACP7E,KAAM,6CACLlC,MAAK,KACgBuG,GAAA,IACrBS,OAAaC,IACNvQ,QAAAzB,MAAM,gCAAiCgS,GAE/CrB,GAAsB,EAAI,GAEtC,MAEUA,GAAsB,EAEzB,OAAQ3Q,GACCyB,QAAAzB,MAAM,+BAAgCA,GAE9C2Q,GAAsB,EAC9B,MAGMA,GAAsB,EAsBzB,OAAQ3Q,GACCyB,QAAAzB,MAAM,4BAA6BA,GACjCwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,CAGO,SAASyV,EAAoBtC,GAAa,GAEzC,MAGAC,EAAY,IAHKH,EAAmBlR,EAAY,cACpCoR,EAAaF,EAAmBrQ,EAAY,YAAc,IAGxE,GAAAwQ,EAAUrT,OAAS,EACrB,MAAM,IAAIe,MAAM,qBAAqBsS,EAAU5F,KAAK,SAIhD,MACA6F,EAAO,GA+BN,OA5BPtR,EAAWX,SAAoB7B,IAC7B8T,EAAK3R,KAAK,CACRwI,GAAW3K,EAASY,MACpB,UACAZ,EAASC,GACTD,EAASI,YACTJ,EAASU,IACT,GACAV,EAASU,IAAM,YAAc,YAC9B,IAICkT,GACFvQ,EAAWxB,SAAiB0B,IAC1BuQ,EAAK3R,KAAK,CACRwI,GAAWpH,EAAM3C,MACjB,WACA2C,EAAMtD,GACN,GACA,GACAsD,EAAMtC,OACN,QACD,IAKE,CAhCS,CAAC,OAAQ,OAAQ,KAAM,mBAAoB,eAAgB,iBAAkB,UAiCnFgN,KAAK,QACV6F,EAAK5L,KAAW6L,KAAI7L,KAAapG,GACb,iBAAVA,IAAuBA,EAAMpC,SAAS,MAAQoC,EAAMpC,SAAS,OAASoC,EAAMpC,SAAS,MACvF,IAAIoC,EAAMkS,QAAQ,KAAM,SAE1BlS,IACNmM,KAAK,QACRA,KAAK,KACT,CAoCO,SAASkI,IAERC,QAAQ1M,SAASC,eAAe,eACtC,IAAKyM,EAEH,YADA1Q,QAAQzB,MAAM,sCAKhBmS,EAAM/G,MAAMgG,QAAU,OAGK3L,SAASC,eAAe,oBAC/BD,SAASC,eAAe,aACrBD,SAASC,eAAe,gBAEzC,MAAA0M,EAAkB3M,SAASC,eAAe,yBAC1C2M,EAAW5M,SAASC,eAAe,kBACnC4M,EAAc7M,SAASC,eAAe,qBAGtC6M,EAAqBH,EAAgBI,WAAU,GAC/CC,EAAcJ,EAASG,WAAU,GACjCE,EAAiBJ,EAAYE,WAAU,GAE7BJ,EAAAO,WAAWC,aAAaL,EAAoBH,GACnDC,EAAAM,WAAWC,aAAaH,EAAaJ,GAClCC,EAAAK,WAAWC,aAAaF,EAAgBJ,GAG9C,MAAAO,EAAwBpN,SAASC,eAAe,oBAChDoN,EAAiBrN,SAASC,eAAe,aACzCqN,EAAoBtN,SAASC,eAAe,gBAG/B6M,EAAA1Q,iBAAiB,SAAUF,IACxCA,EAAEyK,SAAWyG,IACOA,EAAAG,SAAWH,EAAsBG,QAC7D,IAGcP,EAAA5Q,iBAAiB,SAAUF,IACjCA,EAAEyK,SAAW0G,IACAA,EAAAE,SAAWF,EAAeE,QAC/C,IAGiBN,EAAA7Q,iBAAiB,SAAUF,IACpCA,EAAEyK,SAAW2G,IACGA,EAAAC,SAAWD,EAAkBC,QACrD,IAIsB,CAACT,EAAoBE,EAAaC,GAC1C9U,SAAiBqV,IAC3BA,EAAM7H,MAAM8H,OAAS,UACrBD,EAAM7H,MAAM+H,QAAU,WACtBF,EAAM7H,MAAMgI,OAAS,QACrBH,EAAM7H,MAAMiI,aAAe,MAC3BJ,EAAM7H,MAAMkI,OAAS,oBACrBL,EAAM7H,MAAMmI,WAAa,wBAGnBN,EAAApR,iBAAiB,aAAa,KAClCoR,EAAM7H,MAAMoI,gBAAkB,aAG1BP,EAAApR,iBAAiB,YAAY,KACjCoR,EAAM7H,MAAMoI,gBAAkB,KAC/B,IAIG,MAAAC,EAAYhO,SAASC,eAAe,gBACpCgO,EAAajO,SAASC,eAAe,iBACrCiO,EAAkBlO,SAASC,eAAe,oBAE1CkO,EAAeH,EAAUjB,WAAU,GACnCqB,EAAgBH,EAAWlB,WAAU,GACrCsB,EAAqBH,EAAgBnB,WAAU,GAE3CiB,EAAAd,WAAWC,aAAagB,EAAcH,GACrCC,EAAAf,WAAWC,aAAaiB,EAAeH,GAClCC,EAAAhB,WAAWC,aAAakB,EAAoBH,GAE/CC,EAAA/R,iBAAiB,SAAS,KACrCsQ,EAAM/G,MAAMgG,QAAU,UAGVyC,EAAAhS,iBAAiB,SAAS,KAEtC,MAAMkS,EAAoBtO,SAASC,eAAe,oBAAoBsN,QAChErD,EAAalK,SAASC,eAAe,aAAasN,QAClDgB,EAAgBvO,SAASC,eAAe,gBAAgBsN,QAGzDe,GAAsBpE,GAMXsE,EAAAF,EAAmBpE,EAAYqE,GAG/C7B,EAAM/G,MAAMgG,QAAU,QARpB5N,GAAU,qDAAsD,QAQ5C,IAILsQ,EAAAjS,iBAAiB,SAASqS,UACvC,IAEF/B,EAAM/G,MAAMgG,QAAU,OAGC+C,GACxB,OAAQnU,GACCyB,QAAAzB,MAAM,gDAAiDA,GACrDwD,GAAAxD,EAAMxD,QAAS,QAC/B,KAIuB2V,EAAMhL,cAAc,eAC5BtF,iBAAiB,SAAkBR,IAC9CA,EAAM+S,iBAAiB,IAIzBjC,EAAMtQ,iBAAiB,SAAS,KAC9BsQ,EAAM/G,MAAMgG,QAAU,SAE1B,CAQO,SAAS6C,EAAgBF,GAAoB,EAAMpE,GAAa,EAAMqE,GAAgB,GACvF,IA+HF,IAASrD,EAAT,WACQ,MAAAE,EAASN,IAAIO,gBAAgBC,GAC7BC,EAAOvL,SAASgB,cAAc,KACpCuK,EAAKC,KAAOJ,EACZG,EAAKE,SAAWC,EAChBH,EAAK5F,MAAMgG,QAAU,OACZ3L,SAAAsH,KAAKnG,YAAYoK,GAC1BA,EAAKK,QACL1O,YAAW,KACA8C,SAAAsH,KAAKC,YAAYgE,GAC1BT,IAAIC,gBAAgBK,EAAM,GACzB,IACT,EAzIQwD,EAAqB,IAAI9V,GACzB+V,EAAqB,IAAIlV,GAI1B,KAAC2U,GAAmD,IAA9BM,EAAmB9X,QACxCoT,GAA4C,IAA9B2E,EAAmB/X,QAE7B,UAAIe,MAAM,8BAIlB,IAAIkQ,EAAU,CAAC,OAAQ,OAAQ,KAAM,mBAAoB,gBACrDmC,GAAoBnC,EAAAtP,KAAK,kBAC7BsP,EAAQtP,KAAK,UACT8V,GAAuBxG,EAAAtP,KAAK,UAEhC,MAAM2R,EAAO,GAGTkE,GACFM,EAAmBzW,SAAoB7B,IACrC,MAAM+T,EAAM,CACVpJ,GAAW3K,EAASY,MACpB,UACAZ,EAASC,GACTD,EAASI,YACTJ,EAASU,KAGPkT,GAAgBG,EAAA5R,KAAK,IAEzB4R,EAAI5R,KAAKnC,EAASU,IAAM,YAAc,YAElCuX,GAAelE,EAAI5R,KAAKnC,EAASc,OAAS,IAE9CgT,EAAK3R,KAAK4R,EAAG,IAKbH,GACF2E,EAAmB1W,SAAiB0B,IAClC,MAAMwQ,EAAM,CACVpJ,GAAWpH,EAAM3C,MACjB,WACA2C,EAAMtD,GACN,GACA,IAGE2T,GAAYG,EAAI5R,KAAKoB,EAAMtC,QAE/B8S,EAAI5R,KAAK,QAEL8V,GAAelE,EAAI5R,KAAKoB,EAAMzC,OAAS,IAE3CgT,EAAK3R,KAAK4R,EAAG,IAKjB,MAAMyB,EAAa,CACjB/D,EAAQxD,KAAK,QACV6F,EAAK5L,KAAW6L,KAAI7L,KAAapG,GACb,iBAAVA,IAAuBA,EAAMpC,SAAS,MAAQoC,EAAMpC,SAAS,OAASoC,EAAMpC,SAAS,MACvF,IAAIoC,EAAMkS,QAAQ,KAAM,SAE1BlS,IACNmM,KAAK,QACRA,KAAK,MAGDrN,MAAWiC,MACX2Q,SAAEA,GAAaJ,EAA4BxS,GAGjD,IAAI4X,EAAS,GACRR,IAA6BQ,GAAA,gBAC7B5E,IAAsB4E,GAAA,WACtBP,IAAyBO,GAAA,cAG9B,MAAMpD,EAAmB,aAAaoD,KAAUhF,QAG1CpE,EAAiB9P,OAAOoW,YAAc,KAC1C,iEAAiE7U,KAAK8U,UAAUC,WAG5EZ,EAAU,IAAIS,KAAK,CAACD,GAAa,CAAEtV,KAAM,4BAE/C,GAAIkP,EACE,IAEF,GAAIuG,UAAUE,OAAS,oBAAoBhV,KAAK8U,UAAUC,WAAY,CAE9D,MAAAtF,EAAO,IAAIwF,KAAK,CAACd,GAAUI,EAAkB,CAAElV,KAAM,aAE3DyV,UAAUE,MAAM,CACdtF,MAAO,CAACD,GACRyF,MAAO,sBACP7E,KAAM,4CACLlC,MAAK,KACNvH,GAAU,oCAAqC,UAAS,IACvDuO,OAAaC,IACNvQ,QAAAzB,MAAM,gCAAiCgS,GAExBrB,GAAA,GAEnC,MAEiCA,GAE1B,OAAQ3Q,GACCyB,QAAAzB,MAAM,+BAAgCA,GAEvB2Q,GAC/B,MAG6BA,IAmBrBqD,GACoBQ,KAOdhR,GAAA,sCAHPuQ,EAAoBM,EAAmB9X,OAAS,IAChDoT,EAAa2E,EAAmB/X,OAAS,2BAEyC,UACtF,OAAQyD,GACCyB,QAAAzB,MAAM,0BAA2BA,GAC/BwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,CAOO0X,eAAeO,EAAiBC,GAAwB,EAAMC,GAAmB,GAClF,IAEmB,mBAAVC,aA4HN,IAAI/L,SAAQ,CAACC,EAAS+L,KAEvB,GAAiB,mBAAVD,MAET,YADS9L,IAKL,MAAAgM,EAASrP,SAASgB,cAAc,UACtCqO,EAAOxE,IAAM,mEACbwE,EAAOC,UAAY,kGACnBD,EAAOE,YAAc,YAErBF,EAAOhI,OAAS,KACLhE,GAAA,EAGXgM,EAAOzG,QAAU,KACRwG,EAAA,IAAIvX,MAAM,sCAAqC,EAG/CmI,SAAAwP,KAAKrO,YAAYkO,EAAM,IA3I1B,MAAAI,EAAM,IAAIN,MAChB,IAAIO,EAAa,EAqCjB,GAlCIT,GACFnW,EAAWX,SAAoB7B,IAC7B,GAAIA,EAASc,MAAO,CAElB,MAAMuY,EAAYrZ,EAASc,MAAMjB,WAAW,SACxCG,EAASc,MAAMsQ,MAAM,KAAK,GAC1BpR,EAASc,MAGP0S,EAAW,UAAUxT,EAASI,eAAeJ,EAASY,WAC5DuY,EAAI7I,KAAKkD,EAAU6F,EAAW,CAAEC,QAAQ,IACxCF,GACV,KAKQR,GACSvV,EAAAxB,SAAQ,CAAC0B,EAAOQ,KACzB,GAAIR,EAAMzC,MAAO,CAEf,MAAMuY,EAAY9V,EAAMzC,MAAMjB,WAAW,SACrC0D,EAAMzC,MAAMsQ,MAAM,KAAK,GACvB7N,EAAMzC,MAGJ0S,EAAW,YAAYjQ,EAAM3C,QAAQmD,EAAQ,QACnDoV,EAAI7I,KAAKkD,EAAU6F,EAAW,CAAEC,QAAQ,IACxCF,GACV,KAKuB,IAAfA,EACI,UAAI7X,MAAM,gCAIZ,MAAAX,MAAWiC,MACX2Q,SAAEA,GAAaJ,EAA4BxS,GACjD,IAAI4X,EAAS,GACRG,IAAiCH,GAAA,gBACjCI,IAA4BJ,GAAA,WACjC,MAAMe,EAAc,UAAUf,KAAUhF,QAGlCgG,QAAgBL,EAAIM,cAAc,CAAEvZ,KAAM,SAMhD,GAHuBZ,OAAOoW,YAAc,KAC1C,iEAAiE7U,KAAK8U,UAAUC,WAG5E,IAEF,GAAID,UAAUE,OAAS,oBAAoBhV,KAAK8U,UAAUC,WAAY,CAC9D,MAAAtF,EAAO,IAAIwF,KAAK,CAAC0D,GAAUD,EAAa,CAAErZ,KAAM,oBAEtDyV,UAAUE,MAAM,CACdtF,MAAO,CAACD,GACRyF,MAAO,qBACP7E,KAAM,8CACLlC,MAAK,KACIvH,GAAA,oCAAoC2R,wBAAkC,UAAS,IACxFpD,OAAaC,IACNvQ,QAAAzB,MAAM,gCAAiCgS,GAE/CyD,EAAgBF,EAASD,EAAW,GAEhD,MAEUG,EAAgBF,EAASD,EAE5B,OAAQtV,GACCyB,QAAAzB,MAAM,+BAAgCA,GAC9CyV,EAAgBF,EAASD,EACjC,MAGMG,EAAgBF,EAASD,GAGjB9R,GAAA,oCAAoC2R,wBAAkC,UACjF,OAAQnV,GACCyB,QAAAzB,MAAM,4BAA6BA,GACjCwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,CAOA,SAASiZ,EAAgBC,EAAMnG,GACvB,MAAAoG,EAAMpF,IAAIO,gBAAgB4E,GAC1B1E,EAAOvL,SAASgB,cAAc,KACpCuK,EAAKC,KAAO0E,EACZ3E,EAAKE,SAAW3B,EAChByB,EAAK5F,MAAMgG,QAAU,OACZ3L,SAAAsH,KAAKnG,YAAYoK,GAC1BA,EAAKK,QACL1O,YAAW,KACA8C,SAAAsH,KAAKC,YAAYgE,GAC1BT,IAAIC,gBAAgBmF,EAAG,GACtB,IACL,CAmCO,SAASxB,IAERhC,QAAQ1M,SAASC,eAAe,qBACtC,IAAKyM,EAEH,YADA1Q,QAAQzB,MAAM,iDAKhBmS,EAAM/G,MAAMgG,QAAU,OAGS3L,SAASC,eAAe,wBAC7BD,SAASC,eAAe,mBAE5C,MAAAkQ,EAAsBnQ,SAASC,eAAe,6BAC9CmQ,EAAiBpQ,SAASC,eAAe,wBAGzCoQ,EAAyBF,EAAoBpD,WAAU,GACvDuD,EAAoBF,EAAerD,WAAU,GAE/BoD,EAAAjD,WAAWC,aAAakD,EAAwBF,GACrDC,EAAAlD,WAAWC,aAAamD,EAAmBF,GAGpD,MAAAG,EAA4BvQ,SAASC,eAAe,wBACpDuQ,EAAuBxQ,SAASC,eAAe,mBAG9BoQ,EAAAjU,iBAAiB,SAAUF,IAC5CA,EAAEyK,SAAW4J,IACWA,EAAAhD,SAAWgD,EAA0BhD,QACrE,IAGoB+C,EAAAlU,iBAAiB,SAAUF,IACvCA,EAAEyK,SAAW6J,IACMA,EAAAjD,SAAWiD,EAAqBjD,QAC3D,IAIsB,CAAC8C,EAAwBC,GACjCnY,SAAiBqV,IAC3BA,EAAM7H,MAAM8H,OAAS,UACrBD,EAAM7H,MAAM+H,QAAU,WACtBF,EAAM7H,MAAMgI,OAAS,QACrBH,EAAM7H,MAAMiI,aAAe,MAC3BJ,EAAM7H,MAAMkI,OAAS,oBACrBL,EAAM7H,MAAMmI,WAAa,wBAGnBN,EAAApR,iBAAiB,aAAa,KAClCoR,EAAM7H,MAAMoI,gBAAkB,aAG1BP,EAAApR,iBAAiB,YAAY,KACjCoR,EAAM7H,MAAMoI,gBAAkB,KAC/B,IAIG,MAAAC,EAAYhO,SAASC,eAAe,sBACpCgO,EAAajO,SAASC,eAAe,uBAErCkO,EAAeH,EAAUjB,WAAU,GACnCqB,EAAgBH,EAAWlB,WAAU,GAEjCiB,EAAAd,WAAWC,aAAagB,EAAcH,GACrCC,EAAAf,WAAWC,aAAaiB,EAAeH,GAErCE,EAAA/R,iBAAiB,SAAS,KACrCsQ,EAAM/G,MAAMgG,QAAU,UAGVyC,EAAAhS,iBAAiB,SAASqS,UAClC,IAEF,MAAMQ,EAAwBjP,SAASC,eAAe,wBAAwBsN,QACxE2B,EAAmBlP,SAASC,eAAe,mBAAmBsN,QAGhE,IAAC0B,IAA0BC,EAE7B,YADAnR,GAAU,uDAAwD,SAKpE2O,EAAM/G,MAAMgG,QAAU,OAGtB5N,GAAU,wCAAyC,cAG7CiR,EAAiBC,EAAuBC,EAC/C,OAAQ3U,GACCyB,QAAAzB,MAAM,4BAA6BA,GACjCwD,GAAAxD,EAAMxD,QAAS,QAC/B,KAIuB2V,EAAMhL,cAAc,eAC5BtF,iBAAiB,SAAkBR,IAC9CA,EAAM+S,iBAAiB,IAIzBjC,EAAMtQ,iBAAiB,SAAS,KAC9BsQ,EAAM/G,MAAMgG,QAAU,SAE1B,wEAh1BO,SAAoBzB,GAAa,GAClC,IAEF,GAA0B,IAAtBpR,EAAWhC,UAAkBoT,GAAoC,IAAtBvQ,EAAW7C,QAClD,UAAIe,MAAM,8BAGZ,MAAAX,MAAWiC,MACX2Q,SAAEA,GAAaJ,EAA4BxS,GAG3C4U,EAAa7B,EAAYC,GACzBoB,EAAU,IAAIS,KAAK,CAACD,GAAa,CAAEtV,KAAM,4BACzC4U,EAASN,IAAIO,gBAAgBC,GAG7BC,EAAOvL,SAASgB,cAAc,KACpCuK,EAAKC,KAAOJ,EACZG,EAAKE,SAAW,UAAU3B,IAAWI,EAAa,GAAK,gBAC9ClK,SAAAsH,KAAKnG,YAAYoK,GAC1BA,EAAKK,QACI5L,SAAAsH,KAAKC,YAAYgE,GAC1BT,IAAIC,gBAAgBK,GAGE2D,KAGZhR,GAAA,iCADWjF,EAAWhC,QAAUoT,EAAavQ,EAAW7C,OAAS,2BACM,UAClF,OAAQyD,GACCyB,QAAAzB,MAAM,wBAAyBA,GAC7BwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,oBAmNO,SAA2BmT,GAAa,GACzC,IACF,GAA0B,IAAtBpR,EAAWhC,UAAkBoT,GAAoC,IAAtBvQ,EAAW7C,QAClD,UAAIe,MAAM,8BAEZ,MAAAX,MAAWiC,MACX2Q,SAAEA,GAAaJ,EAA4BxS,GAG3C4U,EAAaU,EAAoBtC,GACjCoB,EAAU,IAAIS,KAAK,CAACD,GAAa,CAAEtV,KAAM,4BACzC4U,EAASN,IAAIO,gBAAgBC,GAG7BC,EAAOvL,SAASgB,cAAc,KACpCuK,EAAKC,KAAOJ,EACPG,EAAAE,SAAW,sBAAsB3B,QAC7B9J,SAAAsH,KAAKnG,YAAYoK,GAC1BA,EAAKK,QACI5L,SAAAsH,KAAKC,YAAYgE,GAC1BT,IAAIC,gBAAgBK,GAGVrN,GAAA,6CADWjF,EAAWhC,QAAUoT,EAAavQ,EAAW7C,OAAS,2BACkB,UAC9F,OAAQyD,GACCyB,QAAAzB,MAAM,oCAAqCA,GACzCwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,wLClWO,SAAS2O,IACd,OAAO9P,OAAOoW,YAAc,KAC1B,iEAAiE7U,KAAK8U,UAAUC,UACpF,CAGO,SAASuE,IACV,IAEazQ,SAASuF,iBAAiB,qBAClCpN,SAAeyS,IAChBA,EAAIC,IAAI1U,WAAW,UACjB2U,IAAAC,gBAAgBH,EAAIC,IAChC,IAaI,GATiB7K,SAASuF,iBAAiB,UAClCpN,SAAkBuY,IACpB1Q,SAASsH,KAAKqJ,SAASD,KAC1BA,EAAOE,MAAQ,EACfF,EAAOG,OAAS,EACxB,IAIQjb,OAAOkb,GACL,IACFlb,OAAOkb,IACR,OAAQ5U,GACPF,QAAQC,IAAI,mCACpB,CAGW,QACR,OAAQ1B,GAEA,OADCyB,QAAAzB,MAAM,+BAAgCA,IACvC,CACX,CACA,CAGO,SAASwW,KAEK/Q,SAASuF,iBAAiB,sBAClCpN,SAAiB6Y,IACpBA,EAAA5U,iBAAiB,SAAS,KAENqU,GAAA,GACzB,GAIL,CAoBO,SAASQ,KAEOC,KAGjBxL,MA0RA9P,OAAOqW,UAAUkF,cAAgBvb,OAAOqW,UAAUkF,aAAe,GAC1DnR,SAAAoR,gBAAgBC,UAAUC,IAAI,iBAO3C,WACM,IAAAC,EAEKvR,SAAA5D,iBAAiB,UAAU,KAClCoV,aAAaD,GACJvR,SAAAsH,KAAK+J,UAAUC,IAAI,gBAE5BC,EAAcrU,YAAW,KACd8C,SAAAsH,KAAK+J,UAAUI,OAAO,eAAc,GAC5C,IAAG,GACL,CAAEC,SAAS,GAChB,CAxS+BC,GA6S/B,WACE,MAAMC,EAAY,KACJ5R,SAASoR,gBACjBzL,MAAMkM,YAAY,eAAgB,GAAGjc,OAAOkc,gBAAe,EAG1Dlc,OAAAwG,iBAAiB,SAAUwV,MAEpC,CAlT6BG,GAGAC,MAIDjB,KAnCP/Q,SAASuF,iBAAiB,sBAClCpN,SAAiB6Y,IAE1BA,EAAMiB,gBAAgB,WAGlBjB,EAAMkB,QAAUlB,EAAMkB,OAAOlc,SAAS,WACxCgb,EAAMkB,OAAS,yDACrB,IAiC2BC,IAC3B,CAKA,SAASH,KAED,MAAAI,EAAepS,SAASC,eAAe,gBACvCoS,EAAWrS,SAASC,eAAe,YAEzC,GAAImS,GAAgBC,EAAU,CAG5BA,EAASH,OAAS,uJAGlBG,EAASJ,gBAAgB,WAChBI,EAAAC,aAAa,WAAY,SAG5B,MAAAC,EAAkBH,EAAarF,WAAU,GAClCqF,EAAAlF,WAAWC,aAAaoF,EAAiBH,GAEhD,MAAAI,EAAcH,EAAStF,WAAU,GAC9BsF,EAAAnF,WAAWC,aAAaqF,EAAaH,GAG9BE,EAAAnW,iBAAiB,SAAS,KAEhBqU,GAAA,IAI1B,MAAMgC,EAA2B,KAEzB,MAAAC,EAAW1S,SAASC,eAAe,sBACrCyS,GACO1S,SAAAsH,KAAKC,YAAYmL,GAItB,MAAAC,EAAY3S,SAASgB,cAAc,OACzC2R,EAAUpc,GAAK,qBACfoc,EAAUrS,UAAY,gBACtBqS,EAAUhN,MAAMgG,QAAU,OAC1BgH,EAAUnS,UAAY,6hCAqBbR,SAAAsH,KAAKnG,YAAYwR,GAGpB,MAAAC,EAAkB5S,SAASC,eAAe,mBAC1C4S,EAAmB7S,SAASC,eAAe,oBAC3C6S,EAAuB9S,SAASC,eAAe,wBAC/C8S,EAAsB/S,SAASC,eAAe,uBAGpC2S,EAAAxW,iBAAiB,UAAWF,IAC1C,GAAIA,EAAEyK,OAAOE,OAAS3K,EAAEyK,OAAOE,MAAM/P,OAAS,EAAG,CAEzCkc,QAAmBhT,SAAS0B,cAAc,uBAC5CsR,IACFA,EAAiBrN,MAAMgG,QAAU,QAInCkH,EAAiB3S,YAAchE,EAAEyK,OAAOE,MAAM,GAAGC,KAGjDmM,MAAM,YAAY/W,EAAEyK,OAAOE,MAAM,GAAGC,qCAGpC5J,YAAW,KACL,IAEQuJ,EAAA,CACRE,OAAQiM,EACRhM,KAAMgM,EAAgB/L,MAAM,KAI9B8L,EAAUhN,MAAMgG,QAAU,OAC1BzO,YAAW,KACL8C,SAASsH,KAAKqJ,SAASgC,IAChB3S,SAAAsH,KAAKC,YAAYoL,EAC5C,GACiB,IACJ,OAAQpG,GACCvQ,QAAAzB,MAAM,4BAA6BgS,GAC3CxO,GAAU,6CAA8C,QACtE,IACa,IACb,MACU8U,EAAiB3S,YAAc,GAC/B4S,EAAqBI,UAAW,CAC1C,IAIsBN,EAAAxW,iBAAiB,SAAS,KAChBqU,GAAA,IAI1BqC,EAAqBnN,MAAMgG,QAAU,OAG/B,MAAAqH,EAAmBhT,SAAS0B,cAAc,uBAC5CsR,GACeA,EAAA5W,iBAAiB,SAAUF,IAE1CA,EAAEyS,kBAGsB8B,IAGpBmC,IACFA,EAAgBO,QAChBP,EAAgBhH,QAC5B,IAK0BmH,EAAA3W,iBAAiB,SAAS,KAC5CuW,EAAUhN,MAAMgG,QAAU,OAC1BzO,YAAW,KACL8C,SAASsH,KAAKqJ,SAASgC,IAChB3S,SAAAsH,KAAKC,YAAYoL,EACtC,GACW,IAAG,IAIEA,EAAAvW,iBAAiB,SAAUF,IAC/BA,EAAEyK,SAAWgM,IACfA,EAAUhN,MAAMgG,QAAU,OAC1BzO,YAAW,KACL8C,SAASsH,KAAKqJ,SAASgC,IAChB3S,SAAAsH,KAAKC,YAAYoL,EACxC,GACa,KACb,GACO,EAIaJ,EAAAnW,iBAAiB,SAAUF,IACzCA,EAAEkX,iBACFlX,EAAEyS,kBAEEjJ,IACwB+M,IAG1BD,EAAY5G,OACpB,IAIgB4G,EAAApW,iBAAiB,UAAWR,IAClCA,EAAM+K,OAAOE,OAASjL,EAAM+K,OAAOE,MAAM/P,OAAS,GACpD2P,EAAU7K,EAClB,GAEA,CAGQ,MAAAyX,EAAmBrT,SAASC,eAAe,oBAEjD,GAAIoT,EAAkB,CACpB,MAAMC,EAAuBD,EAAiBE,QAC7BF,EAAAE,QAAWrX,IACtBwJ,KACFxJ,EAAEkX,iBAEEpR,QAAQ,0FACOyK,KAEV6G,GACYA,EAAAE,KAAKH,EAAkBnX,EACpD,CAEA,CAGQ,MAAAuX,EAAczT,SAASC,eAAe,eACtCyT,EAAgB1T,SAASC,eAAe,iBACxC0T,EAAe3T,SAASC,eAAe,gBAEzCyT,IACFA,EAAcH,QAAU,WAClB,IACF,MAAMjF,EAAoBtO,SAASC,eAAe,oBAAoBsN,QAChErD,EAAalK,SAASC,eAAe,aAAasN,QAGxCiB,EAAAF,EAAmBpE,EAFblK,SAASC,eAAe,gBAAgBsN,SAG9DkG,EAAY9N,MAAMgG,QAAU,MAC7B,OAAQpR,GACCyB,QAAAzB,MAAM,6BAA8BA,EACpD,CACK,GAGCoZ,IACFA,EAAaJ,QAAU,WACrBE,EAAY9N,MAAMgG,QAAU,MAC7B,EAEL,CAKA,SAASuF,KACH,IAAA0C,EAEGhe,OAAAwG,iBAAiB,UAAU,KAChCoV,aAAaoC,GACJ5T,SAAAsH,KAAK+J,UAAUC,IAAI,6BAE5BsC,EAAc1W,YAAW,KACd8C,SAAAsH,KAAK+J,UAAUI,OAAO,6BAG3BzR,SAAS0B,cAAc,mCAEK,mBAAnBqB,gBACOA,iBAEDlF,IACzB,GACO,IAAG,GAEV,CAuFA,SAASsU,KAEP,MAAM0B,EAAqB,KACV7T,SAASuF,iBAAiB,2DAClCpN,SAAiBqN,IACtBA,EAAMG,MAAMC,WAAa,YACzBJ,EAAMG,MAAME,UAAY,gBAGpBH,KACIF,EAAA8M,aAAa,UAAW,OACtC,GACK,EAIyB,aAAxBtS,SAAS8T,WACSD,IAEbje,OAAAwG,iBAAiB,OAAQyX,GAIf7T,SAASuF,iBAAiB,eAClCpN,SAAkB4b,IACpBA,EAAA3X,iBAAiB,SAAS,KACJ,cAAvB2X,EAAOC,QAAQC,KACjB/W,WAAW2W,EAAoB,IACvC,GACK,GAEL,CAKO,SAASK,KACOhD,KAjFvB,WACM,IAAAK,EAEG3b,OAAAwG,iBAAiB,UAAU,KAC1B,MAAA+X,EAAqBnU,SAAS0B,cAAc,wBAC9CyS,IACiBA,EAAA9C,UAAUC,IAAI,gBAEjCE,aAAaD,GACbA,EAAcrU,YAAW,KACJiX,EAAA9C,UAAUI,OAAO,eAAc,GACjD,KACT,GACK,CAAEC,SAAS,GAChB,CAoE4B0C,GA7DjBpU,SAAA5D,iBAAiB,SAAUF,IAClC,GAAIwJ,IAAkB,CACpB,MAAM2O,EAAgBnY,EAAEyK,OAAO2N,QAAQ,mBACvC,GAAID,EAAe,CACjB,MAAME,EAAYF,EAAchD,UAAUV,SAAS,eAGnD3Q,SAASuF,iBAAiB,mBAAmBpN,SAAgBqc,IACtDA,EAAAnD,UAAUI,OAAO,cAAa,IAIhC8C,GACWF,EAAAhD,UAAUC,IAAI,cAEtC,CACA,KA+C2Ba,KAYrBzM,KACO1F,SAAA5D,iBAAiB,cAAc,WAAa,GAAE,CAAEsV,SAAS,IAVhEhM,KACuBsM,IAE7B,CCldO,SAASyC,GAAc7N,EAAM8N,EAAW,IAAKC,EAAU,IAC5D,OAAO,IAAIvR,SAAQ,CAACC,EAAS+L,KAErB,MAAAc,EAAMpF,IAAIO,gBAAgBzE,GAC1BgE,EAAM,IAAIgK,MAGhBhK,EAAIhC,QAAU,KAEZkC,IAAIC,gBAAgBmF,GACbd,EAAA,IAAIvX,MAAM,8BAA6B,EAGhD+S,EAAIvD,OAAS,KACP,IAEI,MAAAqJ,EAAS1Q,SAASgB,cAAc,UACtC,IAAI4P,EAAQhG,EAAIgG,MACZC,EAASjG,EAAIiG,OAGbD,EAAQ8D,IACV7D,EAAStX,KAAKC,MAAMqX,GAAU6D,EAAW9D,IACjCA,EAAA8D,GAGVhE,EAAOE,MAAQA,EACfF,EAAOG,OAASA,EAGJH,EAAOmE,WAAW,MAC1BC,UAAUlK,EAAK,EAAG,EAAGgG,EAAOC,GAGzBH,EAAAqE,QAAQ9E,IAIb,GAFAnF,IAAIC,gBAAgBmF,GAEhBD,EAAM,CACF,MAAA9I,EAAS,IAAIC,WAEnBD,EAAO6N,UAAY,KAEb7N,EAAOpP,QAET2Y,EAAOE,MAAQ,EACfF,EAAOG,OAAS,EAChBxN,EAAQ8D,EAAOpP,SAERqX,EAAA,IAAIvX,MAAM,gDACjC,EAGmBsP,EAAAyB,QAAW1M,IAChBkT,EAAO,IAAIvX,MAAM,gCAAgCqE,EAAEnF,WAAU,EAG/DoQ,EAAO8N,cAAchF,EACjC,MACmBb,EAAA,IAAIvX,MAAM,6CAC7B,GACW,aAAc8c,EAClB,OAAQpI,GAEPzB,IAAIC,gBAAgBmF,GACpBd,EAAO,IAAIvX,MAAM,6BAA6B0U,EAAIxV,WAC1D,GAII6T,EAAIC,IAAMqF,CAAA,GAEd,CAGA,MAAMgF,OAA2BC,IAO1B1G,eAAe2G,GAAuBxO,GACvC,IAACA,EAAa,YAGlB,MAAMyO,EAAclc,KAAKyB,MAAMG,WAAaxB,KAAKuB,SAASC,SAAS,IAAIC,OAAO,EAAG,GAGjFka,GAAqB5D,IAAI+D,GAErB,IAEF,GAAIzf,OAAOkb,GACL,IAAElb,OAAOkb,IAAO,OAAQ5U,GAAKF,QAAQC,IAAI,mBAAoB,CAKnE,IADmB,CAAC,aAAc,YAAa,cAC/BjG,SAAS4Q,EAAKpQ,MACtB,UAAIqB,MAAM,wDAIZ,MAAAyd,EAAgB,QAClB1O,EAAK2O,KAAOD,GACdvX,GAAU,wBAAyB,QAIrC,MAAMyX,EAAS9P,IAGX,IAAAiP,EAAUa,EAAS,GAAM,GACzBd,EAAWc,EAAS,IAAM,IAS9B,GANI5O,EAAK2O,KAAO,UACdZ,EAAUa,EAAS,GAAM,GACzBd,EAAWc,EAAS,IAAM,KAIxBA,GAAU5O,EAAK2O,KAAO,QAAiB,CAEzC,IAAIE,EAAkB,KAElB,IAKF,GAHAA,QAAwBhB,GAAc7N,EAAiB,GAAX8N,EAAgBC,IAGvDO,GAAqBQ,IAAIL,GACrB,YAIH,MAAAM,QAAuBC,MAAMH,GAC7BI,QAAyBF,EAAe1F,OAG1C4F,EAAiBN,KAAO,UAC1BE,QAAwBhB,GACtB,IAAIrI,KAAK,CAACyJ,GAAmBjP,EAAKE,KAAM,CAAEtQ,KAAM,eACrC,GAAXke,EACU,GAAVC,GAGL,OAAQmB,GACC9Z,QAAAG,KAAK,sEAAuE2Z,EAE5F,CAGM,GAAIL,EACKA,QAIf,CAGI,IAAKP,GAAqBQ,IAAIL,GAErB,OADPrZ,QAAQC,IAAI,iDACL,KAIT,MAAMwZ,QAAwBhB,GAAc7N,EAAM8N,EAAUC,GAE5D,IAAKc,EACG,UAAI5d,MAAM,iDAMX,OAFiBke,KAEjBN,CAER,OAAQlb,GAIH,MAHIyB,QAAAzB,MAAM,4BAA6BA,GAGxB,uBAAfA,EAAMuM,KACF,IAAIjP,MAAM,4EACQ,qBAAf0C,EAAMuM,KACT,IAAIjP,MAAM,oDACP0C,EAAMxD,QAAQf,SAAS,mBAC1B,IAAI6B,MAAM0C,EAAMxD,SACb2O,IACH,IAAI7N,MAAM,gFAEV,IAAIA,MAAM,+BAAiC0C,EAAMxD,QAE7D,CAAY,QAERme,GAAqBc,OAAOX,GACJU,IAC5B,CACA,CAKA,SAASA,KAEQ/V,SAASuF,iBAAiB,qBAClCpN,SAAeyS,IAChBA,EAAIC,IAAI1U,WAAW,UACjB2U,IAAAC,gBAAgBH,EAAIC,IAC9B,IAaE,GATiB7K,SAASuF,iBAAiB,UAClCpN,SAAkBuY,IACpB1Q,SAASsH,KAAKqJ,SAASD,KAC1BA,EAAOE,MAAQ,EACfF,EAAOG,OAAS,EACtB,IAIMjb,OAAOkb,GACL,IAAElb,OAAOkb,IAAO,OAAQ5U,GAAG,CAEnC,CAKO,SAAS6S,KACV,IAEF,MAAMjW,EAAa4D,KAAKC,MAAMC,aAAa2B,QAAQ,eAAiB,MAChEzF,MAAcA,EAAWhC,OAAQ,CACnC,IAAImf,GAAW,EACT,MAAAC,EAAoBpd,EAAW0F,KAAgBlI,IACnD,GAAIA,EAASc,OAASd,EAASc,MAAMN,OAAS,IAAQ,CAE9C,MAAAqf,EAAW,IAAI7f,GAKd,OAJH6f,EAAS/e,MAAMjB,WAAW,gBAC5BggB,EAAS/e,MAAQ+e,EAAS/e,MAAMkT,QAAQ,2BAA4B,IACzD2L,GAAA,GAENE,CACjB,CACe,OAAA7f,CAAA,IAGL2f,GACFrZ,aAAaC,QAAQ,aAAcH,KAAKI,UAAUoZ,GAE1D,CAGI,MAAMvc,EAAa+C,KAAKC,MAAMC,aAAa2B,QAAQ,eAAiB,MAChE5E,MAAcA,EAAW7C,OAAQ,CACnC,IAAImf,GAAW,EACT,MAAAG,EAAoBzc,EAAW6E,KAAa3E,IAChD,GAAIA,EAAMzC,OAASyC,EAAMzC,MAAMN,OAAS,IAAQ,CACxC,MAAAqf,EAAW,IAAItc,GAKd,OAJHsc,EAAS/e,MAAMjB,WAAW,gBAC5BggB,EAAS/e,MAAQ+e,EAAS/e,MAAMkT,QAAQ,2BAA4B,IACzD2L,GAAA,GAENE,CACjB,CACe,OAAAtc,CAAA,IAGLoc,GACFrZ,aAAaC,QAAQ,aAAcH,KAAKI,UAAUsZ,GAE1D,CAEW,QACR,OAAQ7b,GAEA,OADCyB,QAAAzB,MAAM,4BAA6BA,IACpC,CACX,CACA,CAsBO,SAASsH,GAAegJ,GAC7B,IAAKA,EAGH,OAFA7O,QAAQC,IAAI,gDACZ8B,GAAU,yCAA0C,WAIlD,IACI2O,QAAQ1M,SAASC,eAAe,cACtC,IAAKyM,EAEH,YADA1Q,QAAQzB,MAAM,kCAIV,MAAA8b,EAAWrW,SAASC,eAAe,cAEnCqW,GADYtW,SAAS0B,cAAc,eACpB1B,SAASC,eAAe,WACvCsW,EAAgBvW,SAASC,eAAe,WAE9C,IAAKoW,EAEH,YADAra,QAAQzB,MAAM,2CAKAic,KAGhB,MAAMC,EAAW5L,EAAI1U,WAAW,cAAgB0U,EAAM,0BAA0BA,IAGhFwL,EAASxL,IAAM4L,EAmUnB,SAA8B/J,EAAO2J,EAAUI,GAEzC,IAAAC,EAAoB1W,SAASC,eAAe,qBAEhD,IAAKyW,EAAmB,CAEhB,MAAAC,EAA2B3W,SAASgB,cAAc,OACxD2V,EAAyBrW,UAAY,mBAGjBoW,EAAA1W,SAASgB,cAAc,UAC3C0V,EAAkBngB,GAAK,oBACvBmgB,EAAkBrK,MAAQ,kCAC1BqK,EAAkBlW,UAAY,gDAG9BmW,EAAyBxV,YAAYuV,GAGrChK,EAAMvL,YAAYwV,EACtB,CAGsBC,IAAA,EACNC,GAAAJ,EACGK,GAAA,KAGCJ,EAAArF,UAAUI,OAAO,UACnCiF,EAAkBlW,UAAY,gDAGZkW,EAAAnD,QAAU,SAAS3X,GACnCA,EAAM+S,kBAUV,SAA+B0H,EAAUU,GAEvCH,IAAqBA,GAEjBA,IAEOP,EAAAhF,UAAUC,IAAI,WACvByF,EAAa7D,UAAW,EACxB6D,EAAavW,UAAY,uDAGpBsW,IAuBHT,EAASxL,IAAMiM,GACNT,EAAAhF,UAAUI,OAAO,WAC1BsF,EAAa7D,UAAW,EACxB6D,EAAavW,UAAY,6CACZuW,EAAA1F,UAAUC,IAAI,WAkBjC,SAAkCmF,GAChC,OAAO,IAAIrT,SAAQ,CAACC,EAAS+L,KACvB,IACI,MAAAxE,EAAM,IAAIgK,MAEhBhK,EAAIvD,OAAS,WACP,IAEI,MAAAqJ,EAAS1Q,SAASgB,cAAc,UAChCgW,EAAMtG,EAAOmE,WAAW,MAGxBoC,EAAc1d,KAAK6D,IAAIwN,EAAIgG,MAAO,MAClCsG,EAAQD,EAAcrM,EAAIgG,MAChCF,EAAOE,MAAQqG,EACRvG,EAAAG,OAASjG,EAAIiG,OAASqG,EAG7BF,EAAIG,uBAAwB,EAC5BH,EAAII,sBAAwB,OAG5BJ,EAAIlC,UAAUlK,EAAK,EAAG,EAAG8F,EAAOE,MAAOF,EAAOG,QAqCxD,SAAyBmG,EAAKpG,EAAOC,GAC/B,IAEF,MAAMlB,EAAYqH,EAAIK,aAAa,EAAG,EAAGzG,EAAOC,GAC1CpZ,EAAOkY,EAAUlY,KAGP,EAACA,EAAMmZ,EAAOC,EAAQyG,EAAS,MAEvC,MAAAC,EAAW,IAAIC,kBAAkB/f,GAGvC,QAASggB,EAAI,EAAGA,EAAI5G,EAAS,EAAG4G,IAC9B,QAASC,EAAI,EAAGA,EAAI9G,EAAQ,EAAG8G,IAAK,CAC5B,MAAAC,EAAwB,GAAjBF,EAAI7G,EAAQ8G,GAGzB,QAASE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpB,MAAAC,EAAeN,EAASI,EAAMC,GAS9BE,EAAY,EAAID,EANVN,EAASI,EAAc,EAAR/G,EAAYgH,GACxBL,EAASI,EAAc,EAAR/G,EAAYgH,GAC7BL,EAASI,EAAM,EAAIC,GAClBL,EAASI,EAAM,EAAIC,GAMjCngB,EAAKkgB,EAAMC,GAAKre,KAAK+K,IAAI,IAAK/K,KAAK6D,IAAI,EACrCya,GAAgBC,EAAYD,GAAgBP,GAE1D,CACA,CACA,EAIYS,CAAAtgB,EAAMmZ,EAAOC,EAAQ,IAGzBmG,EAAAgB,aAAarI,EAAW,EAAG,EAChC,OAAQpD,GACCvQ,QAAAzB,MAAM,6BAA8BgS,EAEhD,CACA,CAjFU0L,CAAgBjB,EAAKtG,EAAOE,MAAOF,EAAOG,QAG1CH,EAAOqE,QAAe9E,IACpB,GAAIA,EAAM,CACF,MAAA9I,EAAS,IAAIC,WACnBD,EAAO6N,UAAY,IAAM3R,EAAQ8D,EAAOpP,QACjCoP,EAAAyB,QAAiB2D,GAAA6C,EAAO7C,GAC/BpF,EAAO8N,cAAchF,EACnC,MACqBb,EAAA,IAAIvX,MAAM,yBAC/B,GACa,aAAc,IAClB,OAAQ0U,GACP6C,EAAO7C,EACjB,CACO,EAED3B,EAAIhC,QAAU,IAAMwG,EAAO,IAAIvX,MAAM,yBAGrC+S,EAAIC,IAAM4L,CACX,OAAQlK,GACP6C,EAAO7C,EACb,IAEA,CA9F+B2L,CAAArB,IAAavR,MAAoB6S,IACvCrB,GAAAqB,EACbvB,KACFP,EAASxL,IAAMiM,GACfC,EAAavW,UAAY,6CACZuW,EAAA1F,UAAUC,IAAI,WAEpB+E,EAAAhF,UAAUI,OAAO,WAC1BsF,EAAa7D,UAAW,KACvB5G,OAAe/R,IACRyB,QAAAzB,MAAM,0CAA2CA,GACrCqc,IAAA,EACpBP,EAASxL,IAAMgM,GACNR,EAAAhF,UAAUI,OAAO,WAC1BsF,EAAa7D,UAAW,EACxB6D,EAAavW,UAAY,gDACZuW,EAAA1F,UAAUI,OAAO,UAC9B1T,GAAU,kDAAmD,QAAO,MAYxEsY,EAASxL,IAAMgM,GACfE,EAAavW,UAAY,gDACZuW,EAAA1F,UAAUI,OAAO,WAIhB+E,IAClB,CA1DI4B,CAAsB/B,EAAUK,EACjC,CACH,CApWyBhK,GAAO2J,EAAUI,GAEtC/J,EAAM/G,MAAMgG,QAAU,QAGtBzO,YAAW,KACTwP,EAAM2E,UAAUC,IAAI,OAAM,GACzB,IAGCgF,IACAA,EAAa/C,QAAU,WACnB8E,GAAWC,GAAe,GAC7B,GAGD/B,IACAA,EAAchD,QAAU,WACpB8E,GAAWC,GAAe,GAC7B,IAiDiBrV,EA7CLoT,GA+CTja,iBAAiB,aAAcmc,GAAkB,CAAE7G,SAAS,IAGpEzO,EAAQ7G,iBAAiB,YAAaoc,GAAiB,CAAE9G,SAAS,IAGlEzO,EAAQ7G,iBAAiB,WAAYqc,GAAgB,CAAE/G,SAAS,IAGhEzO,EAAQ7G,iBAAiB,QAASsc,GAAkB,CAAEhH,SAAS,IArD/DhF,EAAM6G,QAAU,SAAS3X,GACjBA,EAAM+K,SAAW+F,GAAUiM,IAAcC,IACxBC,IAExB,EAGK,MAAAC,EAAgB,SAASld,GACT,WAAdA,EAAMS,MACWwc,KACR7Y,SAAA+Y,oBAAoB,UAAWD,GAE/C,EACQ9Y,SAAA5D,iBAAiB,UAAW0c,GAErC9c,QAAQC,IAAI,qCACb,OAAQ1B,GACCyB,QAAAzB,MAAM,iCAAkCA,GAChDwD,GAAU,yBAA0B,QACxC,CAuBA,IAA0BkF,CAtB1B,CAGA,IAAIqV,GAAe,EACfU,GAAW,EACXC,GAAW,GACXC,GAAS,EACTC,GAAS,EACTC,GAAkB,EAClBC,GAAe,EACfC,GAAU,EACVC,GAAU,EACVC,GAAc,EACdb,IAAY,EACZC,IAAa,EAGbhC,IAAoB,EACpBC,GAAc,KACdC,GAAiB,KAkBrB,SAASyB,GAAiBrc,GACtBA,EAAEkX,iBAEI1G,QAAQ1M,SAASC,eAAe,cAElC,GAAqB,IAArB/D,EAAEud,QAAQ3iB,OAAc,CAExBoiB,GAAShd,EAAEud,QAAQ,GAAGC,QAAUJ,GAChCH,GAASjd,EAAEud,QAAQ,GAAGE,QAAUJ,GAGhC,MAAMK,GAAc,IAAIzgB,MAAO0gB,UACzBC,EAAYF,EAAcJ,GAE5BM,EAAY,KAAOA,EAAY,IAE3BxB,GAAe,EAEC9B,KAGhB6B,GAAW,GAEfnc,EAAEkX,kBAGQoG,GAAAI,EACDG,IAAA,EAGTzB,GAAe,GAAK5L,GACpBA,EAAM2E,UAAUC,IAAI,WAG3B,MAAU,GAAqB,IAArBpV,EAAEud,QAAQ3iB,OAAc,CAEnB6hB,IAAA,EACCoB,IAAA,EAGP,MAAAC,EAAK9d,EAAEud,QAAQ,GAAGC,QAAUxd,EAAEud,QAAQ,GAAGC,QACzCO,EAAK/d,EAAEud,QAAQ,GAAGE,QAAUzd,EAAEud,QAAQ,GAAGE,QAC/CP,GAAkB7f,KAAK2gB,KAAKF,EAAKA,EAAKC,EAAKA,GAC5BZ,GAAAf,GAGX5L,GACAA,EAAM2E,UAAUC,IAAI,UAEhC,CACA,CAGA,SAASkH,GAAgBtc,GAGrB,GAFAA,EAAEkX,iBAEEuF,IAAkC,IAArBzc,EAAEud,QAAQ3iB,OAAc,CAE/B,MAAAkjB,EAAK9d,EAAEud,QAAQ,GAAGC,QAAUxd,EAAEud,QAAQ,GAAGC,QACzCO,EAAK/d,EAAEud,QAAQ,GAAGE,QAAUzd,EAAEud,QAAQ,GAAGE,QACzCQ,EAAW5gB,KAAK2gB,KAAKF,EAAKA,EAAKC,EAAKA,GAGtC,IAAAG,EAAWf,IAAgBc,EAAWf,IAG1CgB,EAAW7gB,KAAK6D,IAAI6b,GAAU1f,KAAK+K,IAAI0U,GAAUoB,IAEjD/B,GAAW+B,EAEnB,SAAexB,IAAmC,IAArB1c,EAAEud,QAAQ3iB,QAAgBwhB,GAAe,EAAG,CAEjE,MAAMZ,EAAIxb,EAAEud,QAAQ,GAAGC,QAAUR,GAC3BzB,EAAIvb,EAAEud,QAAQ,GAAGE,QAAUR,GAG3BkB,EAAara,SAASC,eAAe,cACrCqa,EAAWD,EAAWzJ,MAAQ0H,GAC9BiC,EAAYF,EAAWxJ,OAASyH,GAChCkC,EAAiB5kB,OAAOoW,WACxByO,EAAkB7kB,OAAOkc,YAGzB4I,EAAOnhB,KAAK6D,IAAI,GAAIkd,EAAWE,GAAkB,GACjDG,EAAOphB,KAAK6D,IAAI,GAAImd,EAAYE,GAAmB,GAG/CnB,GAAA/f,KAAK6D,KAAKsd,EAAMnhB,KAAK+K,IAAIoW,EAAMhD,IAC/B6B,GAAAhgB,KAAK6D,KAAKud,EAAMphB,KAAK+K,IAAIqW,EAAMlD,IAGzBmD,IACxB,CACA,CAGA,SAASnC,GAAevc,GACdwQ,QAAQ1M,SAASC,eAAe,cAGlCyM,GACAA,EAAM2E,UAAUI,OAAO,WAAY,WAG3BkH,IAAA,EAGZzb,YAAW,KACM6c,IAAA,IACd,IACP,CAGA,SAASrB,GAAiBxc,GACtBA,EAAEkX,iBAGF,MAAMyH,GAA8B,GAAtBthB,KAAKuhB,KAAK5e,EAAE6e,QAGpBX,EAAW7gB,KAAK6D,IAAI6b,GAAU1f,KAAK+K,IAAI0U,GAAUV,GAAeuC,IAGtE,GAAIT,IAAa9B,GAAc,CACrB5L,QAAQ1M,SAASC,eAAe,cAClCyM,IAEAA,EAAM2E,UAAUC,IAAI,WAGpBpU,YAAW,KACPwP,EAAM2E,UAAUI,OAAO,UAAS,GACjC,MAIP4G,GAAW+B,EACnB,CACA,CAGA,SAAS/B,GAAW+B,GAEhB9B,GAAe/e,KAAK6D,IAAI6b,GAAU1f,KAAK+K,IAAI0U,GAAUoB,IAG/CY,QAAYhb,SAAS0B,cAAc,eACrCsZ,IACAA,EAAU9a,YAAc,GAAG3G,KAAKoJ,MAAqB,IAAf2V,QAItCA,IAAgB,IACNgB,GAAA,EACAC,GAAA,GAIEqB,IACpB,CAGA,SAASA,KACCP,QAAara,SAASC,eAAe,cACvCoa,IACAA,EAAW1U,MAAME,UAAY,aAAayT,SAAcC,eAAoBjB,MAEpF,CAGA,SAAS9B,KACU8B,GAAA,EACLgB,GAAA,EACAC,GAAA,EACEZ,IAAA,EACCoB,IAAA,EAGPiB,QAAYhb,SAAS0B,cAAc,eACrCsZ,IACAA,EAAU9a,YAAc,QAItBma,QAAara,SAASC,eAAe,cACvCoa,IACAA,EAAW1U,MAAME,UAAY,+BAErC,CAGA,SAASoV,KACCvO,QAAQ1M,SAASC,eAAe,cAChCoW,EAAWrW,SAASC,eAAe,cACnCyW,EAAoB1W,SAASC,eAAe,qBAElD,GAAIyM,EAAO,CAEPA,EAAM2E,UAAUI,OAAO,OAAQ,WAAY,WAGvC4E,IACSA,EAAA0C,oBAAoB,aAAcR,IAClClC,EAAA0C,oBAAoB,YAAaP,IACjCnC,EAAA0C,oBAAoB,WAAYN,IAChCpC,EAAA0C,oBAAoB,QAASL,KAIpC,MAAApC,EAAetW,SAASC,eAAe,UACvCsW,EAAgBvW,SAASC,eAAe,WAE1CqW,MAA2B/C,QAAU,MACrCgD,MAA6BhD,QAAU,MACvCmD,MAAqCnD,QAAU,MAGrCsD,GAAA,KACGC,GAAA,KACGF,IAAA,EAEpB1Z,YAAW,KACPwP,EAAM/G,MAAMgG,QAAU,OACtBe,EAAM6G,QAAU,KAGAiD,IAAA,GACjB,IACX,CACA,CCzqBO,SAAS9V,KAEP,WADSvH,MACL+hB,mBAAmB,QAChC,CAGO,SAASja,GAAWka,GACrB,IAACA,EAAmB,SACxB,MAAMjkB,EAAO,IAAIiC,KAAKgiB,EAAa,aACnC,OAAI3iB,MAAMtB,EAAK2iB,WAAmB,GAE3B3iB,EAAKgkB,mBAAmB,QACjC,CAGO,SAASriB,GAAcsiB,GACxB,IAACA,EAAmB,SACxB,MAAMjkB,EAAO,IAAIiC,KAAKgiB,EAAa,aACnC,OAAI3iB,MAAMtB,EAAK2iB,WAAmB,GAE3B3iB,EAAKgkB,mBAAmB,QACjC,CAGO,SAAS/a,GAAe7H,GACzB,OAAAE,MAAMF,GAAe,OAElBA,EACJmL,QAAQ,GACR6G,QAAQ,IAAK,KACbA,QAAQ,0BAA2B,MACxC,CAGO,SAASpJ,GAAeia,GAMtB,MAJU,CACf,UAAW,UAAW,QAAS,SAC/B,SAAU,QAAS,UAHR,IAAIhiB,KAAKgiB,EAAa,aAKdC,SACvB,CAGO,SAAS1S,GAAaiB,GACvB,IAACA,EAAgB,SACrB,MAAO0R,EAAKC,EAAOC,GAAQ5R,EAAQjC,MAAM,KACzC,MAAO,GAAG6T,KAAQD,EAAM/R,SAAS,EAAG,QAAQ8R,EAAI9R,SAAS,EAAG,MAC9D,CAGO,SAASxL,GAAUhH,EAASP,EAAO,OAAQglB,EAAW,KACrD,MAAAC,EAAQzb,SAASgB,cAAc,OAsB9B,OArBDya,EAAAnb,UAAY,eAAe9J,IACjCilB,EAAMvb,YAAcnJ,EAEXiJ,SAAAsH,KAAKnG,YAAYsa,GAE1Bve,YAAW,KACHue,EAAApK,UAAUC,IAAI,OAAM,GACzB,KAGc,IAAbkK,GACFte,YAAW,KACHue,EAAApK,UAAUI,OAAO,QACvBvU,YAAW,KACL8C,SAASsH,KAAKqJ,SAAS8K,IAChBzb,SAAAsH,KAAKC,YAAYkU,EACpC,GACS,IAAG,GACLD,GAGEC,CACT,CCvEO,SAASC,GAAcC,SAE5B,KAAK,OAAAlT,EAAAkT,EAAUjlB,kBAAV,EAAA+R,EAAuB5R,QACnB,yCAIL,IAAC8kB,EAAUzkB,KACN,6BAKT,IADkB,sBACHC,KAAKwkB,EAAUzkB,MACrB,iDAIL,QAAkB,IAAlBykB,EAAU3kB,KAAuC,OAAlB2kB,EAAU3kB,KAAkC,KAAlB2kB,EAAU3kB,IAAY,CAC3E,MAAAA,EAAMC,WAAW0kB,EAAU3kB,KAC7B,GAAAwB,MAAMxB,GACD,sBAET,GAAIA,EAAM,EACD,oCAEb,CAGM,OAAC2kB,EAAUvkB,MAKR,KAJE,6BAKX,CCkEA,SAASgI,KACItG,EAAAuG,MAAK,CAACC,EAAGC,KAEZ,MAAAC,EAAiB,IAAIrG,KAAKoG,EAAErI,MAAQ,IAAIiC,KAAKmG,EAAEpI,MACjD,OAAmB,IAAnBsI,EAA6BA,EAG1BF,EAAE5I,YAAY+I,cAAcF,EAAE7I,iBAAa,EAAW,CAC3DgJ,SAAS,EACTC,YAAa,QACd,GAEL,CA4BO,SAASic,GAAmBllB,EAAaQ,EAAM8B,EAAY,MAC1D,MAAAJ,EAAiBC,GAAc3B,GACrC,OAAO4B,EAAWC,MAAK8F,GACrBA,EAAEnI,cAAgBA,GAClBmI,EAAE3H,OAAS0B,KACTI,GAAa6F,EAAEtI,KAAOyC,IAE5B,CCnJA,MAAM6iB,GAAQ,CACZC,cAAe,KACfC,WAAW,EACXC,mBAAmB,EACnBC,mBAAmB,GAGrB,IAAIC,GAAiB,EAerB,SAASC,GAAkBC,GACzBP,GAAMG,kBAAoBI,EACpB,MAAAC,EAASrc,SAASC,eAAe,wBACnCoc,GACKA,EAAAhL,UAAUiL,OAAO,SAAUF,EAEtC,CAEO,SAASG,GAAaC,GACrB,MAAAC,GDwFqBlmB,ECxFAimB,EDyFpB1jB,EAAW4jB,MAAK7d,GAAKA,EAAEtI,KAAOA,KAAO,MADvC,IAAsBA,ECvF3B,IAAKkmB,EAEH,YADA1e,GAAU,wBAAyB,SAKrCme,GAAiBtmB,OAAO+mB,YACf3c,SAAAsH,KAAK+J,UAAUC,IAAI,cAC5BtR,SAASsH,KAAK3B,MAAMiX,IAAM,IAAIV,OAE9BL,GAAMC,cAAgBU,EACtBX,GAAME,WAAY,EAClBF,GAAMI,mBAAoB,EAC1BE,IAAkB,GAGlBnc,SAASC,eAAe,mBAAmB3H,MAAQmkB,EAAM/lB,YACzDsJ,SAASC,eAAe,WAAW3H,MAAQmkB,EAAMzlB,KAAO,GACxDgJ,SAASC,eAAe,YAAY3H,MAAQmkB,EAAMvlB,KAG5C,MAAA2lB,EAAiB7c,SAASC,eAAe,cAC/C,GAAI4c,EAAgB,CAElB,MAAMC,EAAS7lB,WAAWwlB,EAAMzlB,KAAO,EACjC+lB,EAA6B,YAAjBN,EAAMplB,OACxBwlB,EAAetP,QAAUuP,GAAUC,CACvC,CAGW/c,SAAAC,eAAe,wBAAwBC,YAAc,GACrDF,SAAAC,eAAe,iBAAiBC,YAAc,GAC9CF,SAAAC,eAAe,kBAAkBC,YAAc,GAGlD,MAAA8c,EAAehd,SAASC,eAAe,oBAE7C,GADA+c,EAAaxc,UAAY,GACrBic,EAAMrlB,MAAO,CACT,MAAAwT,EAAM5K,SAASgB,cAAc,OAC/B4J,EAAAC,IAAM,0BAA0B4R,EAAMrlB,QAC1CwT,EAAIqS,IAAM,UACVrS,EAAItK,UAAY,gBAChB0c,EAAaxc,UAAY,+DAEToK,EAAIC,qLAMxB,CAEgB7K,SAASC,eAAe,aAChCoR,UAAUC,IAAI,UAGpBpU,YAAW,KACA8C,SAAAC,eAAe,mBAAmBkT,OAAO,GACjD,KAML,WACQ,MAAA+J,EAAWld,SAASC,eAAe,YACpBD,SAASC,eAAe,cACxBD,SAASC,eAAe,oBAC1BD,SAASC,eAAe,aACrCyM,QAAQ1M,SAASC,eAAe,aAGhCkd,EAAcD,EAASnQ,WAAU,GAC9BmQ,EAAAhQ,WAAWC,aAAagQ,EAAaD,GAExC,MAAAE,EAAkBpd,SAASC,eAAe,cAC1Cod,EAAkBrd,SAASC,eAAe,oBAC1Cqd,EAAgBtd,SAASC,eAAe,aAGxCsd,EAAaJ,EAAY5X,iBAAiB,SAGpC4X,EAAA/gB,iBAAiB,SAAUohB,IACvBJ,EAAAhhB,iBAAiB,QAASqhB,IAG1C/Q,EAAMtQ,iBAAiB,QAASshB,IAGhBL,EAAAjhB,iBAAiB,SAAS,KAEnCyf,GAAMI,kBAKTle,GAAU,6CAA8C,SAHxDuf,EAAchlB,MAAQ,GACtBglB,EAAc1R,QAGpB,IAIgB0R,EAAAlhB,iBAAiB,SAAUuhB,IAGzCJ,EAAWplB,SAAiB6Y,IAC1BA,EAAM5U,iBAAiB,UAAU,IAAM+f,IAAkB,KACzDnL,EAAM5U,iBAAiB,SAAS,IAAM+f,IAAkB,IAAK,IAI/DvmB,OAAOgoB,eAAiB,KAChB,MAAAZ,EAAehd,SAASC,eAAe,oBACvC4d,EAAa7d,SAASC,eAAe,kBAEvC+c,MAA2Bxc,UAAY,IACvCqd,MAAuB3d,YAAc,+BACzCic,IAAkB,EAAI,CAE1B,CA1DsB2B,EACtB,CAsEA,SAASJ,GAAiB9hB,GAClB8Q,QAAQ1M,SAASC,eAAe,aAClC,GAAArE,EAAM+K,SAAW+F,EAAO,CAC1B,GAAImP,GAAMG,kBAAmB,CACrB,MAAA+B,EAAuB/d,SAASC,eAAe,wBAMrD,OALqB8d,EAAA1M,UAAUC,IAAI,eAEnCpU,YAAW,KACY6gB,EAAA1M,UAAUI,OAAO,SAAQ,GAC7C,IAET,CACgBuM,IAChB,CACA,CA6DA,MAAML,GArON,SAAkBM,EAAMC,GAClB,IAAAC,EACJ,OAAO,YAAYC,GACjB5M,aAAa2M,GACbA,EAAUjhB,YAAW,IAAM+gB,EAAKI,MAAMC,KAAMF,IAAOF,EACpD,CACH,CA+N6BK,EA3D7B9P,eAAiC7S,SAE/B,GAAIigB,GAAMI,kBAER,YADAjgB,QAAQC,IAAI,oEAId,MAAM2K,EAAO,OAAA6B,EAAA7M,EAAM+K,OAAOE,YAAQ,EAAA4B,EAAA,GAClC,GAAK7B,EAED,IACFiV,GAAMI,mBAAoB,EAEpB,MAAAe,EAAehd,SAASC,eAAe,oBACvC4d,EAAa7d,SAASC,eAAe,kBACrCue,EAAaxe,SAASC,eAAe,aAG3C,GAAIue,EAAY,CAER,MAAAC,EAAWD,EAAWzR,WAAU,GAC3ByR,EAAAtR,WAAWC,aAAasR,EAAUD,GAEpCC,EAAAriB,iBAAiB,SAAUuhB,GAC1C,CAEQE,MAAuB3d,YAAc,IACrC8c,MAA2Bxc,UAAY,iEAErC,MAAAiV,QAAwBL,GAAuBxO,GAEjD6O,GAAmBuH,GACrBA,EAAaxc,UAAY,mEAETiV,gMAMhB0G,IAAkB,KAEda,MAA2Bxc,UAAY,IACvCqd,MAAuB3d,YAAc,gDAE5C,OAAQ3F,GACCyB,QAAAzB,MAAM,4BAA6BA,GAErC,MAAAyiB,EAAehd,SAASC,eAAe,oBACvC4d,EAAa7d,SAASC,eAAe,kBAEvC+c,MAA2Bxc,UAAY,IACvCqd,MAAuB3d,YAAc,6DAC7C,CAAY,QACR2b,GAAMI,mBAAoB,CAC9B,CACA,GAGyD,KAElDxN,eAAe+O,GAAiB5hB,WACrCA,EAAMwX,iBAEN,MAAM1c,EAAcsJ,SAASC,eAAe,mBAAmB3H,MAAMzB,OAC/DG,EAAMgJ,SAASC,eAAe,WAAW3H,MACzCpB,EAAO8I,SAASC,eAAe,YAAY3H,MAE3ClB,EAAQ,OAAAqR,EADOzI,SAASC,eAAe,oBAClByB,cAAc,aAAQ,EAAA+G,EAAAoC,IAG3C6T,GAAe,OAAAC,EAAS3e,SAAAC,eAAe,wBAAesN,WAAW,EAEnE,IAEF,MAAMqR,EAAiBxnB,EAAQA,EAAMkT,QAAQ,2BAA4B,IAAM,KAGzEuU,EAAW5nB,WAAWD,IAAQ,EAC9BK,EAASqnB,EAAe,UAAaG,EAAW,EAAI,YAAc,gBDjNrE,SAAqBtoB,EAAIuoB,GAC1B,IACF,MAAMC,EAAajmB,EAAW8F,WAAeC,KAAEtI,KAAOA,IACtD,IAAuB,IAAnBwoB,EACI,UAAIlnB,MAAM,yBAIZ,MAAAmnB,EAAelmB,EAAWimB,GAC1B/nB,EAAMC,WAAW6nB,EAAW9nB,MAAQ,EAGpCK,EAASynB,EAAWznB,SAAWL,EAAM,EAAI,YAAc,WAEvDioB,EAAe,IAChBD,KACAF,EACH9nB,MACAE,KAAM2B,GAAcimB,EAAW5nB,MAAQ8nB,EAAa9nB,MACpDX,GAAIyoB,EAAazoB,GACjBc,UAII6nB,EAAkBxD,GAAcuD,GACtC,GAAIC,EACI,UAAIrnB,MAAMqnB,GAIlB,GAAItD,GAAmBqD,EAAavoB,YAAauoB,EAAa/nB,KAAMX,GAC5D,UAAIsB,MAAM,kDAQX,OAJPiB,EAAWimB,GAAcE,EACT7f,KACAF,IAET+f,CACR,OAAQ1kB,GACP,MAAM,IAAI1C,MAAM,6BAA6B0C,EAAMxD,UACvD,CACA,CCyK+BooB,CAAYtD,GAAMC,cAAe,CAC1DplB,cACAM,MACAE,OACAE,MAAOwnB,EACPvnB,WAGF0G,GAAU,iCAAkC,WAGhCigB,KAGWhf,GACxB,OAAQzE,GACCyB,QAAAzB,MAAM,4BAA6BA,GACjCwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,CAEO,SAAS0mB,KACV5B,GAAMG,kBACJha,QAAQ,0DACEgc,KAGFA,IAEhB,CAEO,SAASA,KACAhe,SAASC,eAAe,aAChCoR,UAAUI,OAAO,UACdzR,SAAAsH,KAAK+J,UAAUI,OAAO,cACtBzR,SAAAsH,KAAK3B,MAAMiX,IAAM,GACnBhnB,OAAAwpB,SAAS,EAAGlD,IAEnBL,GAAMC,cAAgB,KACtBD,GAAME,WAAY,EAClBF,GAAMI,mBAAoB,EAC1BE,IAAkB,GAGTnc,SAAAC,eAAe,YAAYof,QAC3Brf,SAAAC,eAAe,oBAAoBO,UAAY,EAC1D,CCxSOiO,eAAe6Q,GAAsB1jB,SAC1CA,EAAMwX,iBAEN,MAAM1c,EAAcsJ,SAASC,eAAe,eAAe3H,MAAMzB,OAC3DG,EAAMgJ,SAASC,eAAe,OAAO3H,MAAMzB,OAC3CK,EAAO8I,SAASC,eAAe,QAAQ3H,MACvC0kB,EAAehd,SAASC,eAAe,gBACvC7I,EAAQ,OAAAqR,EAAAuU,EAAatb,cAAc,aAAQ,EAAA+G,EAAAoC,IAE7C,IAEE,GAAA+Q,GAAmBllB,EAAaQ,GAAO,CACnC,MAAAqoB,EFwGL,SAAyBroB,GACxB,MAAA0B,EAAiBC,GAAc3B,GACrC,OAAO4B,EAAWc,QAAYiF,KAAE3H,OAAS0B,GAC3C,CE3G6B4mB,CAAgBtoB,GACjCuoB,EAAiBF,EAAe7C,MAAcD,KAAM/lB,cAAgBA,IAQ1E,GANmBsL,QACjB,wBAAwBtL,mBAA6BQ,gBACzCuoB,EAAezoB,4CAO3B,YADOpB,OAAAkM,aAAa2d,EAAelpB,IAG7B,UAAIsB,MAAM,6DAExB,CAGI,MAAM+mB,EAAiBxnB,EAAQA,EAAMkT,QAAQ,2BAA4B,IAAM,WFxC5EmE,eAA2BkN,GAC5B,IAEI,MAAAuD,EAAkBxD,GAAcC,GACtC,GAAIuD,EACI,UAAIrnB,MAAMqnB,GAKlB,GADoBtD,GAAmBD,EAAUjlB,YAAailB,EAAUzkB,MAEhE,UAAIW,MAAM,kDAIlB,MAAMb,EAAMC,WAAW0kB,EAAU3kB,MAAQ,EACnCK,EAASL,EAAM,EAAI,YAAc,UAGjC0oB,EAAW,CACfnpB,GAAIkI,OAAOtF,KAAKyB,OAChBlE,YAAailB,EAAUjlB,YAAYG,OACnCG,MACAE,KAAMykB,EAAUzkB,KAChBE,MAAOukB,EAAUvkB,MACjBC,SACAsoB,WAAW,IAAIxmB,MAAOyQ,eAQjB,OAJP9Q,EAAWL,KAAKinB,GACAtgB,KACAF,IAETwgB,CACR,OAAQnlB,GAED,MADEyB,QAAAzB,MAAM,wBAAyBA,GACjCA,CACV,CACA,CEIUqlB,CAAY,CAChBlpB,cACAM,IAAa,KAARA,EAAa,KAAOA,EACzBE,OACAE,MAAOwnB,IAIThjB,EAAM+K,OAAO0Y,QACbrC,EAAaxc,UAAY,GAChBR,SAAAC,eAAe,cAAcC,YAAc,GAGpDF,SAASC,eAAe,QAAQ3H,MAAQoI,KAGxBjD,IACCI,IAEjBE,GAAU,iCAAkC,UAC7C,OAAQxD,GACCyB,QAAAzB,MAAM,wBAAyBA,GAC7BwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,CAMO,SAAS8oB,GAAoBjkB,GAClCA,EAAMwX,iBAEN,MAAM7b,EAASyI,SAASC,eAAe,aAAa3H,MAAMzB,OACpDK,EAAO8I,SAASC,eAAe,WAAW3H,MAE5C,IAEE,IAACf,IAAWL,EACR,UAAIW,MAAM,oCAIlB,MAAMse,EAAW,CACf5f,GAAIkI,OAAOtF,KAAKyB,OAChBrD,OAAQN,WAAWM,GACnBL,QAIFyC,EAAWlB,KAAK0d,GACAhX,IAGhBvD,EAAM+K,OAAO0Y,QACbrf,SAASC,eAAe,WAAW3H,MAAQoI,KAG3BzB,IACFtB,IACGE,IAEjBE,GAAU,+CAAgD,UAC3D,OAAQxD,GACCyB,QAAAzB,MAAM,0CAA2CA,GAC/CwD,GAAAxD,EAAMxD,QAAS,QAC7B,CACA,CAGA,IAAIklB,IAAoB,EA2JxB,MAAM6D,GAxJN,SAAkB7B,EAAMC,GAClB,IAAAC,EACJ,OAAO,YAAYC,GACjB5M,aAAa2M,GACbA,EAAUjhB,YAAW,IAAM+gB,EAAKI,MAAMC,KAAMF,IAAOF,EACpD,CACH,CAkJ6BK,EA5ItB9P,eAAiC7S,SAEtC,GAAIqgB,GAEF,YADAjgB,QAAQC,IAAI,oEAId,MAAM2K,EAAO,OAAA6B,EAAA7M,EAAM+K,OAAOE,YAAQ,EAAA4B,EAAA,GAClC,GAAK7B,EAED,IACkBqV,IAAA,EAEd,MAAAe,EAAehd,SAASC,eAAe,gBACvC4d,EAAa7d,SAASC,eAAe,cACrCue,EAAaxe,SAASC,eAAe,SAU3C,GAPI4d,MAAuB3d,YAAc,IACrC8c,MAA2Bxc,UAAY,iEAqG/C,WACQ,MAAAwc,EAAehd,SAASC,eAAe,gBAC7C,IAAK+c,EAAc,OAGb,MAAA+C,EAAW/C,EAAazX,iBAAiB,OAC3Cwa,GAAYA,EAASjpB,QACvBipB,EAAS5nB,SAAeyS,IAClBA,EAAIC,KAAOD,EAAIC,IAAI1U,WAAW,UAC5B2U,IAAAC,gBAAgBH,EAAIC,KAE1BD,EAAIC,IAAM,MAKdmS,EAAaxc,UAAY,EAC3B,CAnH4Bwf,GAGpBxB,EAAY,CAER,MAAAC,EAAWD,EAAWzR,WAAU,GAC3ByR,EAAAtR,WAAWC,aAAasR,EAAUD,GAEpCC,EAAAriB,iBAAiB,SAAU0jB,GAC1C,CAIU,MAAAxK,EAAgB,SAClB,GAAA1O,EAAK2O,KAAOD,EAER,MADN0H,EAAaxc,UAAY,GACnB,IAAI3I,MAAM,2DAKlB,IADmB,CAAC,aAAc,YAAa,cAC/B7B,SAAS4Q,EAAKpQ,MAEtB,MADNwmB,EAAaxc,UAAY,GACnB,IAAI3I,MAAM,wDAId,IAAAooB,EACJ,MAAMC,EAAiB,IAAI9c,SAAQ,CAAC+c,EAAG/Q,KACrC6Q,EAAiB/iB,YAAW,KACnBkS,EAAA,IAAIvX,MAAM,wEAAuE,GACvF,IAAK,IAIJ4d,QAAwBrS,QAAQgd,KAAK,CACzChL,GAAuBxO,GACvBsZ,IACCG,SAAQ,KACT7O,aAAayO,EAAc,IAG7B,GAAIxK,EAAiB,CAEnBuH,EAAaxc,UAAY,GAGnB,MAAA8f,EAAmBtgB,SAASgB,cAAc,OAChDsf,EAAiBhgB,UAAY,qBAEvB,MAAAsK,EAAM5K,SAASgB,cAAc,OACnC4J,EAAIC,IAAM4K,EACV7K,EAAIqS,IAAM,UACVrS,EAAItK,UAAY,gBAEV,MAAAsB,EAAe5B,SAASgB,cAAc,UAC5CY,EAAapL,KAAO,SACpBoL,EAAatB,UAAY,eACzBsB,EAAa1B,YAAc,IAC3B0B,EAAa2R,QAAU,WACJgN,kBAEb3V,EAAIC,IAAI1U,WAAW,UACjB2U,IAAAC,gBAAgBH,EAAIC,KAE1BD,EAAIC,IAAM,EACX,EAEDyV,EAAiBnf,YAAYyJ,GAC7B0V,EAAiBnf,YAAYS,GAC7Bob,EAAa7b,YAAYmf,EAC/B,MACMtD,EAAaxc,UAAY,GACzBqd,EAAW3d,YAAc,8CAE5B,OAAQ3F,GACCyB,QAAAzB,MAAM,4BAA6BA,GAErC,MAAAyiB,EAAehd,SAASC,eAAe,gBACvC4d,EAAa7d,SAASC,eAAe,cAEvC+c,MAA2Bxc,UAAY,IACvCqd,IAAYA,EAAW3d,YAAc3F,EAAMxD,SAAW,6DAC9D,CAAY,QACYklB,IAAA,EAGpB/e,YAAW,KACT,GAAItH,OAAOkb,GACL,IAAElb,OAAOkb,IAAO,OAAQ5U,GAAG,CACvC,GACO,IACP,CACA,GAyByD,KAKlD,SAASskB,KACR,MAAAC,EAAYzgB,SAASC,eAAe,gBACrBD,SAASC,eAAe,gBAC1BD,SAASC,eAAe,SACvBD,SAASC,eAAe,eAO5C,GANaD,SAASC,eAAe,QAGhC3H,MAAQoI,KAGT+f,EAAW,CACP,MAAAC,EAAeD,EAAU1T,WAAU,GAC/B0T,EAAAvT,WAAWC,aAAauT,EAAcD,GACnCC,EAAAtkB,iBAAiB,SAAUkjB,GAC5C,CAGQ,MAAAjC,EAAkBrd,SAASC,eAAe,gBAC1Cqd,EAAgBtd,SAASC,eAAe,SACxC0gB,EAAiB3gB,SAASC,eAAe,eACzC2gB,EAAU5gB,SAASC,eAAe,QAGpCod,GAAmBC,IACLD,EAAAjhB,iBAAiB,SAAS,KAEnC6f,GAKHle,GAAU,6CAA8C,SAHxDuf,EAAchlB,MAAQ,GACtBglB,EAAc1R,QAGtB,IAIkB0R,EAAAlhB,iBAAiB,SAAU0jB,KAIvCa,GAAkBC,IACLD,EAAAvkB,iBAAiB,SAAS,KACjC,MAAAykB,EAASF,EAAeroB,MAAMzB,OAC9BiqB,EAAcF,EAAQtoB,MAExBuoB,GAAUC,GAAelF,GAAmBiF,EAAQC,IACvCH,EAAAtP,UAAUC,IAAI,WAC7BqP,EAAetU,MAAQ,WAAWwU,kBAAuBC,MAE1CH,EAAAtP,UAAUI,OAAO,WAChCkP,EAAetU,MAAQ,GAC/B,IAIYuU,EAAAxkB,iBAAiB,UAAU,KAC3B,MAAAykB,EAASF,EAAeroB,MAAMzB,OAC9BiqB,EAAcF,EAAQtoB,MAExBuoB,GAAUC,GAAelF,GAAmBiF,EAAQC,IACvCH,EAAAtP,UAAUC,IAAI,WAC7BqP,EAAetU,MAAQ,WAAWwU,kBAAuBC,MAE1CH,EAAAtP,UAAUI,OAAO,WAChCkP,EAAetU,MAAQ,GAC/B,KAKEzW,OAAO2qB,gBAAkB,KACjB,MAAAvD,EAAehd,SAASC,eAAe,gBACvC4d,EAAa7d,SAASC,eAAe,cAEvC+c,MAA2Bxc,UAAY,IACvCqd,MAAuB3d,YAAc,+BAE7C,CAKO,SAAS6gB,KACR,MAAAC,EAAUhhB,SAASC,eAAe,WAGxCD,SAASC,eAAe,WAAW3H,MAAQoI,KAG3CsgB,EAAQC,SAAW,KAGXD,EAAA5kB,iBAAiB,SAAUyjB,GACrC,aCnWO,SAASqB,GAAcC,GAAa,GACzCnlB,QAAQgH,KAAK,wBAGb,MAAMjL,EAASyC,IACT4mB,EAkER,SAAkCrpB,GAChC,MAAMspB,EAAS,CACbC,eAAgB,GAChBC,UAAW,IAIPC,MAAuBC,IACtB1pB,EAAAe,WAAWqB,aAAahC,SAAgBiC,IACxCA,EAAAtC,OAAOK,SAAiBoC,IAC3B,MAAM8B,EAAM,GAAG9B,EAAMnC,SAASmC,EAAMxD,UAC/ByqB,EAAiB9L,IAAIrZ,IACxBmlB,EAAiBE,IAAIrlB,EAAK,CACxBjE,MAAOmC,EAAMnC,MACbrB,QAASwD,EAAMxD,QACfkD,MAAO,GACP0nB,MAAO,IAIXH,EAAiBI,IAAIvlB,GAAKpC,MAAMxB,KAAK2B,EAAKA,MACzBonB,EAAAI,IAAIvlB,GAAKslB,OAAA,GAC3B,IAIHN,EAAOC,eAAiBO,MAAMC,KAAKN,EAAiB1c,UAG9C,MAAAid,MAAkBN,IAqBjB,OApBA1pB,EAAA4B,WAAWQ,aAAahC,SAAgBiC,IACxCA,EAAAtC,OAAOK,SAAiBoC,IAC3B,MAAM8B,EAAM,GAAG9B,EAAMnC,SAASmC,EAAMxD,UAC/BgrB,EAAYrM,IAAIrZ,IACnB0lB,EAAYL,IAAIrlB,EAAK,CACnBjE,MAAOmC,EAAMnC,MACbrB,QAASwD,EAAMxD,QACfkD,MAAO,GACP0nB,MAAO,IAIXI,EAAYH,IAAIvlB,GAAKpC,MAAMxB,KAAK2B,EAAKA,MACzB2nB,EAAAH,IAAIvlB,GAAKslB,OAAA,GACtB,IAIHN,EAAOE,UAAYM,MAAMC,KAAKC,EAAYjd,UAEnCuc,CACT,CArH2BW,CAAyBjqB,GAyC9C,GAtCJiE,QAAQwR,MAAM,qCACdxR,QAAQC,IAAI,YAAWlE,EAAOC,QAAU,YAAc,oBAC9CgE,QAAAC,IAAI,cAAc,IAAI9C,KAAKpB,EAAO4C,WAAWsnB,oBAGrDjmB,QAAQwR,MAAM,YACdxR,QAAQC,IAAI,UAAUnD,EAAWhC,UACjCkF,QAAQC,IAAI,YAAYlE,EAAOe,WAAWoB,WAAWpD,UACrDkF,QAAQC,IAAI,cAAclE,EAAOe,WAAWqB,aAAarD,UAErDiB,EAAOe,WAAWqB,aAAarD,OAAS,IAC1CkF,QAAQwR,MAAM,yBACd4T,EAAiBE,eAAenpB,SAAQ,CAAC+pB,EAAO7nB,KACtC2B,QAAAC,IAAI,gBAAgB5B,EAAQ,MAAM6nB,EAAMnrB,YAAYmrB,EAAMP,qBAAoB,IAExF3lB,QAAQmmB,YAEVnmB,QAAQmmB,WAGRnmB,QAAQwR,MAAM,kBACdxR,QAAQC,IAAI,UAAUtC,EAAW7C,UACjCkF,QAAQC,IAAI,YAAYlE,EAAO4B,WAAWO,WAAWpD,UACrDkF,QAAQC,IAAI,cAAclE,EAAO4B,WAAWQ,aAAarD,UAErDiB,EAAO4B,WAAWQ,aAAarD,OAAS,IAC1CkF,QAAQwR,MAAM,yBACd4T,EAAiBG,UAAUppB,SAAQ,CAAC+pB,EAAO7nB,KACjC2B,QAAAC,IAAI,gBAAgB5B,EAAQ,MAAM6nB,EAAMnrB,YAAYmrB,EAAMP,qBAAoB,IAExF3lB,QAAQmmB,YAEVnmB,QAAQmmB,WAERnmB,QAAQmmB,WACRnmB,QAAQkH,QAAQ,wBAGXnL,EAAOC,QAWV+F,GAAU,iDAAkD,eAXzC,CACnB,MAAMqkB,EAAcrqB,EAAOe,WAAWqB,aAAarD,OAASiB,EAAO4B,WAAWQ,aAAarD,OAE3F,GAAIqqB,EAAY,CAER,MAAAkB,EAAeC,GAAWvqB,GAChCgG,GAAU,eAAeqkB,mCAA6CC,EAAaE,QAAU,UAAY,YAAYF,EAAaG,SAASJ,gBAA2B,UAC5K,MACgBrkB,GAAA,yBAAyBqkB,iEAA4E,QAErH,CAIS,OACLrqB,SACAspB,OAAQD,EAEZ,CAiEO,SAASkB,GAAWG,GACzBzmB,QAAQgH,KAAK,mBAEb,MAAMqf,EAAe,CACnBE,SAAS,EACTC,MAAO,EACPE,MAAO,EACPC,cAAe,EACfC,SAAU,EACVC,WAAY,IAgKP,OA5JPR,EAAaK,MAAQD,EAAiB3pB,WAAWqB,aAAarD,OAC1C2rB,EAAiB9oB,WAAWQ,aAAarD,OAG5C2rB,EAAA3pB,WAAWqB,aAAahC,SAAgBiC,IACjD,MAAAC,EAAQvB,EAAW8F,WAAUC,GAAKA,EAAEtI,KAAO6D,EAAKA,KAAK7D,KAC3D,IAAkB,IAAd8D,EAAc,CAChB,IAAImoB,GAAQ,EAGPpoB,EAAAtC,OAAOK,SAAiBoC,IAC3B,OAAQA,EAAMnC,OACZ,IAAK,SACQU,EAAAuB,GAAOhD,OAASJ,WAAW6B,EAAWuB,GAAOrD,KAAO,EAAI,YAAc,UACzEwrB,GAAA,EACR,MAEF,IAAK,KACE1pB,EAAWuB,GAAO9D,KACrBuC,EAAWuB,GAAO9D,GAAK,UAAU4C,KAAKyB,SAASrB,KAAKuB,SAASC,SAAS,IAAI3E,UAAU,EAAG,KAC/EosB,GAAA,GAEV,MAEF,IAAK,OAEC,GAAA1pB,EAAWuB,GAAOnD,KAChB,IACF,MAAM4rB,EAAU,IAAI3pB,KAAKL,EAAWuB,GAAOnD,MACtCsB,MAAMsqB,EAAQjJ,aACN/gB,EAAAuB,GAAOnD,KAAO4rB,EAAQlZ,cAAclC,MAAM,KAAK,GAClD8a,GAAA,EAEX,OAAQtmB,GAEvB,CAEY,MAEF,IAAK,MAEH,QAA8B,IAA1BpD,EAAWuB,GAAOrD,IAAmB,CACvC,MAAMA,EAAMC,WAAW6B,EAAWuB,GAAOrD,KACpCwB,MAAMxB,IAIE8B,EAAAuB,GAAOrD,IAAM,EAChBwrB,GAAA,IAJG1pB,EAAAuB,GAAOrD,IAAMA,EAChBwrB,GAAA,EAKxB,CACY,MAEF,IAAK,cAEE1pB,EAAWuB,GAAO3D,cACrBoC,EAAWuB,GAAO3D,YAAc,UAAU2D,EAAQ,IAC1CmoB,GAAA,GAGtB,IAGUA,GACWH,EAAAG,QACAH,EAAAM,iBAEbN,EAAaQ,WAAWpqB,KAAK,CAC3BjC,KAAM,WACND,GAAI6D,EAAKA,KAAK7D,GACduB,OAAQsC,EAAKtC,QAGvB,KAImB2qB,EAAA9oB,WAAWQ,aAAahC,SAAgBiC,IACjD,MAAAC,EAAQV,EAAWiF,WAAUE,GAAKA,EAAEvI,KAAO6D,EAAKA,KAAK7D,KAC3D,IAAkB,IAAd8D,EAAc,CAChB,IAAImoB,GAAQ,EAGPpoB,EAAAtC,OAAOK,SAAiBoC,IAC3B,OAAQA,EAAMnC,OACZ,IAAK,KACEuB,EAAWU,GAAO9D,KACrBoD,EAAWU,GAAO9D,GAAK,cAAc4C,KAAKyB,SAASrB,KAAKuB,SAASC,SAAS,IAAI3E,UAAU,EAAG,KACnFosB,GAAA,GAEV,MAEF,IAAK,OAEC,GAAA7oB,EAAWU,GAAOnD,KAChB,IACF,MAAM4rB,EAAU,IAAI3pB,KAAKQ,EAAWU,GAAOnD,MACtCsB,MAAMsqB,EAAQjJ,aACNlgB,EAAAU,GAAOnD,KAAO4rB,EAAQlZ,cAAclC,MAAM,KAAK,GAClD8a,GAAA,EAEX,OAAQtmB,GAEvB,CAEY,MAEF,IAAK,SAEH,QAAiC,IAA7BvC,EAAWU,GAAO9C,OAAsB,CAC1C,MAAMA,EAASN,WAAW0C,EAAWU,GAAO9C,SACvCiB,MAAMjB,IAAWA,EAAS,GAClBoC,EAAAU,GAAO9C,OAASA,EACnBirB,GAAA,IACEhqB,MAAMjB,IAAWA,GAAU,IAC1BoC,EAAAU,GAAO9C,OAAS,IACnBirB,GAAA,EAExB,EAEA,IAGUA,GACWH,EAAAG,QACAH,EAAAO,YAEbP,EAAaQ,WAAWpqB,KAAK,CAC3BjC,KAAM,WACND,GAAI6D,EAAKA,KAAK7D,GACduB,OAAQsC,EAAKtC,QAGvB,KAIMuqB,EAAaM,cAAgB,GACfzjB,IAGdmjB,EAAaO,SAAW,GACVzjB,IAIdkjB,EAAaG,MAAQ,IACT7kB,IACC6E,KAGJ6f,EAAAE,QAAUF,EAAaG,MAAQ,EAE5CxmB,QAAQkH,QAAQ,mBACRlH,QAAAC,IAAI,uBAAwBomB,GAE7BA,CACT,CAiDO,SAASU,KAER,MAAAC,EAAa9B,IAAc,GAG7BxU,MAAQ1M,SAASC,eAAe,mBAC/ByM,IACHA,EAAQ1M,SAASgB,cAAc,OAC/B0L,EAAMnW,GAAK,kBACXmW,EAAMpM,UAAY,gBACTN,SAAAsH,KAAKnG,YAAYuL,IAItB,MAAA1U,EAAUgrB,EAAWjrB,OAAOC,QAC5BoqB,EAAcY,EAAWjrB,OAAOe,WAAWqB,aAAarD,OAASksB,EAAWjrB,OAAO4B,WAAWQ,aAAarD,OAGjH4V,EAAMlM,UAAY,0IAImBxI,EAAU,QAAU,6FAErBA,EAAU,IAAM,mDAChBA,EAAU,iBAAmB,sKAI3Bc,EAAWhC,4KAIX6C,EAAW7C,yIAGhBsrB,EAAc,EAAI,UAAY,+CACzBA,mIAMhCA,EAAc,EAAI,8GAIdY,EAAW3B,OAAOC,eAAexqB,OAAS,EAAI,iJAIxCksB,EAAW3B,OAAOC,eAAe9iB,KAAa0jB,GAAA,gJAGdA,EAAM9pB,iEACN8pB,EAAMP,mBAAmC,IAAhBO,EAAMP,MAAc,IAAM,yFAEpDO,EAAMnrB,6DAEpCwN,KAAK,2DAGV,6BAEFye,EAAW3B,OAAOE,UAAUzqB,OAAS,EAAI,uJAInCksB,EAAW3B,OAAOE,UAAU/iB,KAAa0jB,GAAA,gJAGTA,EAAM9pB,iEACN8pB,EAAMP,mBAAmC,IAAhBO,EAAMP,MAAc,IAAM,yFAEpDO,EAAMnrB,6DAEpCwN,KAAK,2DAGV,+UAOJ,4XAcRmI,EAAM/G,MAAMgG,QAAU,OAGtB3L,SAASC,eAAe,sBAAsB7D,iBAAiB,SAAS,KACtEsQ,EAAM/G,MAAMgG,QAAU,UAGxB3L,SAASC,eAAe,yBAAyB7D,iBAAiB,SAAS,ggCAEzE6mB,EAAA,IAAA7f,QAAAC,UAAAiC,MAAA,IAAA4d,KAAoBC,QAAE7d,MAAqB8d,IACzCA,EAAaC,aACbtlB,GAAU,4BAA6B,UAAS,GACjD,IAICqkB,EAAc,GAChBpiB,SAASC,eAAe,iBAAiB7D,iBAAiB,SAAS,KAE3D,MAAAimB,EAAeC,GAAWU,EAAWjrB,QAGvCsqB,EAAaE,SACfxkB,GAAU,WAAWskB,EAAaG,SAASJ,yBAAoC,WAG/EllB,YAAW,KACTwP,EAAM/G,MAAMgG,QAAU,OACDoX,IAAA,GACpB,OAEHhlB,GAAU,wDAAyD,QAC3E,IAKE2O,EAAMhL,cAAc,qBAAqBtF,iBAAiB,SAAkBR,IAC1EA,EAAM+S,iBAAiB,IAIzBjC,EAAMtQ,iBAAiB,SAAS,KAC9BsQ,EAAM/G,MAAMgG,QAAU,SAE1B,CC9fA,MAAMkQ,GAAQ,CACZyH,QAAQ,EACRC,OAAQ,KACRC,SAAU,KACVC,cAAe,GACfC,UAAW,KACXnrB,UAAW,UAIb,IAAImU,GAAOiX,GAAgBC,GAAcC,GAAcC,GAAcC,GA4C9D,SAAShiB,GAAwBiiB,EAAYttB,GAClDmlB,GAAM0H,OAASS,EACfnI,GAAM2H,SAAW,WACjB3H,GAAM4H,cAAgB/sB,EACtBmlB,GAAMtjB,UAAY,SAClBsjB,GAAM6H,UAAY,KAChBzhB,EAAe+hB,EAAU,EAGZL,GAAAzjB,YAAc,yDAAyDxJ,IACtFktB,GAAaK,YAAc,4BAChBC,IACb,CAGO,SAAS5hB,GAAmB6hB,EAAO5sB,GACxCskB,GAAM0H,OAASY,EACftI,GAAM2H,SAAW,MACX3H,GAAA4H,cAAgBlsB,EAAOwD,WAC7B8gB,GAAMtjB,UAAY,QAClBsjB,GAAM6H,UAAY,KAChBnhB,EAAe4hB,EAAK,EAGPR,GAAAzjB,YAAc,+DAA+D3I,IAC5FqsB,GAAaK,YAAc,iBAChBC,IACb,CAGA,SAASA,KACPxX,GAAM/G,MAAMgG,QAAU,OACtBiY,GAAatrB,MAAQ,GACrBurB,GAAa3jB,YAAc,GACd0jB,GAAAvS,UAAUI,OAAO,SAG9BvU,YAAW,KACT0mB,GAAazQ,QACb0I,GAAMyH,QAAS,IACd,GACL,CAGA,SAASc,KACP1X,GAAM/G,MAAMgG,QAAU,OACtBkQ,GAAMyH,QAAS,EACfzH,GAAM0H,OAAS,KACf1H,GAAM4H,cAAgB,GACtB5H,GAAM6H,UAAY,IACpB,CAGA,SAASW,KACPR,GAAa3jB,YAAc,GACd0jB,GAAAvS,UAAUI,OAAO,QAChC,CAGA,SAAS6S,KACD,MAAAC,EAAaX,GAAatrB,MAAMzB,OAGtC,GAAK0tB,EAAL,CAMI,GAAoB,WAApB1I,GAAMtjB,WAEJ,GAAAgsB,IAAe1I,GAAM4H,cAEvB,YADAe,GAAU,2CAGP,CAGL,MAAMC,EAAcxtB,WAAWstB,EAAWja,QAAQ,IAAK,MACjDoa,EAAiBztB,WAAW4kB,GAAM4H,cAAcnZ,QAAQ,IAAK,MAE/D,GAAA9R,MAAMisB,IAAgBlrB,KAAK6P,IAAIqb,EAAcC,GAAkB,IAEjE,YADAF,GAAU,2BAGhB,CAGM3I,GAAM6H,YACR7H,GAAM6H,YACMU,KAxBhB,MAFII,GAAU,4BA4Bd,CAGA,SAASA,GAAUztB,GACjB8sB,GAAa3jB,YAAcnJ,EACd6sB,GAAAvS,UAAUC,IAAI,SAC3BsS,GAAazQ,OACf,CCvDA,SAASwR,KACDjY,QAAQ1M,SAASC,eAAe,cAClByM,EAAMhL,cAAc,UAE5BtF,iBAAiB,QAAS6e,IAEtCvO,EAAMtQ,iBAAiB,SAAUR,IAC3BA,EAAM+K,SAAW+F,GACFuO,IACvB,IAIQ,MAAA5H,EAAmBrT,SAASC,eAAe,oBAC7CoT,IAEGA,EAAiBE,SACHF,EAAAjX,iBAAiB,QAAS6O,GAE7CoI,EAAiBhH,MAAQ,6CAGrB,MAAAuY,EAAkB5kB,SAASC,eAAe,mBAChD,GAAI2kB,EAAiB,CAEnBA,EAAgBC,YAAYD,EAAgB7X,WAAU,IAGhD,MAAA+X,EAAqB9kB,SAASC,eAAe,mBAGhC6kB,EAAA1oB,iBAAiB,SAAS,KAEvC4F,QAAQ,wHAIV9E,YAAW,KAEL,GAAwB,IAAxBN,aAAa9F,OACfkF,QAAQC,IAAI,6CACP,CACLD,QAAQG,KAAK,mEAET,IACFS,aAAa6N,QACbC,eAAeD,QAGChN,IACAC,IACFC,IAEdI,GAAU,0BAA2B,OACtC,OAAQ7B,GACCF,QAAAzB,MAAM,4BAA6B2B,EACzD,CACA,CAG4BgC,kBAAA,GACjB,KACX,IAEI4mB,EAAmBzY,MAAQ,uBAC/B,CAGQ,MAAA+F,EAAepS,SAASC,eAAe,gBACvCoS,EAAWrS,SAASC,eAAe,YAErCmS,GAAgBC,IAEbD,EAAamB,SACHnB,EAAAhW,iBAAiB,SAAS,KACrCiW,EAASzG,OAAO,IAKfyG,EAAS0S,UACH1S,EAAAjW,iBAAiB,SAAUqK,IA4C1C,WACQ,MAAAgN,EAAczT,SAASC,eAAe,eACtCyT,EAAgB1T,SAASC,eAAe,iBACxC0T,EAAe3T,SAASC,eAAe,gBAEzCwT,GAAeC,GAAiBC,IAE7BD,EAAcH,SACHG,EAAAtX,iBAAiB,SAAS,KAClC,IACF,MAAMkS,EAAoBtO,SAASC,eAAe,oBAAoBsN,QAChErD,EAAalK,SAASC,eAAe,aAAasN,QAGxCiB,EAAAF,EAAmBpE,EAFblK,SAASC,eAAe,gBAAgBsN,SAG9DkG,EAAY9N,MAAMgG,QAAU,MAC7B,OAAQpR,GACCyB,QAAAzB,MAAM,0BAA2BA,GAC/BwD,GAAAxD,EAAMxD,QAAS,QACnC,KAKS4c,EAAaJ,SACHI,EAAAvX,iBAAiB,SAAS,KACrCqX,EAAY9N,MAAMgG,QAAU,UAIpC,CArE4BqZ,GAGnBpvB,OAAAwG,iBAAiB,WAAYR,IAChB,eAAdA,EAAMS,KAAsC,eAAdT,EAAMS,MACtBoB,IACAC,IACtB,IAIE9H,OAAOkM,aAAemjB,GACtBrvB,OAAOqM,eAAiBA,EACxBrM,OAAO2M,eAAiBA,EACxB3M,OAAOiM,eAAiBA,GACxBjM,OAAOsvB,mBAAqBA,GAG5BtvB,OAAOmM,wBAA0BA,GACjCnM,OAAO0M,mBAAqBA,GAGrB1M,OAAAuvB,iBAAoBC,IACrB,IACI,MAAArtB,EA1KZ,SAA4BqtB,EAAO,GAEjC,MAAMC,EAAe,CAAC/gB,EAAKlH,IAAQ7D,KAAKC,MAAMD,KAAKuB,UAAYsC,EAAMkH,EAAM,IAAMA,EAG3EghB,EAAcC,IACZ,MAAAruB,MAAWiC,KAEjB,OADAjC,EAAKsuB,QAAQtuB,EAAKoS,UAAYic,GACvBruB,EAAK0S,cAAclC,MAAM,KAAK,EAAC,EAIxC5O,EAAWhC,OAAS,EACpB6C,EAAW7C,OAAS,EAGpB,QAASsR,EAAI,EAAGA,EAAIgd,EAAMhd,IAAK,CACvB,MAAAlR,EAAOouB,EAAWld,GAClBqd,EAAgBJ,EAAa,EAAG,GAGtC,QAASK,EAAI,EAAGA,EAAID,EAAeC,IAAK,CAChC,MAAA1uB,EAAMC,WAAWouB,EAAa,EAAG,IAAI5hB,QAAQ,IAC7CnN,EAAW,CACfC,GAAI,GAAG4C,KAAKyB,SAASwN,KAAKsd,IAC1BxuB,OACAR,YAAa,GAAG2uB,EAAa,IAAM,QACnCruB,MACAI,MAAO,KACPC,OAAQL,EAAM,EAAI,YAAc,WAElC8B,EAAWL,KAAKnC,EACtB,CAGQ,GAAAiD,KAAKuB,SAAW,GAAK,CACvB,MAAMxD,EAAW,CACff,GAAI,OAAO4C,KAAKyB,SAASwN,IACzBlR,OACAK,OAAQN,WAAWouB,EAAa,GAAI,IAAI5hB,QAAQ,IAChDrM,MAAO,MAETuC,EAAWlB,KAAKnB,EACtB,CACA,CASS,OANS4H,IACAC,IACFxB,IAEJI,GAAA,iCAAiCqnB,UAAc,WAElD,CACLO,gBAAiB7sB,EAAWhC,OAC5B8uB,gBAAiBjsB,EAAW7C,OAEhC,CAiHqB+uB,CAAmBT,GAE3B,OADCppB,QAAAC,IAAI,iBAAkBlE,GACvBA,CACR,OAAQwC,GACCyB,QAAAzB,MAAM,uBAAwBA,GACtCwD,GAAU,+BAAgC,QAChD,GAIkBN,IACCI,GACnB,CAoCA,SAASioB,KACD,MAAAC,EAAO/lB,SAASuF,iBAAiB,eACjCygB,EAAWhmB,SAASuF,iBAAiB,gBAE3CwgB,EAAK5tB,SAAe8b,IACdA,EAAA7X,iBAAiB,SAAS,KAE5B2pB,EAAK5tB,SAAa8tB,KAAE5U,UAAUI,OAAO,YACrCuU,EAAS7tB,SAAayf,KAAEvG,UAAUI,OAAO,YAGrCwC,EAAA5C,UAAUC,IAAI,UACZ,MAAA4U,EAAYjS,EAAIkS,aAAa,YACnCnmB,SAASC,eAAeimB,GAAW7U,UAAUC,IAAI,UAG/B,cAAd4U,IACwB,IAAtBptB,EAAWhC,QACbiH,GAAU,0CAA2C,QAEtCF,IACzB,GACK,GAEL,CAGA,SAASod,KACDvO,QAAQ1M,SAASC,eAAe,cACtCyM,EAAM2E,UAAUI,OAAO,QAEvBvU,YAAW,KACTwP,EAAM/G,MAAMgG,QAAU,SACrB,IACL,CAGA,SAASya,KACL,MACMC,EAAmBrmB,SAAS0B,cAAc,sBAG1C4kB,EAAeljB,QAAQiC,IACzBwc,MAAMC,KAAK9hB,SAASuF,iBAAiB,2BAChC/G,KAAkB+nB,GACXA,EAAWC,OAAepjB,QAAQC,UAC/B,IAAID,SAASC,IACLkjB,EAAAnqB,iBAAiB,OAAQiH,GACzBkjB,EAAAnqB,iBAAiB,QAASiH,EAAO,OAMtD8a,EAAU,IAAI/a,YAAmBlG,WAAWmG,EAhB5B,OAmBtBD,QAAQgd,KAAK,CAACkG,EAAcnI,IACvB7Y,MAAK,KAEFpI,YAAW,KACHmpB,IACAA,EAAiB1gB,MAAMgG,QAAU,QAE5B3L,SAAAsH,KAAK+J,UAAUC,IAAI,QAAO,GACpC,IAAG,IAEThF,OAAM,KAEC+Z,IACAA,EAAiB1gB,MAAMgG,QAAU,QAE5B3L,SAAAsH,KAAK+J,UAAUC,IAAI,QAAO,GAE/C,CAG4B,YAAxBtR,SAAS8T,WACA9T,SAAA5D,iBAAiB,mBAAoBgqB,IAE9BA,KAIpBpmB,SAAS5D,iBAAiB,UAAU,KACvB4D,SAAAsH,KAAK+J,UAAUC,IAAI,gBAC5BE,aAAa5b,OAAO2b,aACb3b,OAAA2b,YAAcrU,YAAW,KACnB8C,SAAAsH,KAAK+J,UAAUI,OAAO,eAAc,GAC9C,IAAG,GACP,CAAEC,SAAS,IAGV9b,OAAO6wB,WAAW,oCAAoCC,SAC7C1mB,SAAAsH,KAAK+J,UAAUC,IAAI,iBAIhC,MAAMqV,GAAe,KACjB3mB,SAASoR,gBAAgBzL,MAAMkM,YAAY,eAAgB,GAAGjc,OAAOkc,gBAAe,EAMxF,SAAS8U,KACP5qB,QAAQgH,KAAK,8BAGC2jB,KACP/wB,OAAAwG,iBAAiB,UAAU,KAClBuqB,IAAA,IA+KlB,WACM,IAEE,GAAAjc,eAAenM,QAAQ,qBACzB,OAIF,IAAIsoB,GAAqB,EAGrB,IACI,MAAAC,EAAgBlqB,aAAa2B,QAAQ,cACvCuoB,GACFpqB,KAAKC,MAAMmqB,GAGP,MAAAC,EAAgBnqB,aAAa2B,QAAQ,cACvCwoB,GACFrqB,KAAKC,MAAMoqB,EAEd,OAAQ7qB,GACCF,QAAAzB,MAAM,qCAAsC2B,GAC/B2qB,GAAA,CAC3B,CAGQA,IACF7qB,QAAQG,KAAK,oEAGbS,aAAa6N,QACbC,eAAeD,QAGChN,IACAC,IACFC,IAEdI,GAAU,wDAAyD,YAItD2M,eAAA7N,QAAQ,oBAAqB,OAE7C,OAAQtC,GACCyB,QAAAzB,MAAM,2CAA4CA,GAGtD,IACFqC,aAAa6N,QACbC,eAAeD,OAChB,OAAQvO,GACCF,QAAAzB,MAAM,qCAAsC2B,EAC1D,CACA,CACA,CAnOsB8qB,GAsEtB,WAEE,IAAKtc,eAAenM,QAAQ,qBAAsB,CAE1C,MAAAykB,EAAa9B,IAAc,GAG7B,IAAC8B,EAAWjrB,OAAOC,QAAS,CACxB,MAAAoqB,EAAcY,EAAWjrB,OAAOe,WAAWqB,aAAarD,OAC1CksB,EAAWjrB,OAAO4B,WAAWQ,aAAarD,OAE9D,GAAIsrB,EAAc,EAAG,CAEb,MAAAC,EAAeC,GAAWU,EAAWjrB,QAEvCsqB,EAAaE,SACfvmB,QAAQC,IAAI,6BAA6BomB,EAAaG,SAASJ,+BAG3DC,EAAaG,MAAQJ,GACvBllB,YAAW,KACTa,GAAU,oCAAoCqkB,EAAcC,EAAaG,SAASJ,kGAA6G,UAAS,GACvM,OAILpmB,QAAQG,KAAK,wEAEvB,CACA,CAGmBuO,eAAA7N,QAAQ,oBAAqB,OAChD,CACA,CArG+BoqB,GAGbxpB,IACAC,IACFC,IAGElC,IAGhB,MAAMyrB,EAAazrB,IACXO,QAAAC,IAAI,yCAA0CirB,EAAWnrB,WfiJ3CsC,Ie3ItBvF,EAAWX,SAAoB7B,IACxBA,EAASe,SACZf,EAASe,OAASJ,WAAWX,EAASU,KAAO,EAAI,YAAc,UACrE,IAEkBkI,IAGAshB,KACFO,KACE4D,KACLmB,KDrYHqB,GAAAnnB,SAASC,eAAe,sBACf0jB,GAAA3jB,SAASC,eAAe,wBAC1B2jB,GAAA5jB,SAASC,eAAe,sBACxB4jB,GAAA7jB,SAASC,eAAe,sBACxB6jB,GAAA9jB,SAASC,eAAe,gBACvB8jB,GAAA/jB,SAASC,eAAe,iBAEnCyM,IAAUiX,IAAmBC,IAAiBC,IAAiBC,IAAiBC,IAMxED,GAAA1nB,iBAAiB,QAASgoB,IACzBL,GAAA3nB,iBAAiB,QAASkoB,IAC3BV,GAAAxnB,iBAAiB,QAASioB,IAGjC8C,GAAA/qB,iBAAiB,SAAUF,IAC3BA,EAAEyK,SAAW+F,IACH0X,IAClB,IAIWpkB,SAAA5D,iBAAiB,WAAYF,IACtB,WAAVA,EAAEG,KAAoBwf,GAAMyH,QAClBc,IAClB,IAIeR,GAAAxnB,iBAAiB,WAAYF,IAC1B,UAAVA,EAAEG,KAAmBwf,GAAMyH,QACRgB,IAC3B,KA3BItoB,QAAQzB,MAAM,qDCmYe2Z,KAG/Bte,OAAOiM,eAAiBA,GACxBjM,OAAOqM,eAAiBA,EACxBrM,OAAO2M,eAAiBA,EACxB3M,OAAOkM,aAAemjB,GACtBrvB,OAAO4nB,iBAAmBA,GAC1B5nB,OAAO6nB,iBAAmBA,GAC1B7nB,OAAO6Q,UAAYA,EACnB7Q,OAAO4M,cAAgBA,EACvB5M,OAAOuI,cAAgBA,EACvBvI,OAAOsrB,cAAgBA,GAGjBkG,QAAcpnB,SAAS0B,cAAc,UACvC0lB,GACFA,EAAYhrB,iBAAiB,SAAS,KAC9BsQ,QAAQ1M,SAASC,eAAe,cAClCyM,IAAOA,EAAM/G,MAAMgG,QAAU,WAkDvC,WACQ,MAAA0b,EAASrnB,SAAS0B,cAAc,WAEtC,GAAI2lB,EAAQ,CACJ,MAAAC,EAAgBtnB,SAASgB,cAAc,OAC7CsmB,EAAchnB,UAAY,iBAC1BgnB,EAAc9mB,UAAY,yHAK1B6mB,EAAOlmB,YAAYmmB,GAGDC,KAClBtqB,YAAYsqB,GAAkB,KAGhBD,EAAAlrB,iBAAiB,SAAS,KACxBkrB,EAAAjW,UAAUC,IAAI,WACb9O,IACfzE,GAAU,yBAA0B,QAEpCb,YAAW,KACKoqB,EAAAjW,UAAUI,OAAO,WACb8V,IAAA,GACjB,IAAI,GAEb,CACA,CA1EsBC,GAEpBxrB,QAAQkH,QAAQ,6BAClB,CA0EA,SAASqkB,KACP,MAAMlwB,EAAS8G,IACTspB,EAAYznB,SAAS0B,cAAc,gBACnC8F,EAAOxH,SAAS0B,cAAc,cAEpC,GAAI+lB,GAAajgB,EAAM,CACrB,MAAMkgB,EAAWrwB,EAAO+D,UAClBusB,EAAWtwB,EAAOiE,aAAe,IAAInC,KAAK9B,EAAOiE,cAAgB,KACjEV,MAAUzB,KAIhB,GAFUsuB,EAAAnnB,UAAY,gBAAkBonB,EAAW,SAAW,WAE1DC,EAAU,CACZ,MAAMC,EAAWruB,KAAKC,OAAOoB,EAAM+sB,GAAY,KAC/C,IAAIE,EAAW,GAGbA,EADED,EAAW,GACF,GAAGA,WACLA,EAAW,KACT,GAAGruB,KAAKC,MAAMouB,EAAW,aAEzB,GAAGruB,KAAKC,MAAMouB,EAAW,eAGjCpgB,EAAAtH,YAAc,yBAAyB2nB,GAClD,MACWrgB,EAAAtH,YAAcwnB,EAAW,gBAAkB,kCAEtD,CACA,CAtLA9xB,OAAOwG,iBAAiB,SAAUuqB,IAClCA,KCpWA/wB,OAAOkyB,YAAc,EACrB,IAAIA,GAAclyB,OAAOkyB,YACrBC,GAAuB,EACvBC,GAAoB,EACpBpP,IAAa,EACbM,GAAS,EACTC,GAAS,EACT8O,GAAa,EACbC,GAAa,EAGjB,MAAMxb,GAAQ1M,SAASC,eAAe,cACjByM,GAAMhL,cAAc,kBACzC,MAAM2Y,GAAara,SAASC,eAAe,cACrC+a,GAAYhb,SAAS0B,cAAc,eACnCymB,GAASnoB,SAASC,eAAe,UACjCmoB,GAAUpoB,SAASC,eAAe,WAGxC,SAASoY,GAAWgQ,GAEhBP,GAAcvuB,KAAK6D,IA1BN,EA0BoB7D,KAAK+K,IAzBzB,EAyBuC+jB,IACpDzyB,OAAOkyB,YAAcA,GAGVzN,GAAA1U,MAAME,UAAY,SAASiiB,MAGtC9M,GAAU9a,YAAc,GAAG3G,KAAKoJ,MAAoB,IAAdmlB,OAGtCK,GAAOjV,SAAW4U,IAnCL,EAoCbM,GAAQlV,SAAW4U,IArCN,CAsCjB,CAGA,SAASQ,GAAYC,EAAQC,GACnB,MAAAxO,EAAKuO,EAAO7O,QAAU8O,EAAO9O,QAC7BO,EAAKsO,EAAO5O,QAAU6O,EAAO7O,QACnC,OAAOpgB,KAAK2gB,KAAKF,EAAKA,EAAKC,EAAKA,EACpC,CAgEA,SAASwO,KACSX,GAAA,EACDG,GAAA,EACAC,GAAA,EACb7N,GAAW1U,MAAME,UAAY,WAC7BmV,GAAU9a,YAAc,OACxBwM,GAAM/G,MAAMgG,QAAU,OAChBe,GAAA2E,UAAUI,OAAO,OAC3B,CArEA4I,GAAWje,iBAAiB,SAAUF,IAClCA,EAAEkX,iBAGF,MAAMyH,EAAQ3e,EAAE6e,OAAS,GAAiB,GAlD5B,GAsDd1C,GADgByP,GAAcjN,EACZ,IAItBR,GAAWje,iBAAiB,cAAeF,IACd,IAArBA,EAAEud,QAAQ3iB,QAEaixB,GAAAO,GAAYpsB,EAAEud,QAAQ,GAAIvd,EAAEud,QAAQ,IACvCuO,GAAAD,IACQ,IAArB7rB,EAAEud,QAAQ3iB,QAAgBgxB,GAAc,IAElClP,IAAA,EACbM,GAAShd,EAAEud,QAAQ,GAAGC,QAAUuO,GAChC9O,GAASjd,EAAEud,QAAQ,GAAGE,QAAUuO,GACxC,IAGA7N,GAAWje,iBAAiB,aAAcF,IAGlC,GAFJA,EAAEkX,iBAEuB,IAArBlX,EAAEud,QAAQ3iB,OAAc,CAElB,MAAA4xB,EAAkBJ,GAAYpsB,EAAEud,QAAQ,GAAIvd,EAAEud,QAAQ,IAI5DpB,GAFgByP,IAAeY,EAAkBV,KAG7BA,GAAAU,CACvB,MAA+B,IAArBxsB,EAAEud,QAAQ3iB,QAAgB8hB,KAEjCqP,GAAa/rB,EAAEud,QAAQ,GAAGC,QAAUR,GACpCgP,GAAahsB,EAAEud,QAAQ,GAAGE,QAAUR,GAEzBkB,GAAA1U,MAAME,UAAY,SAASiiB,iBAA0BG,GAAaH,SAAkBI,GAAaJ,QACpH,IAGAzN,GAAWje,iBAAiB,YAAY,KACvBwc,IAAA,EACUmP,GAAA,EACHC,GAAA,KAIxBG,GAAO/rB,iBAAiB,SAAS,KAC7Bic,GAAWyP,GAnGG,GAmGoB,IAGtCM,GAAQhsB,iBAAiB,SAAS,KAC9Bic,GAAWyP,GAvGG,GAuGoB,IAetC,MAAMV,GAAc1a,GAAMhL,cAAc,UCxEjC+M,eAAeka,GAAqBC,GACrC,IAACA,EAAoB,YAErB,IAEI,MAAAhe,EAAM,IAAIgK,MAGViU,EAAc,IAAIzlB,SAAQ,CAACC,EAAS+L,KACpCxE,EAAAvD,OAAS,IAAMhE,IACnBuH,EAAIhC,QAAU,IAAMwG,EAAO,IAAIvX,MAAM,4CAA2C,IAIlF+S,EAAIC,IAAM+d,QAGJC,EAGA,MAAAnY,EAAS1Q,SAASgB,cAAc,UAGtC,IAAIiW,EAAc1d,KAAK+K,IAAI,IAAKsG,EAAIgG,OAChCkY,EAAevvB,KAAKoJ,MAAMiI,EAAIiG,QAAUoG,EAAcrM,EAAIgG,QAE9DF,EAAOE,MAAQqG,EACfvG,EAAOG,OAASiY,EAGJpY,EAAOmE,WAAW,MAC1BC,UAAUlK,EAAK,EAAG,EAAGqM,EAAa6R,GAGtC,MAAMC,EAAmBrY,EAAOsY,UAAU,aAAc,IAOjD,OAJPtY,EAAOE,MAAQ,EACfF,EAAOG,OAAS,EAChBjG,EAAIC,IAAM,GAEHke,CACR,OAAQxuB,GAGA,OAFCyB,QAAAzB,MAAM,0CAA2CA,GAElDquB,CACX,CACA,CD0BIxB,IACYA,GAAAhrB,iBAAiB,QAASqsB,IAI1C/b,GAAMtQ,iBAAiB,SAAS,SAASR,GACjCA,EAAM+K,SAAW+F,IACE+b,IAE3B,IAGAzoB,SAAS5D,iBAAiB,WAAW,SAASR,GACxB,WAAdA,EAAMS,KAA4C,UAAxBqQ,GAAM/G,MAAMgG,SACnB8c,IAE3B,IEtEA,MAAQQ,iCAAkCC,IAAkB,CAAED,iCDoGvD,WACD,IAACvjB,IAAyB,SAG1B,IA9JC,WAEL,GAAI9P,OAAOuzB,aAAevzB,OAAOuzB,YAAYC,OAAQ,CAC7C,MAAAA,EAASxzB,OAAOuzB,YAAYC,OAElC,GAAIA,EAAOC,gBAAkBD,EAAOE,eAAiB,UAC5C,QAEb,CAGM,IACF,IAAIC,EAAY,EAChB,QAASltB,KAAOO,aACVA,aAAa4sB,eAAentB,KAC9BktB,GAAyC,EAA3B3sB,aAAaP,GAAKvF,OAAc,KAAO,MAKzD,GAAIyyB,EAAY,IACP,QAEV,OAAQrtB,GACCF,QAAAG,KAAK,qCAAsCD,EACvD,CAES,QACT,CAkIOutB,GAAmB,CACtB1rB,GAAU,8CAA+C,WAelD,OAZQiC,SAASuF,iBAAiB,qBAClCpN,SAAeyS,IAChBA,EAAIC,IAAI1U,WAAW,UACjB2U,IAAAC,gBAAgBH,EAAIC,IAChC,IAII3N,YAAW,MAlFR,WACD,GAACwI,IAED,IAEF,MAAM5M,EAAa4D,KAAKC,MAAMC,aAAa2B,QAAQ,eAAiB,MAChE,IAACzF,EAAWhC,OAAQ,OAExBiH,GAAU,gDAAiD,QAG3D,MAAM2rB,EAAY,EAClB,IAAIC,EAAY,EAEhB,MAAMC,EAAenb,UACnB,MAAMob,EAAQ/wB,EAAWqL,MAAMwlB,EAAWA,EAAYD,GACnD9vB,QAAOtD,GAAYA,EAASc,OAASd,EAASc,MAAMN,OAAS,MAEhE,UAAWR,KAAYuzB,EACjB,IAEF,GAAIvzB,EAASc,OAASd,EAASc,MAAMN,OAAS,IAAO,CAE7C,MAAA8xB,EAAc,0BAA0BtyB,EAASc,QAGjD0yB,QAAkBnB,GAAqBC,GAGzCkB,IAEFxzB,EAASc,MAAQ0yB,EAAUxf,QAAQ,2BAA4B,IAE7E,CACS,OAAQ/P,GACPyB,QAAQzB,MAAM,uCAAwCjE,EAASC,GAAIgE,EAC7E,CAGMovB,GAAaE,EAAM/yB,OAGnB8F,aAAaC,QAAQ,aAAcH,KAAKI,UAAUhE,IAG9C6wB,EAAY7wB,EAAWhC,OACzBoG,WAAW0sB,EAAc,KAEzB7rB,GAAU,mCAAoC,UACtD,EAMW,OAFO6rB,KAEP,CACR,OAAQrvB,GAEA,OADCyB,QAAAzB,MAAM,wCAAyCA,IAChD,CACX,CACA,CAuB8BwvB,EAAA,GACvB,MAEI,CACX,CAES,QACT,SE1LO,SAASC,KAEV,oBAAeC,IAKfr0B,OAAOE,SAASC,SAASC,SAAS,gCAJ7B,+BASF,GACT,CAGO,SAASk0B,GAAYh0B,GAC1B,MAAMi0B,EAAWH,KAGjB,GAAI9zB,IACFA,EAAKC,WAAW,YAChBD,EAAKC,WAAW,aAChBD,EAAKC,WAAW,OAChBD,EAAKC,WAAW,UAET,OAAAD,EAOF,SAAGi0B,IAHaj0B,EAAKC,WAAW,KAAOD,EAAKE,UAAU,GAAKF,GAIpE,CAGO,SAASk0B,GAAennB,GAC7B,IAAKA,EAAS,OAGd,GAAIA,EAAQ0C,OAAS1C,EAAQ0C,MAAM0kB,gBAAiB,CAClD,MAAMC,EAAWrnB,EAAQ0C,MAAM0kB,gBAAgBE,MAAM,8BACjD,GAAAD,GAAYA,EAAS,GAAI,CAC3B,MAAME,EAASN,GAAYI,EAAS,IAC5BrnB,EAAA0C,MAAM0kB,gBAAkB,QAAQG,KAAM,CAChD,CAeE,GAXkB,CAAC,MAAO,OAAQ,WAAY,UACpCryB,SAAgBsyB,IACxB,GAAAxnB,EAAQynB,aAAaD,GAAO,CACxB,MAAAnyB,EAAQ2K,EAAQkjB,aAAasE,IAC/BnyB,GAAUA,EAAMnC,WAAW,MAASmC,EAAMnC,WAAW,gBACvD8M,EAAQqP,aAAamY,EAAMP,GAAY5xB,GACzC,KAKA2K,EAAQynB,aAAa,UAAW,CAC5B,MACAC,EADS1nB,EAAQkjB,aAAa,UACXze,MAAM,KAAKlJ,KAAWqM,IACvC,MAACqF,EAAK0a,GAAc/f,EAAIhU,OAAO6Q,MAAM,OACpC,SAAGwiB,GAAYha,MAAQ0a,GAAc,KAAK/zB,MAAK,IACrD0N,KAAK,MACAtB,EAAAqP,aAAa,SAAUqY,EAAS,CAE5C,CAGO,SAASE,KAEdj1B,OAAOC,gBAAkBm0B,KAGhBhqB,SAAA5D,iBAAiB,oBAAoB,KAE5C4D,SAASuF,iBAAiB,OAAOpN,QAAQiyB,IAGzCpqB,SAASuF,iBAAiB,KAAKpN,QAAQiyB,IAGvCpqB,SAASuF,iBAAiB,gBAAgBpN,SAAc2yB,IACtDV,GAAeU,GACfA,EAAGvlB,iBAAiB,UAAUpN,QAAQiyB,GAAc,IAG9CpuB,QAAAC,IAAI,yBAA0BrG,OAAOC,gBAAe,GAEhE,CAGAg1B,KCnFAA,KAGA7qB,SAAS5D,iBAAiB,oBAAoBqS,UACxC,IAGI,MAAAhJ,EAAYzF,SAAS0B,cAAc,cAGjB+O,IAGEM,WAGpB3N,QAAQiC,IAAI,CAChB5H,IACAC,MAIYC,IAGYsT,KAGPuP,KACLO,KACE4D,KAGLmB,KAGIc,KJuFZ,WACC,IAEI,KAACla,IAAU2N,IAAeW,IAAcmN,IAAWC,IAEnD,YADApsB,QAAQzB,MAAM,gDAKlB8d,GAAW,GAGXziB,OAAOm1B,eAAiBtC,GAExBzsB,QAAQC,IAAI,0CACf,OAAQ1B,GACGyB,QAAAzB,MAAM,wCAAyCA,EAC/D,CACA,CItGyBywB,GAGf,MAAAC,EAAYjrB,SAASC,eAAe,gBACtCgrB,GAAWA,EAAU7uB,iBAAiB,QAASqQ,GAG5C7W,OAAAwG,iBAAiB,gBAAgB,KACdqU,GAAA,IAIpB,MAAAya,EAAalrB,SAASuF,iBAAiB,eACzC2lB,EAAWp0B,QACbo0B,EAAW/yB,SAAkB4b,IACpBA,EAAA3X,iBAAiB,SAAS,KACpBc,YAAA,IAAMuT,KAA0B,IAAG,GAC/C,IAKLvT,YAAW,KACyBgsB,IAAA,GACjC,KAGCzjB,IACQA,EAAA4L,UAAUC,IAAI,UAGAb,KAG1BzU,QAAQC,IAAI,qCAEb,OAAQ1B,GACCyB,QAAAzB,MAAM,iCAAkCA,GAG1C,MAAAkL,EAAYzF,SAAS0B,cAAc,cAErC+D,GACQA,EAAA4L,UAAUC,IAAI,SAE9B,KClGQtR,SAAS5D,iBAAiB,oBAAoB,KAC3BwqB,KAGT,MAAAuE,EAAmBnrB,SAASC,eAAe,oBAC7CkrB,GACiBA,EAAA/uB,iBAAiB,QAAS2mB,GAC3D","names":["window","__APP_BASE_PATH","location","pathname","includes","getResourcePath","path","startsWith","substring","SCHEMAS","delivery","id","type","required","orderNumber","validate","val","trim","length","message","fee","parseFloat","date","test","image","status","gasEntry","amount","validateData","data","schemaType","options","schema","Error","errors","result","isValid","Object","entries","forEach","field","rules","value","valueType","isNaN","push","checkBusinessRules","businessErrors","normalizedDate","normalizeDate","deliveries","some","excludeId","preventPastDates","deliveryDate","Date","today","setHours","daysDiff","Math","floor","maxPastDays","isSuspicious","gasEntries","filter","entry","allowMultipleGasEntries","validateBusinessRules","validateDataset","items","validItems","invalidItems","item","index","validation","error","validateDatabaseIntegrity","deliveryResult","gasResult","timestamp","now","SESSION_ID","random","toString","substr","broadcastChannel","lastUpdateTimestamp","syncState","isPrimary","connectedTabs","lastSyncTime","pendingChanges","syncInProgress","initializeSync","BroadcastChannel","onmessage","event","handleSyncMessage","postMessage","sessionId","console","log","e","warn","addEventListener","key","newValue","oldValue","syncData","handleStorageEvent","JSON","parse","localStorage","setItem","stringify","checkPrimaryStatus","sendSyncMessage","setInterval","setTimeout","removeItem","max","close","handleFullDataClear","forceFull","pop","loadDeliveries","loadGasEntries","updateTotals","clearDataCache$1","renderAnalytics","toLocaleTimeString","showToast","notifyDataChange","changeType","forceSyncAllTabs","getSyncStatus","lastIntegrityCheck","loadFromLocalStorage","savedDeliveries","getItem","map","String","savedGasEntries","sortDeliveries$1","findIndex","d","g","validateDataIntegrity","updateDeliveriesTable","updateGasTable","saveDeliveries","saveGasEntries","sortDeliveries","sort","a","b","dateComparison","localeCompare","numeric","sensitivity","totalFees","reduce","sum","totalGas","document","getElementById","textContent","formatCurrency","netProfit","netProfitElement","className","tbody","innerHTML","entriesByDate","getCurrentDate","sortedDates","keys","entriesForDate","totalFeesForDate","dateHeader","createElement","formatDate","getWeekdayName","appendChild","tr","statusText","statusClass","safeOrderNumber","createTextNode","imageButton","querySelector","editButton","deleteButton","showImageModal","editDelivery","confirmDeliveryDeletion","confirm","deleteDelivery","emptyRow","formattedDate","safeId","amountFormatted","confirmGasDeletion","deleteGasEntry","forceSyncData","normalizeMoneyValue","num","round","dataCache","dailyData","lastUpdate","clearDataCache","time","element","timeEnd","promises","Promise","resolve","profitMargin","pendingOrders","completedOrders","toFixed","totalAmount","feesPercentage","gasPercentage","groupDataByDay","ratios","ratio","deliveryCount","gasExpenses","avgPerDelivery","slice","efficiency","efficiencyClass","min","join","profit","income","expenses","pendingCount","completedCount","metrics","values","avgDeliveriesPerDay","avgFeePerDelivery","avgGasPerDay","bestDay","profitDiff","worstDay","all","then","querySelectorAll","chart","container","isMobileDevice","style","willChange","transform","label","zIndex","overflowX","webkitOverflowScrolling","pieLabel","flexDirection","alignItems","marginTop","makeChartResponsive","cacheAge","validateImportedData","importCSV","resetInput","target","file","files","name","toLowerCase","endsWith","isCSVFile","loadingToast","reader","FileReader","onload","body","removeChild","text","firstLine","split","separator","lines","l","expectedHeaders","headers","h","missingHeaders","importedDeliveries","importedGasData","i","currentValue","insideQuotes","char","header","_a","parseCSVDate","validationErrors","onerror","readAsText","generateOrderID","firstOrderValue","lastOrderValue","hash","str","charCodeAt","abs","generateHash","getDate","padStart","getMonth","getFullYear","generateDeliveryIdentifiers","dateStr","toISOString","todaysDeliveries","fileName","generateFileName","validateExportData","generateCSV","includeGas","allErrors","rows","row","replace","clearAllData","performCompleteDataCleanup","clear","sessionStorage","syncChannel","img","src","URL","revokeObjectURL","forceSyncAllTabs$1","finishWeek","triggerDirectDownload","shouldClearData","csvUrl","createObjectURL","csvBlob","link","href","download","downloadFilename","display","click","clearDataAfterExport","csvContent","Blob","innerWidth","navigator","userAgent","share","File","title","catch","err","generateCSVNoImages","showExportModal","modal","deliveriesGroup","gasGroup","imagesGroup","newDeliveriesGroup","cloneNode","newGasGroup","newImagesGroup","parentNode","replaceChild","newDeliveriesCheckbox","newGasCheckbox","newImagesCheckbox","checked","group","cursor","padding","margin","borderRadius","border","transition","backgroundColor","cancelBtn","confirmBtn","exportImagesBtn","newCancelBtn","newConfirmBtn","newExportImagesBtn","includeDeliveries","includeImages","exportCustomCSV","async","showImagesExportModal","stopPropagation","filteredDeliveries","filteredGasEntries","suffix","optimizeStoredImages","exportOnlyImages","includeDeliveryImages","includeGasImages","JSZip","reject","script","integrity","crossOrigin","head","zip","imageCount","imageData","base64","zipFileName","zipBlob","generateAsync","downloadZipFile","blob","url","deliveryImagesGroup","gasImagesGroup","newDeliveryImagesGroup","newGasImagesGroup","newDeliveryImagesCheckbox","newGasImagesCheckbox","cleanupUnusedResources","canvas","contains","width","height","gc","applyMemoryOptimizations","input","setupMobileOptimizations","setupResizeHandlers","deviceMemory","documentElement","classList","add","scrollTimer","clearTimeout","remove","passive","optimizeScrollPerformance","appHeight","setProperty","innerHeight","fixMobileViewportHeight","setupMobileFileHandling","removeAttribute","accept","setupChartOptimizations","importButton","csvInput","setAttribute","newImportButton","newCsvInput","createFileSelectionModal","oldModal","fileModal","mobileFileInput","selectedFileName","confirmFileSelection","cancelFileSelection","fileInputWrapper","alert","disabled","focus","preventDefault","finishWeekButton","originalClickHandler","onclick","call","exportModal","confirmExport","cancelExport","resizeTimer","addGpuAcceleration","readyState","button","dataset","tab","initializeMobileOptimizations","analyticsContainer","setupScrollOptimizations","analyticsCard","closest","wasActive","card","compressImage","maxWidth","quality","Image","getContext","drawImage","toBlob","onloadend","readAsDataURL","processingOperations","Set","processImageForStorage","operationId","MAX_FILE_SIZE","size","mobile","compressedImage","has","base64Response","fetch","intermediateBlob","innerError","cleanupAfterProcessing","delete","modified","updatedDeliveries","newEntry","updatedGasEntries","modalImg","zoomInButton","zoomOutButton","resetZoomState","imageUrl","highQualityToggle","qualityControlsContainer","isHighQualityMode","originalSrc","highQualitySrc","toggleButton","ctx","targetWidth","scale","imageSmoothingEnabled","imageSmoothingQuality","getImageData","factor","tempData","Uint8ClampedArray","y","x","idx","c","currentPixel","sharpened","sharpen","putImageData","applySharpening","createHighQualityVersion","enhancedSrc","toggleHighQualityMode","updateZoom","currentScale","handleTouchStart","handleTouchMove","handleTouchEnd","handleMouseWheel","isZooming","isDragging","closeImageModal$1","escKeyHandler","removeEventListener","maxScale","minScale","startX","startY","initialDistance","initialScale","offsetX","offsetY","lastTapTime","touches","clientX","clientY","currentTime","getTime","tapLength","isDragging$1","dx","dy","sqrt","distance","newScale","modalImage","imgWidth","imgHeight","containerWidth","containerHeight","maxX","maxY","applyTransform","delta","sign","deltaY","zoomLevel","closeImageModal","toLocaleDateString","dateString","getDay","day","month","year","duration","toast","validateOrder","orderData","isOrderNumberTaken","state","currentEditId","isEditing","hasUnsavedChanges","isProcessingImage","scrollPosition","setUnsavedChanges","hasChanges","notice","toggle","startEditing","orderId","order","find","pageYOffset","top","statusCheckbox","hasFee","isPending","imagePreview","alt","editForm","newEditForm","newCancelButton","newUploadButton","newImageInput","formInputs","handleEditSubmit","handleCancelEdit","handleModalClick","debouncedImageChange","clearEditImage","imageError","setupEditListeners","unsavedChangesNotice","cancelEdit","func","wait","timeout","args","apply","this","debounce","imageInput","newInput","forcePending","_b","processedImage","feeValue","updateData","orderIndex","currentOrder","updatedOrder","validationError","updateOrder","scrollTo","reset","handleOrderFormSubmit","existingOrders","getOrdersByDate","duplicateOrder","newOrder","createdAt","createOrder","handleGasFormSubmit","debouncedImageUpload","previews","cleanupPreviousPreview","processTimeout","timeoutPromise","_","race","finally","previewContainer","clearOrderImage","setupOrderForm","orderForm","newOrderForm","newOrderNumber","newDate","number","currentDate","setupGasForm","gasForm","onsubmit","runDiagnostic","autoRepair","diagnosticReport","report","deliveryIssues","gasIssues","deliveryErrorMap","Map","set","count","get","Array","from","gasErrorMap","analyzeDiagnosticResults","toLocaleString","issue","groupEnd","totalIssues","repairResult","repairData","success","fixed","diagnosticResult","total","deliveryFixed","gasFixed","unrepaired","dateObj","showDiagnosticModal","diagnostic","__vitePreload","_export","__VITE_PRELOAD__","exportModule","backupData","isOpen","itemId","itemType","expectedValue","onConfirm","messageElement","inputElement","errorElement","cancelButton","confirmButton","deliveryId","placeholder","openModal","gasId","closeModal","clearError","handleConfirmDelete","inputValue","showError","inputNumber","expectedNumber","setupEditForms","clearDataButton","replaceWith","newClearDataButton","onchange","setupExportModalHandlers","startDeliveryEditing","cancelDeliveryEdit","generateTestData","days","randomNumber","randomDate","daysAgo","setDate","numDeliveries","j","totalDeliveries","totalGasEntries","generateRandomData","setupTabs","tabs","contents","t","contentId","getAttribute","handlePageLoad","loadingIndicator","stylesLoaded","stylesheet","loaded","matchMedia","matches","setAppHeight","initializeApp","dataIntegrityIssue","rawDeliveries","rawGasEntries","checkDataIntegrity","checkDataIntegrityOnStartup","syncStatus","modal$1","closeButton","footer","syncIndicator","updateSyncStatus","setupSyncIndicator","indicator","isActive","lastSync","timeDiff","timeText","currentZoom","initialPinchDistance","lastPinchDistance","translateX","translateY","zoomIn","zoomOut","zoom","getDistance","point1","point2","resetZoomAndClose","currentDistance","optimizeForLowMemory","base64Image","loadPromise","targetHeight","optimizedDataURL","toDataURL","detectAndRecoverFromMemoryIssues","recoverMemory","performance","memory","jsHeapSizeLimit","usedJSHeapSize","totalSize","hasOwnProperty","hasEnoughMemory","batchSize","processed","processBatch","batch","optimized","downsampleStoredImages","getBasePath","__vite_import_meta_env__","resolvePath","basePath","fixElementUrls","backgroundImage","urlMatch","match","newUrl","attr","hasAttribute","newSrcset","descriptor","initializeBasePath","el","resetImageZoom","initializeImageZoom","exportBtn","tabButtons","diagnosticButton"],"ignoreList":[],"sources":["../../index.html?html-proxy&index=1.js","../../scripts/dataValidator.js","../../scripts/sync.js","../../scripts/data.js","../../scripts/analytics.js","../../scripts/charts.js","../../scripts/import.js","../../scripts/idGenerator.js","../../scripts/export.js","../../scripts/mobile.js","../../scripts/imageUtils.js","../../scripts/utils.js","../../scripts/validation.js","../../scripts/orderManager.js","../../scripts/editHandler.js","../../scripts/formHandler.js","../../scripts/dataDiagnostic.js","../../scripts/deleteConfirmation.js","../../scripts/setup.js","../../scripts/imageZoom.js","../../scripts/imageOptimizer.js","../../scripts/mobileOptimizations.js","../../scripts/basePath.js","../../scripts/main.js","../../index.html?html-proxy&index=3.js"],"sourcesContent":["\n        // Define a global variable for the base path\n        window.__APP_BASE_PATH = '/';\n        \n        // Update if we're on GitHub Pages\n        if (window.location.pathname.includes('/entrega-financeira-semanal/')) {\n            window.__APP_BASE_PATH = '/entrega-financeira-semanal/';\n        }\n        \n        // Function to handle loading resources with the correct base path\n        window.getResourcePath = function(path) {\n            if (!path) return path;\n            if (path.startsWith('http') || path.startsWith('//') || path.startsWith('data:')) return path;\n            \n            const basePath = window.__APP_BASE_PATH;\n            // Remove leading slash if exists to avoid double slashes\n            const cleanPath = path.startsWith('/') ? path.substring(1) : path;\n            return basePath + cleanPath;\n        };\n    ","/**\n * dataValidator.js\n * Sistema avançado de validação de dados com esquemas, tipos e regras de negócio\n */\n\nimport { deliveries, gasEntries } from './data.js';\nimport { normalizeDate } from './utils.js';\n\n// Esquemas de validação para diferentes tipos de dados\nconst SCHEMAS = {\n  // Esquema para entregas\n  delivery: {\n    id: { type: 'string', required: false },\n    orderNumber: { \n      type: 'string', \n      required: true, \n      validate: (val) => val && val.trim().length > 0,\n      message: 'Número do pedido é obrigatório'\n    },\n    fee: { \n      type: 'number', \n      required: false,\n      validate: (val) => val === null || val === '' || val === undefined || parseFloat(val) >= 0,\n      message: 'Taxa não pode ser negativa'\n    },\n    date: { \n      type: 'string', \n      required: true,\n      validate: (val) => val && /^\\d{4}-\\d{2}-\\d{2}$/.test(val),\n      message: 'Data deve estar no formato YYYY-MM-DD'\n    },\n    image: { \n      type: 'any', \n      required: true,\n      message: 'O comprovante é obrigatório'\n    },\n    status: { \n      type: 'string', \n      required: false,\n      validate: (val) => !val || ['pending', 'completed'].includes(val),\n      message: 'Status deve ser \"pending\" ou \"completed\"'\n    }\n  },\n  \n  // Esquema para abastecimentos\n  gasEntry: {\n    id: { type: 'string', required: false },\n    date: { \n      type: 'string', \n      required: true,\n      validate: (val) => val && /^\\d{4}-\\d{2}-\\d{2}$/.test(val),\n      message: 'Data deve estar no formato YYYY-MM-DD'\n    },\n    amount: { \n      type: 'number', \n      required: true,\n      validate: (val) => val && parseFloat(val) > 0,\n      message: 'Valor deve ser maior que zero'\n    },\n    image: { \n      type: 'any', \n      required: false\n    }\n  }\n};\n\n/**\n * Valida um objeto com base em um esquema específico\n * @param {Object} data - Dados a serem validados\n * @param {string} schemaType - Tipo de esquema (delivery, gasEntry)\n * @param {Object} options - Opções de validação\n * @returns {Object} Resultado da validação { isValid, errors }\n */\nexport function validateData(data, schemaType, options = {}) {\n  const schema = SCHEMAS[schemaType];\n  \n  if (!schema) {\n    throw new Error(`Esquema de validação não encontrado: ${schemaType}`);\n  }\n  \n  const errors = [];\n  const result = { isValid: true, errors: [] };\n  \n  // Validação de cada campo conforme o esquema\n  Object.entries(schema).forEach(([field, rules]) => {\n    const value = data[field];\n    \n    // Verificar campo obrigatório\n    if (rules.required && (value === undefined || value === null || value === '')) {\n      errors.push({\n        field,\n        message: rules.message || `O campo ${field} é obrigatório`\n      });\n      return;\n    }\n    \n    // Pular validação se o campo não é obrigatório e está vazio\n    if (!rules.required && (value === undefined || value === null || value === '')) {\n      return;\n    }\n    \n    // Verificar tipo\n    if (rules.type !== 'any') {\n      const valueType = typeof value;\n      \n      if (rules.type === 'number') {\n        if (valueType !== 'number' && isNaN(parseFloat(value))) {\n          errors.push({\n            field,\n            message: rules.message || `O campo ${field} deve ser um número`\n          });\n          return;\n        }\n      } else if (valueType !== rules.type) {\n        errors.push({\n          field,\n          message: rules.message || `O campo ${field} deve ser do tipo ${rules.type}`\n        });\n        return;\n      }\n    }\n    \n    // Executar validação personalizada\n    if (rules.validate && typeof rules.validate === 'function') {\n      if (!rules.validate(value, data)) {\n        errors.push({\n          field,\n          message: rules.message || `O valor para ${field} é inválido`\n        });\n      }\n    }\n  });\n  \n  // Validações de regras de negócio\n  if (errors.length === 0 && options.checkBusinessRules !== false) {\n    const businessErrors = validateBusinessRules(data, schemaType, options);\n    errors.push(...businessErrors);\n  }\n  \n  // Verificar resultados\n  if (errors.length > 0) {\n    result.isValid = false;\n    result.errors = errors;\n  }\n  \n  return result;\n}\n\n/**\n * Validar regras de negócio específicas do domínio\n * @param {Object} data - Dados a validar\n * @param {string} schemaType - Tipo de esquema\n * @param {Object} options - Opções adicionais\n * @returns {Array} Lista de erros encontrados\n */\nfunction validateBusinessRules(data, schemaType, options = {}) {\n  const errors = [];\n  \n  if (schemaType === 'delivery') {\n    // Verificar duplicidade de número de pedido na mesma data\n    const normalizedDate = normalizeDate(data.date);\n    const isDuplicate = deliveries.some(delivery => \n      delivery.orderNumber === data.orderNumber && \n      normalizeDate(delivery.date) === normalizedDate &&\n      (!options.excludeId || delivery.id !== options.excludeId)\n    );\n    \n    if (isDuplicate) {\n      errors.push({\n        field: 'orderNumber',\n        message: `Já existe um pedido com o número ${data.orderNumber} na data ${data.date}`\n      });\n    }\n    \n    // Verificar data passada\n    if (options.preventPastDates) {\n      const deliveryDate = new Date(data.date);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      if (deliveryDate < today) {\n        const daysDiff = Math.floor((today - deliveryDate) / (1000 * 60 * 60 * 24));\n        \n        if (daysDiff > options.maxPastDays || 7) {\n          errors.push({\n            field: 'date',\n            message: `A data selecionada é muito antiga (${daysDiff} dias atrás)`\n          });\n        }\n      }\n    }\n  } else if (schemaType === 'gasEntry') {\n    // Verificar valor suspeito de abastecimento (muito alto)\n    const amount = parseFloat(data.amount);\n    if (amount > 500) {\n      errors.push({\n        field: 'amount',\n        message: 'Valor de abastecimento suspeito (muito alto)',\n        isSuspicious: true\n      });\n    }\n    \n    // Verificar abastecimentos múltiplos no mesmo dia\n    const normalizedDate = normalizeDate(data.date);\n    const sameDay = gasEntries.filter(entry => \n      normalizeDate(entry.date) === normalizedDate &&\n      (!options.excludeId || entry.id !== options.excludeId)\n    );\n    \n    if (sameDay.length > 0 && !options.allowMultipleGasEntries) {\n      errors.push({\n        field: 'date',\n        message: 'Já existe um abastecimento registrado nesta data',\n        isSuspicious: true\n      });\n    }\n  }\n  \n  return errors;\n}\n\n/**\n * Validar entrega\n * @param {Object} delivery - Dados da entrega\n * @param {Object} options - Opções de validação\n * @returns {Object} Resultado da validação { isValid, errors }\n */\nexport function validateDelivery(delivery, options = {}) {\n  return validateData(delivery, 'delivery', options);\n}\n\n/**\n * Validar abastecimento\n * @param {Object} gasEntry - Dados do abastecimento\n * @param {Object} options - Opções de validação\n * @returns {Object} Resultado da validação { isValid, errors }\n */\nexport function validateGasEntry(gasEntry, options = {}) {\n  return validateData(gasEntry, 'gasEntry', options);\n}\n\n/**\n * Validar conjunto de dados completo\n * @param {Array} items - Itens a validar\n * @param {string} schemaType - Tipo de esquema\n * @returns {Object} Resultado da validação { isValid, errors, validItems, invalidItems }\n */\nexport function validateDataset(items, schemaType) {\n  const result = {\n    isValid: true,\n    errors: [],\n    validItems: [],\n    invalidItems: []\n  };\n  \n  items.forEach((item, index) => {\n    const validation = validateData(item, schemaType, { checkBusinessRules: false });\n    \n    if (!validation.isValid) {\n      result.isValid = false;\n      \n      validation.errors.forEach(error => {\n        result.errors.push({\n          ...error,\n          index,\n          item\n        });\n      });\n      \n      result.invalidItems.push({ index, item, errors: validation.errors });\n    } else {\n      result.validItems.push(item);\n    }\n  });\n  \n  return result;\n}\n\n/**\n * Verificar integridade do banco de dados inteiro\n */\nexport function validateDatabaseIntegrity() {\n  const deliveryResult = validateDataset(deliveries, 'delivery');\n  const gasResult = validateDataset(gasEntries, 'gasEntry');\n  \n  return {\n    isValid: deliveryResult.isValid && gasResult.isValid,\n    deliveries: deliveryResult,\n    gasEntries: gasResult,\n    timestamp: Date.now()\n  };\n}\n\n/**\n * Obter mensagens de erro formatadas a partir de resultado de validação\n * @param {Object} validationResult - Resultado de validação\n * @returns {string[]} Lista de mensagens de erro formatadas\n */\nexport function getErrorMessages(validationResult) {\n  if (validationResult.isValid) {\n    return [];\n  }\n  \n  return validationResult.errors.map(error => {\n    if (error.index !== undefined) {\n      return `Item #${error.index + 1}: ${error.message}`;\n    }\n    return error.message;\n  });\n} ","/**\n * sync.js\n * Sistema avançado de sincronização entre múltiplas abas\n */\n\nimport { \n  loadDeliveries, \n  loadGasEntries, \n  updateTotals, \n  deliveries, \n  gasEntries \n} from './data.js';\nimport { showToast } from './utils.js';\nimport { renderAnalytics, clearDataCache } from './analytics.js';\n\n// Identificador único para esta sessão/aba\nconst SESSION_ID = generateSessionId();\n\n// Broadcast Channel para comunicação entre abas (mais eficiente que o storage event)\nlet broadcastChannel = null;\n\n// Timestamp da última atualização recebida\nlet lastUpdateTimestamp = Date.now();\n\n// Estado atual da sincronização\nconst syncState = {\n  isPrimary: false,\n  connectedTabs: 0,\n  lastSyncTime: null,\n  pendingChanges: [],\n  syncInProgress: false\n};\n\n/**\n * Gera um ID de sessão único para identificar esta aba\n */\nfunction generateSessionId() {\n  return `tab_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Inicializa o sistema de sincronização\n */\nexport function initializeSync() {\n  // Tentar usar Broadcast Channel API, que é mais eficiente\n  try {\n    broadcastChannel = new BroadcastChannel('entrega_financeira_sync');\n    \n    broadcastChannel.onmessage = (event) => {\n      handleSyncMessage(event.data);\n    };\n    \n    // Anunciar presença para outras abas\n    broadcastChannel.postMessage({\n      type: 'TAB_CONNECTED',\n      sessionId: SESSION_ID,\n      timestamp: Date.now()\n    });\n    \n    console.log('Broadcast Channel inicializado');\n  } catch (e) {\n    console.warn('Broadcast Channel não suportado, usando fallback com localStorage');\n    \n    // Fallback para localStorage\n    window.addEventListener('storage', (event) => {\n      if (event.key === 'deliveries' || event.key === 'gasEntries') {\n        handleStorageEvent(event);\n      } else if (event.key === 'sync_message') {\n        try {\n          const message = JSON.parse(event.newValue);\n          handleSyncMessage(message);\n        } catch (error) {\n          console.error('Erro ao processar mensagem de sincronização:', error);\n        }\n      }\n    });\n    \n    // Anunciar presença usando localStorage\n    localStorage.setItem('sync_message', JSON.stringify({\n      type: 'TAB_CONNECTED',\n      sessionId: SESSION_ID,\n      timestamp: Date.now()\n    }));\n  }\n  \n  // Iniciar verificação de primário\n  checkPrimaryStatus();\n  \n  // Adicionar listener para verificar mudanças antes de fechar\n  window.addEventListener('beforeunload', () => {\n    sendSyncMessage({\n      type: 'TAB_DISCONNECTED',\n      sessionId: SESSION_ID,\n      timestamp: Date.now()\n    });\n  });\n  \n  // Verificar periodicamente se há abas ativas\n  setInterval(checkPrimaryStatus, 30000);\n  \n  return {\n    sessionId: SESSION_ID,\n    isPrimary: () => syncState.isPrimary\n  };\n}\n\n/**\n * Enviar mensagem de sincronização para outras abas\n */\nfunction sendSyncMessage(message) {\n  message.sessionId = SESSION_ID;\n  \n  if (broadcastChannel) {\n    broadcastChannel.postMessage(message);\n  } else {\n    // Usar localStorage como fallback\n    localStorage.setItem('sync_message', JSON.stringify(message));\n    \n    // Precisamos remover e recriar para disparar eventos em outras abas\n    setTimeout(() => {\n      localStorage.removeItem('sync_message');\n    }, 50);\n  }\n}\n\n/**\n * Processar mensagem de sincronização recebida\n */\nfunction handleSyncMessage(message) {\n  if (!message || message.sessionId === SESSION_ID) return;\n  \n  // Ignorar mensagens muito antigas (mais de 1 minuto)\n  if (message.timestamp && Date.now() - message.timestamp > 60000) return;\n  \n  switch (message.type) {\n    case 'TAB_CONNECTED':\n      syncState.connectedTabs++;\n      checkPrimaryStatus();\n      break;\n      \n    case 'TAB_DISCONNECTED':\n      syncState.connectedTabs = Math.max(0, syncState.connectedTabs - 1);\n      checkPrimaryStatus();\n      break;\n      \n    case 'PRIMARY_CLAIMING':\n      // Outra aba está tentando se tornar primária\n      if (syncState.isPrimary) {\n        // Responder afirmando que já somos primários\n        sendSyncMessage({\n          type: 'PRIMARY_CLAIMED',\n          timestamp: Date.now()\n        });\n      }\n      break;\n      \n    case 'PRIMARY_CLAIMED':\n      syncState.isPrimary = false;\n      break;\n      \n    case 'DATA_CHANGED':\n      if (message.timestamp > lastUpdateTimestamp) {\n        lastUpdateTimestamp = message.timestamp;\n        syncData();\n      }\n      break;\n      \n    case 'SYNC_REQUEST':\n      // Responder com o estado atual se somos primários\n      if (syncState.isPrimary) {\n        sendSyncMessage({\n          type: 'SYNC_RESPONSE',\n          timestamp: Date.now()\n        });\n      }\n      break;\n      \n    case 'FULL_CLEAR':\n      // Recebeu notificação de limpeza completa dos dados\n      handleFullDataClear();\n      break;\n  }\n}\n\n/**\n * Processar evento de storage do localStorage (fallback)\n */\nfunction handleStorageEvent(event) {\n  if (event.key === 'deliveries' || event.key === 'gasEntries') {\n    if (event.newValue !== event.oldValue) {\n      // Se a mudança veio de outra aba, atualizar dados\n      if (!syncState.syncInProgress) {\n        syncData();\n      }\n    }\n  }\n}\n\n/**\n * Verificar se esta aba deve ser primária\n */\nfunction checkPrimaryStatus() {\n  // Se não houver outras abas conectadas, tornar-se primário\n  if (syncState.connectedTabs === 0 && !syncState.isPrimary) {\n    claimPrimaryStatus();\n  }\n}\n\n/**\n * Tentar se tornar a aba primária\n */\nfunction claimPrimaryStatus() {\n  sendSyncMessage({\n    type: 'PRIMARY_CLAIMING',\n    timestamp: Date.now()\n  });\n  \n  // Aguardar respostas por um curto período\n  setTimeout(() => {\n    // Se ninguém contestou, assumir como primário\n    if (!syncState.isPrimary) {\n      syncState.isPrimary = true;\n      console.log('Esta aba agora é primária');\n      \n      // Sincronizar estado uma vez como primário\n      syncData();\n    }\n  }, 300);\n}\n\n/**\n * Lida com a limpeza completa dos dados\n * Chamada quando outra aba executa uma limpeza completa\n */\nfunction handleFullDataClear() {\n  // Atualizar timestamp para evitar que mensagens antigas sejam processadas\n  lastUpdateTimestamp = Date.now();\n  \n  try {\n    // Limpar cache local\n    if (broadcastChannel) {\n      // Fechar e recriar o canal para limpar buffers internos\n      broadcastChannel.close();\n      \n      // Recriar o canal após um pequeno delay\n      setTimeout(() => {\n        try {\n          broadcastChannel = new BroadcastChannel('entrega_financeira_sync');\n          broadcastChannel.onmessage = (event) => {\n            handleSyncMessage(event.data);\n          };\n        } catch (e) {\n          console.error('Erro ao recriar canal após limpeza:', e);\n        }\n      }, 300);\n    }\n    \n    // Forçar recarga de dados\n    syncData(true);\n    \n    console.log('Sincronização completa após limpeza de dados');\n  } catch (error) {\n    console.error('Erro ao processar limpeza de dados:', error);\n  }\n}\n\n/**\n * Sincronizar dados com localStorage\n * @param {boolean} forceFull - Forçar sincronização completa, ignorando cache\n */\nfunction syncData(forceFull = false) {\n  if (syncState.syncInProgress && !forceFull) return;\n  \n  syncState.syncInProgress = true;\n  \n  try {\n    console.log('Sincronizando dados da memória com localStorage...');\n    \n    // Limpar cache se for sincronização forçada\n    if (forceFull) {\n      console.log('Executando sincronização forçada completa');\n      // Não utilize cache para esta sincronização\n      \n      // Limpar arrays em memória primeiro\n      // (não usamos .length = 0 para preservar as referências originais)\n      while (deliveries.length > 0) deliveries.pop();\n      while (gasEntries.length > 0) gasEntries.pop();\n    }\n    \n    // Recarregar dados do localStorage\n    loadDeliveries();\n    loadGasEntries();\n    \n    // Atualizar interface\n    updateTotals();\n    \n    // Limpar cache de análise e renderizar novamente\n    clearDataCache();\n    renderAnalytics();\n    \n    syncState.lastSyncTime = Date.now();\n    console.log('Sincronização completa:', new Date(syncState.lastSyncTime).toLocaleTimeString());\n  } catch (error) {\n    console.error('Erro durante sincronização:', error);\n    showToast('Erro ao sincronizar dados', 'error');\n  } finally {\n    syncState.syncInProgress = false;\n  }\n}\n\n/**\n * Notificar outras abas sobre mudanças\n */\nexport function notifyDataChange(changeType = 'update') {\n  lastUpdateTimestamp = Date.now();\n  \n  sendSyncMessage({\n    type: 'DATA_CHANGED',\n    changeType: changeType,\n    timestamp: lastUpdateTimestamp\n  });\n}\n\n/**\n * Forçar sincronização de dados em todas as abas\n */\nexport function forceSyncAllTabs() {\n  sendSyncMessage({\n    type: 'SYNC_REQUEST',\n    timestamp: Date.now()\n  });\n  \n  // Atualizar a própria aba também\n  syncData();\n  \n  return syncState.lastSyncTime;\n}\n\n/**\n * Verificar estado de sincronização\n */\nexport function getSyncStatus() {\n  return {\n    ...syncState,\n    sessionId: SESSION_ID\n  };\n} ","import { formatCurrency, formatDate, showToast, getCurrentDate, normalizeDate, getWeekdayName } from './utils.js';\nimport { renderAnalytics, clearDataCache } from './analytics.js';\nimport { formatImageDisplay } from './imageUtils.js';\n\n// Novas importações para validação e sincronização\nimport { validateDelivery, validateGasEntry, validateDatabaseIntegrity, getErrorMessages } from './dataValidator.js';\nimport { notifyDataChange, forceSyncAllTabs } from './sync.js';\n\n// Variáveis globais para armazenar os dados\nexport let deliveries = [];\nexport let gasEntries = [];\n\n// Última verificação de integridade\nlet lastIntegrityCheck = null;\n\n// Função para carregar dados do localStorage com verificação de integridade\nfunction loadFromLocalStorage() {\n  try {\n    // Carrega entregas\n    const savedDeliveries = localStorage.getItem('deliveries');\n    if (savedDeliveries) {\n      deliveries = JSON.parse(savedDeliveries).map(delivery => ({\n        ...delivery,\n        fee: parseFloat(delivery.fee) || 0,\n        id: delivery.id || String(Date.now()),\n        date: normalizeDate(delivery.date),\n        status: delivery.status || (parseFloat(delivery.fee) > 0 ? 'completed' : 'pending')\n      }));\n    } else {\n      deliveries = [];\n    }\n\n    // Carrega registros de gasolina\n    const savedGasEntries = localStorage.getItem('gasEntries');\n    if (savedGasEntries) {\n      gasEntries = JSON.parse(savedGasEntries).map(entry => ({\n        ...entry,\n        amount: parseFloat(entry.amount) || 0,\n        id: entry.id || String(Date.now()),\n        date: normalizeDate(entry.date)\n      }));\n    } else {\n      gasEntries = [];\n    }\n\n    // Ordena os dados\n    sortDeliveries();\n    \n    // Verificar integridade dos dados a cada hora, ou na primeira carga\n    const now = Date.now();\n    if (!lastIntegrityCheck || (now - lastIntegrityCheck) > 3600000) {\n      validateDataIntegrity();\n      lastIntegrityCheck = now;\n    }\n\n    // Atualiza as tabelas e totais após carregar os dados\n    updateDeliveriesTable();\n    updateGasTable();\n    updateTotals();\n    renderAnalytics();\n  } catch (error) {\n    console.error('Erro ao carregar dados:', error);\n    showToast('Erro ao carregar dados do armazenamento local', 'error');\n    \n    // Inicializa arrays vazios em caso de erro\n    deliveries = [];\n    gasEntries = [];\n  }\n}\n\n// Função para verificar integridade dos dados\nfunction validateDataIntegrity() {\n  const result = validateDatabaseIntegrity();\n  \n  if (!result.isValid) {\n    console.warn('Problemas de integridade nos dados:', result);\n    \n    // Verificar entradas inválidas em entregas e corrigi-las se possível\n    if (result.deliveries.invalidItems.length > 0) {\n      result.deliveries.invalidItems.forEach(item => {\n        const index = deliveries.findIndex(d => d.id === item.item.id);\n        if (index !== -1) {\n          // Tentar corrigir problemas comuns\n          if (!deliveries[index].status) {\n            deliveries[index].status = parseFloat(deliveries[index].fee) > 0 ? 'completed' : 'pending';\n          }\n          if (!deliveries[index].id) {\n            deliveries[index].id = String(Date.now()) + '_' + Math.random().toString(36).substring(2, 9);\n          }\n        }\n      });\n      \n      // Salvar após correções\n      localStorage.setItem('deliveries', JSON.stringify(deliveries));\n    }\n    \n    // Verificar entradas inválidas em gasEntries\n    if (result.gasEntries.invalidItems.length > 0) {\n      result.gasEntries.invalidItems.forEach(item => {\n        const index = gasEntries.findIndex(g => g.id === item.item.id);\n        if (index !== -1) {\n          // Tentar corrigir problemas comuns\n          if (!gasEntries[index].id) {\n            gasEntries[index].id = String(Date.now()) + '_' + Math.random().toString(36).substring(2, 9);\n          }\n        }\n      });\n      \n      // Salvar após correções\n      localStorage.setItem('gasEntries', JSON.stringify(gasEntries));\n    }\n  }\n  \n  return result;\n}\n\n// Função para salvar dados no localStorage com notificação de sincronização\nfunction saveToLocalStorage() {\n  try {\n    localStorage.setItem('deliveries', JSON.stringify(deliveries));\n    localStorage.setItem('gasEntries', JSON.stringify(gasEntries));\n    \n    // Notificar outras abas sobre a mudança\n    notifyDataChange('fullSync');\n  } catch (error) {\n    console.error('Erro ao salvar no localStorage:', error);\n    showToast('Erro ao salvar dados', 'error');\n  }\n}\n\n// Função para salvar entregas\nexport function saveDeliveries() {\n  try {\n    // Ordena as entregas antes de salvar\n    sortDeliveries();\n    \n    // Salva no localStorage\n    localStorage.setItem('deliveries', JSON.stringify(deliveries));\n    \n    // Limpa o cache de dados analíticos\n    clearDataCache();\n    \n    // Atualiza a interface\n    updateDeliveriesTable();\n    updateTotals();\n    \n    // Notificar outras abas sobre a mudança\n    notifyDataChange('deliveries');\n  } catch (error) {\n    console.error('Erro ao salvar entregas:', error);\n    showToast('Erro ao salvar entregas', 'error');\n  }\n}\n\n// Função para salvar registros de gasolina\nexport function saveGasEntries() {\n  try {\n    localStorage.setItem('gasEntries', JSON.stringify(gasEntries));\n    \n    // Limpa o cache de dados analíticos\n    clearDataCache();\n    \n    updateGasTable();\n    updateTotals();\n    \n    // Notificar outras abas sobre a mudança\n    notifyDataChange('gasEntries');\n  } catch (error) {\n    console.error('Erro ao salvar registros de gasolina:', error);\n    showToast('Erro ao salvar registros de gasolina', 'error');\n  }\n}\n\n// Função para carregar entregas\nexport function loadDeliveries() {\n  loadFromLocalStorage();\n}\n\n// Função para carregar registros de gasolina\nexport function loadGasEntries() {\n  loadFromLocalStorage();\n}\n\n// Função para ordenar entregas\nfunction sortDeliveries() {\n  deliveries.sort((a, b) => {\n    // Primeiro por data (mais recentes primeiro)\n    const dateComparison = new Date(b.date) - new Date(a.date);\n    if (dateComparison !== 0) return dateComparison;\n    \n    // Mesmo dia: ordenar por número do pedido\n    return a.orderNumber.localeCompare(b.orderNumber, undefined, {\n      numeric: true,\n      sensitivity: 'base'\n    });\n  });\n}\n\n// Função para atualizar os totais\nexport function updateTotals() {\n  const totalFees = deliveries.reduce((sum, delivery) => {\n    return sum + (parseFloat(delivery.fee) || 0);\n  }, 0);\n  \n  const totalGas = gasEntries.reduce((sum, entry) => {\n    return sum + (parseFloat(entry.amount) || 0);\n  }, 0);\n  \n  document.getElementById('totalFees').textContent = formatCurrency(totalFees);\n  document.getElementById('totalGas').textContent = formatCurrency(totalGas);\n  \n  const netProfit = totalFees - totalGas;\n  const netProfitElement = document.getElementById('netProfit');\n  netProfitElement.textContent = formatCurrency(netProfit);\n  netProfitElement.className = netProfit >= 0 ? 'total-profit' : 'total-loss';\n  \n  // Limpa o cache antes de renderizar análises\n  clearDataCache();\n  renderAnalytics();\n}\n\n// Função para atualizar a tabela de entregas\nexport function updateDeliveriesTable() {\n  const tbody = document.getElementById('deliveriesTableBody');\n  if (!tbody) return;\n\n  tbody.innerHTML = '';\n  \n  // Agrupar entregas por data\n  const entriesByDate = {};\n  \n  deliveries.forEach(delivery => {\n    const date = delivery.date || getCurrentDate(); // Fallback para datas inválidas\n    if (!entriesByDate[date]) {\n      entriesByDate[date] = {\n        entries: [],\n        totalFees: 0\n      };\n    }\n    entriesByDate[date].entries.push(delivery);\n    \n    // Calcular o total de taxas para esta data\n    const fee = parseFloat(delivery.fee) || 0;\n    entriesByDate[date].totalFees += fee;\n  });\n  \n  // Ordenar datas (mais recentes primeiro)\n  const sortedDates = Object.keys(entriesByDate).sort((a, b) => {\n    return new Date(b) - new Date(a);\n  });\n  \n  // Renderizar entregas agrupadas por data\n  sortedDates.forEach(date => {\n    const entriesForDate = entriesByDate[date].entries;\n    const totalFeesForDate = entriesByDate[date].totalFees;\n    \n    // Criar cabeçalho da data com o dia da semana e total de taxas\n    const dateHeader = document.createElement('tr');\n    dateHeader.className = 'date-header';\n    dateHeader.innerHTML = `\n      <td colspan=\"4\">\n        <div class=\"date-header-content\">\n          <span class=\"date-label\">${formatDate(date)}</span>\n          <span class=\"weekday-label\">(${getWeekdayName(date)})</span>\n          <div class=\"date-summary\">\n            <span class=\"delivery-count\">${entriesForDate.length} entregas</span>\n            <span class=\"total-fees\">R$ ${formatCurrency(totalFeesForDate)}</span>\n          </div>\n        </div>\n      </td>\n    `;\n    tbody.appendChild(dateHeader);\n    \n    // Renderizar entregas desta data\n    entriesForDate.forEach(delivery => {\n      const tr = document.createElement('tr');\n      tr.className = 'delivery-row';\n      \n      // Determinar status para exibição\n      let statusText = 'Desconhecido';\n      let statusClass = '';\n      \n      if (delivery.status === 'pending') {\n        statusText = 'Pendente';\n        statusClass = 'status-pending';\n      } else if (delivery.status === 'completed') {\n        statusText = 'Concluído';\n        statusClass = 'status-completed';\n      } else if (parseFloat(delivery.fee) > 0) {\n        statusText = 'Concluído';\n        statusClass = 'status-completed';\n      } else {\n        statusText = 'Pendente';\n        statusClass = 'status-pending';\n      }\n\n      // Criando os elementos de forma segura\n      // Sanitize data before inserting\n      const safeOrderNumber = document.createTextNode(delivery.orderNumber || '').textContent;\n      const fee = parseFloat(delivery.fee) || 0;\n      \n      tr.innerHTML = `\n        <td>${safeOrderNumber}</td>\n        <td>R$ ${formatCurrency(fee)}</td>\n        <td><span class=\"${statusClass}\">${statusText}</span></td>\n        <td class=\"actions-cell\">\n          <button class=\"action-button\" title=\"Ver imagem\">\n            <i class=\"fas fa-image\"></i>\n          </button>\n          <button class=\"action-button\" title=\"Editar\">\n            <i class=\"fas fa-edit\"></i>\n          </button>\n          <button class=\"action-button delete\" title=\"Excluir\">\n            <i class=\"fas fa-trash\"></i>\n          </button>\n        </td>\n      `;\n      \n      // Adicionar event listeners de forma segura\n      const imageButton = tr.querySelector('.action-button:nth-child(1)');\n      const editButton = tr.querySelector('.action-button:nth-child(2)');\n      const deleteButton = tr.querySelector('.action-button:nth-child(3)');\n      \n      imageButton.addEventListener('click', () => {\n        // Verificar se a entrega possui imagem antes de abrir o modal\n        if (delivery.image) {\n          window.showImageModal(delivery.image);\n        } else {\n          showToast('Sem comprovante para este pedido', 'info');\n        }\n      });\n      \n      editButton.addEventListener('click', () => {\n        window.editDelivery(delivery.id);\n      });\n      \n      deleteButton.addEventListener('click', () => {\n        const orderNumber = delivery.orderNumber || \"desconhecido\";\n        // Usar o sistema de confirmação personalizado\n        if (window.confirmDeliveryDeletion) {\n          window.confirmDeliveryDeletion(delivery.id, orderNumber);\n        } else {\n          // Fallback para confirmação nativa\n          if (confirm(`Tem certeza que deseja excluir o pedido número ${orderNumber}?`)) {\n            window.deleteDelivery(delivery.id);\n          }\n        }\n      });\n      \n      tbody.appendChild(tr);\n    });\n  });\n  \n  // Mostrar mensagem se não houver entregas\n  if (sortedDates.length === 0) {\n    const emptyRow = document.createElement('tr');\n    emptyRow.innerHTML = `\n      <td colspan=\"4\" class=\"empty-state\">\n        Nenhuma entrega registrada\n      </td>\n    `;\n    tbody.appendChild(emptyRow);\n  }\n}\n\n// Função para atualizar a tabela de gasolina\nexport function updateGasTable() {\n  const tbody = document.getElementById('gasTableBody');\n  if (!tbody) return;\n\n  tbody.innerHTML = '';\n  \n  gasEntries.forEach(entry => {\n    const tr = document.createElement('tr');\n    \n    // Sanitize data and handle invalid values\n    const formattedDate = formatDate(entry.date) || 'Data inválida';\n    const amount = parseFloat(entry.amount) || 0;\n    const safeId = document.createTextNode(entry.id || '').textContent;\n    \n    tr.innerHTML = `\n      <td>${formattedDate}</td>\n      <td>R$ ${formatCurrency(amount)}</td>\n      <td>\n        <button class=\"action-button delete\" title=\"Excluir\">\n          <i class=\"fas fa-trash\"></i>\n        </button>\n      </td>\n    `;\n    \n    // Add event listener safely\n    const deleteButton = tr.querySelector('.action-button.delete');\n    if (deleteButton) {\n      deleteButton.addEventListener('click', () => {\n        const amountFormatted = formatCurrency(amount);\n        // Usar o sistema de confirmação personalizado\n        if (window.confirmGasDeletion) {\n          window.confirmGasDeletion(safeId, amountFormatted);\n        } else {\n          // Fallback para confirmação nativa\n          if (confirm(`Tem certeza que deseja excluir o abastecimento no valor de R$ ${amountFormatted}?`)) {\n            window.deleteGasEntry(safeId);\n          }\n        }\n      });\n    }\n    tbody.appendChild(tr);\n  });\n}\n\n// Função para adicionar uma nova entrega\nexport function addDelivery(delivery) {\n  try {\n    // Validar entrega antes de adicionar\n    const validation = validateDelivery(delivery);\n    \n    if (!validation.isValid) {\n      const errorMessages = getErrorMessages(validation);\n      throw new Error(`Erro de validação: ${errorMessages.join(', ')}`);\n    }\n    \n    // Gerar ID e definir status se necessário\n    if (!delivery.id) {\n      delivery.id = String(Date.now());\n    }\n    \n    if (!delivery.status) {\n      delivery.status = parseFloat(delivery.fee) > 0 ? 'completed' : 'pending';\n    }\n    \n    // Adicionar à lista e salvar\n    deliveries.push(delivery);\n    saveDeliveries();\n    \n    return { success: true, delivery };\n  } catch (error) {\n    console.error('Erro ao adicionar entrega:', error);\n    showToast(error.message, 'error');\n    return { success: false, error: error.message };\n  }\n}\n\n// Função para atualizar uma entrega existente\nexport function updateDelivery(id, updatedDelivery) {\n  try {\n    // Validar entrega antes de atualizar\n    const validation = validateDelivery(updatedDelivery, { excludeId: id });\n    \n    if (!validation.isValid) {\n      const errorMessages = getErrorMessages(validation);\n      throw new Error(`Erro de validação: ${errorMessages.join(', ')}`);\n    }\n    \n    const index = deliveries.findIndex(d => d.id === id);\n    if (index === -1) {\n      throw new Error('Entrega não encontrada');\n    }\n    \n    // Atualizar dados preservando o ID\n    deliveries[index] = {\n      ...updatedDelivery,\n      id: id\n    };\n    \n    saveDeliveries();\n    return { success: true, delivery: deliveries[index] };\n  } catch (error) {\n    console.error('Erro ao atualizar entrega:', error);\n    showToast(error.message, 'error');\n    return { success: false, error: error.message };\n  }\n}\n\nexport function deleteDelivery(id) {\n  try {\n    deliveries = deliveries.filter(delivery => delivery.id !== id);\n    saveDeliveries();\n    updateDeliveriesTable();\n    updateTotals();\n    showToast('Entrega excluída com sucesso', 'success');\n  } catch (error) {\n    console.error('Erro ao excluir entrega:', error);\n    showToast('Erro ao excluir entrega', 'error');\n  }\n}\n\nexport function deleteGasEntry(id) {\n  try {\n    gasEntries = gasEntries.filter(entry => entry.id !== id);\n    saveGasEntries();\n    updateGasTable();\n    updateTotals();\n    showToast('Registro de gasolina excluído com sucesso', 'success');\n  } catch (error) {\n    console.error('Erro ao excluir registro de gasolina:', error);\n    showToast('Erro ao excluir registro de gasolina', 'error');\n  }\n}\n\nexport function importData(jsonData) {\n  try {\n    const data = JSON.parse(jsonData);\n    \n    if (data.deliveries) {\n      deliveries = data.deliveries.map(delivery => ({\n        ...delivery,\n        fee: parseFloat(delivery.fee) || 0,\n        id: delivery.id || String(Date.now()),\n        date: normalizeDate(delivery.date),\n        status: delivery.status || (parseFloat(delivery.fee) > 0 ? 'completed' : 'pending')\n      }));\n    }\n    \n    if (data.gasEntries) {\n      gasEntries = data.gasEntries.map(entry => ({\n        ...entry,\n        amount: parseFloat(entry.amount) || 0,\n        id: entry.id || String(Date.now()),\n        date: normalizeDate(entry.date)\n      }));\n    }\n    \n    saveToLocalStorage();\n    updateDeliveriesTable();\n    updateGasTable();\n    updateTotals();\n    showToast('Dados importados com sucesso', 'success');\n  } catch (error) {\n    console.error('Erro ao importar dados:', error);\n    showToast('Erro ao importar dados. Verifique o formato do arquivo.', 'error');\n  }\n}\n\n// Exportar funções de inicialização\nexport function initializeData() {\n  loadFromLocalStorage();\n}\n\n// Adicionar função para forçar sincronização\nexport function forceSyncData() {\n  return forceSyncAllTabs();\n}\n\n// Modificar a função addGasEntry para usar validação avançada\nexport function addGasEntry(gasEntry) {\n  try {\n    // Validar abastecimento antes de adicionar\n    const validation = validateGasEntry(gasEntry);\n    \n    if (!validation.isValid) {\n      const errorMessages = getErrorMessages(validation);\n      throw new Error(`Erro de validação: ${errorMessages.join(', ')}`);\n    }\n    \n    // Gerar ID se necessário\n    if (!gasEntry.id) {\n      gasEntry.id = String(Date.now());\n    }\n    \n    // Adicionar à lista e salvar\n    gasEntries.push(gasEntry);\n    saveGasEntries();\n    \n    return { success: true, gasEntry };\n  } catch (error) {\n    console.error('Erro ao adicionar abastecimento:', error);\n    showToast(error.message, 'error');\n    return { success: false, error: error.message };\n  }\n}\n\n// Modificar a função updateGasEntry para usar validação avançada\nexport function updateGasEntry(id, updatedGasEntry) {\n  try {\n    // Validar abastecimento antes de atualizar\n    const validation = validateGasEntry(updatedGasEntry, { excludeId: id });\n    \n    if (!validation.isValid) {\n      const errorMessages = getErrorMessages(validation);\n      throw new Error(`Erro de validação: ${errorMessages.join(', ')}`);\n    }\n    \n    const index = gasEntries.findIndex(g => g.id === id);\n    if (index === -1) {\n      throw new Error('Abastecimento não encontrado');\n    }\n    \n    // Atualizar dados preservando o ID\n    gasEntries[index] = {\n      ...updatedGasEntry,\n      id: id\n    };\n    \n    saveGasEntries();\n    return { success: true, gasEntry: gasEntries[index] };\n  } catch (error) {\n    console.error('Erro ao atualizar abastecimento:', error);\n    showToast(error.message, 'error');\n    return { success: false, error: error.message };\n  }\n} ","import { formatCurrency, formatDate, getWeekdayName } from './utils.js';\nimport { deliveries, gasEntries } from './data.js';\nimport { \n  generateLinePath, \n  generateDataPoints, \n  getBestProfitDay, \n  getWorstProfitDay,\n  optimizeChartRendering,\n  makeChartResponsive,\n  adjustChartSize\n} from './charts.js';\n\n// Função para normalizar valores monetários e evitar erros de arredondamento com números de ponto flutuante\nfunction normalizeMoneyValue(value) {\n  // Converte para número caso seja string\n  const num = typeof value === 'string' ? parseFloat(value) : value;\n  \n  // Verifica se é um número válido\n  if (isNaN(num)) return 0;\n  \n  // Arredonda para 2 casas decimais e converte para número novamente\n  // Multiplica e divide por 100 para evitar problemas de precisão com ponto flutuante\n  return Math.round(num * 100) / 100;\n}\n\n// Cache para dados calculados\nlet dataCache = {\n  dailyData: null,\n  lastUpdate: 0\n};\n\n// Função para limpar o cache de dados\nexport function clearDataCache() {\n  dataCache = {\n    dailyData: null,\n    lastUpdate: 0\n  };\n}\n\n// Função para mostrar estado vazio\nfunction showEmptyState() {\n  const containers = [\n    'financialSummary',\n    'revenueExpenseChart',\n    'expenseDeliveryRatio',\n    'expenseIncomeRatio',\n    'performanceMetrics',\n    'bestDay',\n    'worstDay'\n  ];\n\n  containers.forEach(id => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.innerHTML = '<p class=\"empty-state\">Nenhum dado cadastrado</p>';\n    }\n  });\n}\n\n// Função principal de renderização de análises\nexport function renderAnalytics() {\n  console.time('Renderização de Análises');\n  \n  // Verificar se temos dados para análise\n  if (deliveries.length === 0) {\n    showEmptyState();\n    console.timeEnd('Renderização de Análises');\n    return;\n  }\n\n  // Garantir que todas as entregas têm status\n  ensureDeliveryStatus();\n  \n  // Renderizar componentes\n  const promises = [\n    renderFinancialSummary(),\n    renderRevenueExpenseChart(),\n    renderExpenseDeliveryRatio(),\n    renderExpenseIncomeRatio(),\n    renderPerformanceMetrics(),\n    renderBestDay(),\n    renderWorstDay()\n  ];\n\n  // Aplicar otimizações após renderização\n  Promise.all(promises).then(() => {\n    optimizeCharts();\n    console.timeEnd('Renderização de Análises');\n  });\n}\n\n// Verificar e definir status para todas as entregas\nfunction ensureDeliveryStatus() {\n  deliveries.forEach(delivery => {\n    if (!delivery.status) {\n      delivery.status = parseFloat(delivery.fee) > 0 ? 'completed' : 'pending';\n    }\n  });\n}\n\n// Aplicar otimizações aos gráficos\nfunction optimizeCharts() {\n  const charts = document.querySelectorAll('.chart-container');\n  charts.forEach(chart => {\n    optimizeChartRendering(chart);\n    makeChartResponsive(chart);\n  });\n}\n\n// Função para agrupar dados por dia com cache\nfunction groupDataByDay() {\n  // Verificar se temos um cache válido\n  const cacheAge = Date.now() - dataCache.lastUpdate;\n  if (dataCache.dailyData && cacheAge < 5000) { // Cache válido por 5 segundos\n    return dataCache.dailyData;\n  }\n  \n  console.time('Agrupamento de Dados');\n  const dailyData = {};\n\n  // Agrupa entregas por dia\n  deliveries.forEach(delivery => {\n    const date = delivery.date;\n    if (!dailyData[date]) {\n      dailyData[date] = {\n        deliveries: [],\n        totalFees: 0,\n        gasExpenses: 0,\n        deliveryCount: 0,\n        pendingCount: 0,\n        completedCount: 0\n      };\n    }\n    dailyData[date].deliveries.push(delivery);\n    \n    // Conta entregas por status\n    if (delivery.status === 'pending') {\n      dailyData[date].pendingCount += 1;\n    } else if (delivery.status === 'completed') {\n      dailyData[date].completedCount += 1;\n      dailyData[date].totalFees += normalizeMoneyValue(delivery.fee);\n    }\n    \n    dailyData[date].deliveryCount += 1;\n  });\n\n  // Adiciona gastos com gasolina por dia\n  gasEntries.forEach(entry => {\n    const date = entry.date;\n    if (!dailyData[date]) {\n      dailyData[date] = {\n        deliveries: [],\n        totalFees: 0,\n        gasExpenses: 0,\n        deliveryCount: 0,\n        pendingCount: 0,\n        completedCount: 0\n      };\n    }\n    dailyData[date].gasExpenses += normalizeMoneyValue(entry.amount);\n  });\n\n  // Armazenar no cache\n  dataCache.dailyData = dailyData;\n  dataCache.lastUpdate = Date.now();\n  \n  console.timeEnd('Agrupamento de Dados');\n  return dailyData;\n}\n\n// Função para renderizar resumo financeiro\nfunction renderFinancialSummary() {\n  return new Promise(resolve => {\n    console.time('Renderização do Resumo Financeiro');\n    \n    const totalFees = deliveries.reduce((sum, d) => sum + normalizeMoneyValue(d.fee), 0);\n    const totalGas = gasEntries.reduce((sum, g) => sum + normalizeMoneyValue(g.amount), 0);\n    const netProfit = normalizeMoneyValue(totalFees - totalGas);\n    const profitMargin = totalFees > 0 ? (netProfit / totalFees) * 100 : 0;\n    \n    // Contagem de pedidos pendentes e finalizados\n    const pendingOrders = deliveries.filter(d => d.status === 'pending').length;\n    const completedOrders = deliveries.filter(d => d.status === 'completed').length;\n    \n    const element = document.getElementById('financialSummary');\n    if (!element) {\n      console.timeEnd('Renderização do Resumo Financeiro');\n      resolve();\n      return;\n    }\n    \n    element.innerHTML = `\n      <div class=\"metric-grid\">\n        <div class=\"metric-card\">\n          <div class=\"metric-value\">R$ ${formatCurrency(totalFees)}</div>\n          <div class=\"metric-label\">Total em Taxas</div>\n        </div>\n        <div class=\"metric-card\">\n          <div class=\"metric-value\">R$ ${formatCurrency(totalGas)}</div>\n          <div class=\"metric-label\">Total em Gasolina</div>\n        </div>\n        <div class=\"metric-card\">\n          <div class=\"metric-value ${netProfit >= 0 ? 'profit-positive' : 'profit-negative'}\">R$ ${formatCurrency(netProfit)}</div>\n          <div class=\"metric-label\">Lucro Líquido</div>\n        </div>\n        <div class=\"metric-card\">\n          <div class=\"metric-value ${profitMargin >= 0 ? 'profit-positive' : 'profit-negative'}\">${profitMargin.toFixed(1)}%</div>\n          <div class=\"metric-label\">Margem de Lucro</div>\n        </div>\n        <div class=\"metric-card orders-summary\">\n          <div class=\"metric-value\">\n            <span class=\"status-badge status-completed\" title=\"Pedidos finalizados\">${completedOrders}</span>\n            ${pendingOrders > 0 ? `\n              <span class=\"status-badge status-pending\" title=\"Pedidos pendentes\">${pendingOrders}</span>\n            ` : ''}\n          </div>\n          <div class=\"metric-label\">Total de Pedidos</div>\n        </div>\n      </div>\n    `;\n    \n    console.timeEnd('Renderização do Resumo Financeiro');\n    resolve();\n  });\n}\n\n// Função para renderizar relação gastos/pedidos por dia\nfunction renderExpenseDeliveryRatio() {\n  return new Promise(resolve => {\n    console.time('Renderização da Relação Gastos/Pedidos');\n    \n    const dailyData = groupDataByDay();\n    const ratios = Object.entries(dailyData)\n      .map(([date, data]) => {\n        // Calcular proporções e médias de forma segura para evitar divisão por zero\n        const ratio = data.deliveryCount > 0 ? normalizeMoneyValue(data.gasExpenses / data.deliveryCount) : 0;\n        const avgPerDelivery = data.deliveryCount > 0 ? normalizeMoneyValue(data.totalFees / data.deliveryCount) : 0;\n        \n        return {\n          date,\n          ratio,\n          deliveryCount: data.deliveryCount,\n          gasExpenses: data.gasExpenses,\n          avgPerDelivery,\n          totalFees: data.totalFees\n        };\n      })\n      .sort((a, b) => b.date.localeCompare(a.date))\n      .slice(0, 7); // Últimos 7 dias para melhor visualização\n\n    const element = document.getElementById('expenseDeliveryRatio');\n    if (!element) {\n      console.timeEnd('Renderização da Relação Gastos/Pedidos');\n      resolve();\n      return;\n    }\n    \n    if (ratios.length === 0) {\n      element.innerHTML = '<p class=\"empty-state\">Não há dados suficientes para análise</p>';\n      console.timeEnd('Renderização da Relação Gastos/Pedidos');\n      resolve();\n      return;\n    }\n\n    element.innerHTML = `\n      <div class=\"metric-list\">\n        ${ratios.map(({ date, ratio, deliveryCount, gasExpenses, avgPerDelivery, totalFees }) => {\n          // Calcular eficiência de forma segura\n          const efficiency = gasExpenses > 0 ? normalizeMoneyValue((totalFees / gasExpenses) * 100) : (totalFees > 0 ? 400 : 0);\n          const efficiencyClass = efficiency >= 300 ? 'high-efficiency' : \n                                efficiency >= 200 ? 'medium-efficiency' : 'low-efficiency';\n          \n          return `\n            <div class=\"metric-item ${efficiencyClass}\">\n              <div class=\"metric-header\">\n                <div class=\"metric-date\">${formatDate(date)} (${getWeekdayName(date)})</div>\n                <div class=\"metric-efficiency\" title=\"Eficiência: Ganhos/Gastos\">\n                  ${efficiency.toFixed(0)}% eficiência\n                </div>\n              </div>\n              <div class=\"metric-details\">\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Gasto por entrega:</span>\n                  <span class=\"metric-value\">R$ ${formatCurrency(ratio)}</span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Ganho por entrega:</span>\n                  <span class=\"metric-value\">R$ ${formatCurrency(avgPerDelivery)}</span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Total de entregas:</span>\n                  <span class=\"metric-value\">${deliveryCount}</span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Gasto total:</span>\n                  <span class=\"metric-value\">R$ ${formatCurrency(gasExpenses)}</span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Ganho total:</span>\n                  <span class=\"metric-value\">R$ ${formatCurrency(totalFees)}</span>\n                </div>\n              </div>\n              <div class=\"metric-bar-container\">\n                <div class=\"metric-bar\" style=\"width: ${Math.min(efficiency, 400) / 4}%\"></div>\n              </div>\n            </div>\n          `;\n        }).join('')}\n      </div>\n    `;\n    \n    console.timeEnd('Renderização da Relação Gastos/Pedidos');\n    resolve();\n  });\n}\n\n// Função para renderizar relação gastos/ganhos por dia\nfunction renderExpenseIncomeRatio() {\n  return new Promise(resolve => {\n    console.time('Renderização da Relação Gastos/Ganhos');\n    \n    const dailyData = groupDataByDay();\n    const ratios = Object.entries(dailyData)\n      .map(([date, data]) => {\n        // Calcular ratio de forma segura para evitar problemas com divisão por zero\n        const ratio = data.totalFees > 0 ? normalizeMoneyValue((data.gasExpenses / data.totalFees) * 100) : (data.gasExpenses > 0 ? 100 : 0);\n        const profit = normalizeMoneyValue(data.totalFees - data.gasExpenses);\n        \n        return {\n          date,\n          ratio,\n          income: data.totalFees,\n          expenses: data.gasExpenses,\n          profit,\n          deliveryCount: data.deliveryCount,\n          pendingCount: data.pendingCount,\n          completedCount: data.completedCount\n        };\n      })\n      .sort((a, b) => b.date.localeCompare(a.date))\n      .slice(0, 7);\n\n    const element = document.getElementById('expenseIncomeRatio');\n    if (!element) {\n      console.timeEnd('Renderização da Relação Gastos/Ganhos');\n      resolve();\n      return;\n    }\n    \n    if (ratios.length === 0) {\n      element.innerHTML = '<p class=\"empty-state\">Não há dados suficientes para análise</p>';\n      console.timeEnd('Renderização da Relação Gastos/Ganhos');\n      resolve();\n      return;\n    }\n\n    element.innerHTML = `\n      <div class=\"metric-list\">\n        ${ratios.map(({ date, ratio, income, expenses, profit, deliveryCount, pendingCount, completedCount }) => {\n          // Calcular margem de lucro de forma segura\n          const profitMargin = income > 0 ? (profit / income) * 100 : 0;\n          const efficiencyClass = ratio <= 25 ? 'high-efficiency' : \n                                ratio <= 40 ? 'medium-efficiency' : 'low-efficiency';\n          \n          return `\n            <div class=\"metric-item ${efficiencyClass}\">\n              <div class=\"metric-header\">\n                <div class=\"metric-date\">${formatDate(date)} (${getWeekdayName(date)})</div>\n                <div class=\"metric-efficiency\" title=\"Gastos em relação aos ganhos\">\n                  ${ratio.toFixed(1)}% dos ganhos\n                </div>\n              </div>\n              <div class=\"metric-details\">\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Status:</span>\n                  <span class=\"metric-value\">\n                    <span class=\"status-badge status-completed\" title=\"Pedidos finalizados\">${completedCount}</span>\n                    ${pendingCount > 0 ? `\n                      <span class=\"status-badge status-pending\" title=\"Pedidos pendentes\">${pendingCount}</span>\n                    ` : ''}\n                  </span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Ganhos:</span>\n                  <span class=\"metric-value\">R$ ${formatCurrency(income)}</span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Gastos:</span>\n                  <span class=\"metric-value\">R$ ${formatCurrency(expenses)}</span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Lucro:</span>\n                  <span class=\"metric-value ${profit >= 0 ? 'profit-positive' : 'profit-negative'}\">\n                    R$ ${formatCurrency(profit)}\n                  </span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Margem de Lucro:</span>\n                  <span class=\"metric-value ${profitMargin >= 0 ? 'profit-positive' : 'profit-negative'}\">\n                    ${profitMargin.toFixed(1)}%\n                  </span>\n                </div>\n                <div class=\"metric-row\">\n                  <span class=\"metric-label\">Total de Entregas:</span>\n                  <span class=\"metric-value\">${deliveryCount}</span>\n                </div>\n              </div>\n              <div class=\"metric-bar-container\" title=\"Proporção Gastos/Ganhos\">\n                <div class=\"metric-bar\" style=\"width: ${Math.min(ratio, 100)}%\"></div>\n              </div>\n            </div>\n          `;\n        }).join('')}\n      </div>\n    `;\n    \n    console.timeEnd('Renderização da Relação Gastos/Ganhos');\n    resolve();\n  });\n}\n\n// Função para renderizar métricas de desempenho\nfunction renderPerformanceMetrics() {\n  return new Promise(resolve => {\n    console.time('Renderização das Métricas de Desempenho');\n    \n    const dailyData = groupDataByDay();\n    const metrics = Object.values(dailyData);\n    \n    if (metrics.length === 0) {\n      const element = document.getElementById('performanceMetrics');\n      if (element) {\n        element.innerHTML = '<p class=\"empty-state\">Não há dados suficientes para análise</p>';\n      }\n      console.timeEnd('Renderização das Métricas de Desempenho');\n      resolve();\n      return;\n    }\n\n    // Calcular médias com proteção contra divisão por zero\n    const avgDeliveriesPerDay = metrics.length > 0 ? metrics.reduce((sum, data) => sum + data.deliveryCount, 0) / metrics.length : 0;\n    const avgFeePerDelivery = deliveries.length > 0 \n      ? normalizeMoneyValue(deliveries.reduce((sum, d) => sum + normalizeMoneyValue(d.fee), 0) / deliveries.length)\n      : 0;\n    const avgGasPerDay = metrics.length > 0 ? normalizeMoneyValue(metrics.reduce((sum, data) => sum + data.gasExpenses, 0) / metrics.length) : 0;\n\n    const element = document.getElementById('performanceMetrics');\n    if (!element) {\n      console.timeEnd('Renderização das Métricas de Desempenho');\n      resolve();\n      return;\n    }\n    \n    element.innerHTML = `\n      <div class=\"metric-grid\">\n        <div class=\"metric-card\">\n          <div class=\"metric-value\">${avgDeliveriesPerDay.toFixed(1)}</div>\n          <div class=\"metric-label\">Média de Entregas/Dia</div>\n        </div>\n        <div class=\"metric-card\">\n          <div class=\"metric-value\">R$ ${formatCurrency(avgFeePerDelivery)}</div>\n          <div class=\"metric-label\">Média por Entrega</div>\n        </div>\n        <div class=\"metric-card\">\n          <div class=\"metric-value\">R$ ${formatCurrency(avgGasPerDay)}</div>\n          <div class=\"metric-label\">Média Gasto/Dia</div>\n        </div>\n      </div>\n    `;\n    \n    console.timeEnd('Renderização das Métricas de Desempenho');\n    resolve();\n  });\n}\n\n// Função para renderizar melhor dia\nfunction renderBestDay() {\n  return new Promise(resolve => {\n    console.time('Renderização do Melhor Dia');\n    \n    const dailyData = groupDataByDay();\n    \n    if (Object.keys(dailyData).length === 0) {\n      const element = document.getElementById('bestDay');\n      if (element) {\n        element.innerHTML = '<p class=\"empty-state\">Não há dados suficientes para análise</p>';\n      }\n      console.timeEnd('Renderização do Melhor Dia');\n      resolve();\n      return;\n    }\n    \n    const bestDay = Object.entries(dailyData)\n      .map(([date, data]) => ({\n        date,\n        profit: data.totalFees - data.gasExpenses,\n        deliveryCount: data.deliveryCount,\n        totalFees: data.totalFees,\n        gasExpenses: data.gasExpenses\n      }))\n      .sort((a, b) => {\n        // Primeiro critério: lucro\n        const profitDiff = b.profit - a.profit;\n        if (profitDiff !== 0) return profitDiff;\n        // Segundo critério: número de entregas\n        return b.deliveryCount - a.deliveryCount;\n      })[0];\n\n    if (!bestDay) {\n      console.timeEnd('Renderização do Melhor Dia');\n      resolve();\n      return;\n    }\n\n    const element = document.getElementById('bestDay');\n    if (!element) {\n      console.timeEnd('Renderização do Melhor Dia');\n      resolve();\n      return;\n    }\n    \n    element.innerHTML = `\n      <div class=\"best-day-container\">\n        <div class=\"day-header\">${formatDate(bestDay.date)} (${getWeekdayName(bestDay.date)})</div>\n        <div class=\"metric-grid\">\n          <div class=\"metric-card\">\n            <div class=\"metric-value ${bestDay.profit >= 0 ? 'profit-positive' : 'profit-negative'}\">\n              R$ ${formatCurrency(bestDay.profit)}\n            </div>\n            <div class=\"metric-label\">Lucro</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${bestDay.deliveryCount}</div>\n            <div class=\"metric-label\">Entregas</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">R$ ${formatCurrency(bestDay.totalFees)}</div>\n            <div class=\"metric-label\">Ganhos</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">R$ ${formatCurrency(bestDay.gasExpenses)}</div>\n            <div class=\"metric-label\">Gastos</div>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    console.timeEnd('Renderização do Melhor Dia');\n    resolve();\n  });\n}\n\n// Função para renderizar pior dia\nfunction renderWorstDay() {\n  return new Promise(resolve => {\n    console.time('Renderização do Pior Dia');\n    \n    const dailyData = groupDataByDay();\n    \n    if (Object.keys(dailyData).length === 0) {\n      const element = document.getElementById('worstDay');\n      if (element) {\n        element.innerHTML = '<p class=\"empty-state\">Não há dados suficientes para análise</p>';\n      }\n      console.timeEnd('Renderização do Pior Dia');\n      resolve();\n      return;\n    }\n    \n    const worstDay = Object.entries(dailyData)\n      .map(([date, data]) => ({\n        date,\n        profit: data.totalFees - data.gasExpenses,\n        deliveryCount: data.deliveryCount,\n        totalFees: data.totalFees,\n        gasExpenses: data.gasExpenses,\n        avgPerDelivery: data.deliveryCount > 0 ? data.totalFees / data.deliveryCount : 0\n      }))\n      .sort((a, b) => {\n        // Primeiro critério: lucro\n        const profitDiff = a.profit - b.profit;\n        if (profitDiff !== 0) return profitDiff;\n        // Segundo critério: média por entrega\n        return a.avgPerDelivery - b.avgPerDelivery;\n      })[0];\n\n    if (!worstDay) {\n      console.timeEnd('Renderização do Pior Dia');\n      resolve();\n      return;\n    }\n\n    const element = document.getElementById('worstDay');\n    if (!element) {\n      console.timeEnd('Renderização do Pior Dia');\n      resolve();\n      return;\n    }\n    \n    element.innerHTML = `\n      <div class=\"worst-day-container\">\n        <div class=\"day-header\">${formatDate(worstDay.date)} (${getWeekdayName(worstDay.date)})</div>\n        <div class=\"metric-grid\">\n          <div class=\"metric-card\">\n            <div class=\"metric-value ${worstDay.profit >= 0 ? 'profit-positive' : 'profit-negative'}\">\n              R$ ${formatCurrency(worstDay.profit)}\n            </div>\n            <div class=\"metric-label\">Lucro</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${worstDay.deliveryCount}</div>\n            <div class=\"metric-label\">Entregas</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">R$ ${formatCurrency(worstDay.totalFees)}</div>\n            <div class=\"metric-label\">Ganhos</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">R$ ${formatCurrency(worstDay.gasExpenses)}</div>\n            <div class=\"metric-label\">Gastos</div>\n          </div>\n        </div>\n        <div class=\"metric-details\">\n          <div>Média por entrega: R$ ${formatCurrency(worstDay.avgPerDelivery)}</div>\n        </div>\n      </div>\n    `;\n    \n    console.timeEnd('Renderização do Pior Dia');\n    resolve();\n  });\n}\n\n// Função para renderizar gráfico de receitas vs despesas\nfunction renderRevenueExpenseChart() {\n  return new Promise(resolve => {\n    console.time('Renderização do Gráfico de Receitas vs Despesas');\n    \n    const totalFees = deliveries.reduce((sum, d) => sum + normalizeMoneyValue(d.fee), 0);\n    const totalGas = gasEntries.reduce((sum, g) => sum + normalizeMoneyValue(g.amount), 0);\n    const totalAmount = totalFees + totalGas;\n    \n    const element = document.getElementById(\"revenueExpenseChart\");\n    if (!element) {\n      console.timeEnd('Renderização do Gráfico de Receitas vs Despesas');\n      resolve();\n      return;\n    }\n    \n    // Verifique se há dados significativos antes de calcular percentuais\n    if (totalAmount <= 0) {\n      element.innerHTML = `\n        <p class=\"empty-state\">Não há dados suficientes para análise de receitas vs despesas</p>\n      `;\n      console.timeEnd('Renderização do Gráfico de Receitas vs Despesas');\n      resolve();\n      return;\n    }\n    \n    const feesPercentage = (totalFees / totalAmount) * 100;\n    const gasPercentage = (totalGas / totalAmount) * 100;\n\n    element.innerHTML = `\n      <div class=\"chart-container\">\n        <div class=\"pie-chart\" style=\"background-image: conic-gradient(#16a34a 0% ${feesPercentage}%, #dc2626 ${feesPercentage}% 100%);\">\n        </div>\n        <div class=\"pie-label\">\n          <div class=\"pie-label-item\">\n            <span class=\"pie-color\" style=\"background-color: #16a34a;\"></span>\n            <span>Taxas: ${feesPercentage.toFixed(1)}% (R$ ${formatCurrency(totalFees)})</span>\n          </div>\n          <div class=\"pie-label-item\">\n            <span class=\"pie-color\" style=\"background-color: #dc2626;\"></span>\n            <span>Gasolina: ${gasPercentage.toFixed(1)}% (R$ ${formatCurrency(totalGas)})</span>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    console.timeEnd('Renderização do Gráfico de Receitas vs Despesas');\n    resolve();\n  });\n}\n\n// Função para renderizar gráfico de gastos com gasolina\nfunction renderGasExpenseChart() {\n  const gasExpenseChartElement = document.getElementById(\"gasExpenseChart\");\n\n  if (gasEntries.length === 0) {\n    gasExpenseChartElement.innerHTML = '<p class=\"empty-state\">Não há dados de gasolina para este período</p>';\n    return;\n  }\n\n  const gasByDate = {};\n  gasEntries.forEach((entry) => {\n    const formattedDate = formatDate(entry.date);\n    gasByDate[formattedDate] = (gasByDate[formattedDate] || 0) + Number.parseFloat(entry.amount);\n  });\n\n  const sortedGasDates = Object.entries(gasByDate).sort((a, b) => {\n    const dateA = new Date(a[0].split(\"/\").reverse().join(\"-\"));\n    const dateB = new Date(b[0].split(\"/\").reverse().join(\"-\"));\n    return dateA - dateB;\n  });\n\n  gasExpenseChartElement.innerHTML = `\n    <div class=\"chart-container\">\n      <div class=\"horizontal-bar-chart\">\n        ${sortedGasDates\n          .map(([date, amount]) => {\n            const maxAmount = Math.max(...Object.values(gasByDate), 1); // Evitar divisão por zero\n            const percentage = (amount / maxAmount) * 100;\n            return `\n              <div class=\"horizontal-bar\">\n                <div class=\"horizontal-bar-label\">${date}</div>\n                <div class=\"horizontal-bar-track\">\n                  <div class=\"horizontal-bar-fill\" style=\"width: ${percentage}%\"></div>\n                </div>\n                <div class=\"horizontal-bar-value\">R$ ${formatCurrency(amount)}</div>\n              </div>\n            `;\n          })\n          .join(\"\")}\n      </div>\n    </div>\n  `;\n}\n\n// Função para renderizar histórico de entregas\nfunction renderDeliveryHistory() {\n  const deliveryHistoryElement = document.getElementById(\"deliveryHistory\");\n  \n  if (deliveries.length === 0) {\n    deliveryHistoryElement.innerHTML = '<p class=\"empty-state\">Nenhuma entrega registrada no período</p>';\n    return;\n  }\n  \n  // Agrupar entregas por data\n  const entriesByDate = {};\n  deliveries.forEach((delivery) => {\n    const formattedDate = formatDate(delivery.date);\n    if (!entriesByDate[formattedDate]) {\n      entriesByDate[formattedDate] = {\n        count: 0,\n        total: 0,\n      };\n    }\n    entriesByDate[formattedDate].count += 1;\n    entriesByDate[formattedDate].total += normalizeMoneyValue(delivery.fee);\n  });\n  \n  // Ordenar datas\n  const sortedDates = Object.keys(entriesByDate).sort((a, b) => {\n    const dateA = new Date(a.split(\"/\").reverse().join(\"-\"));\n    const dateB = new Date(b.split(\"/\").reverse().join(\"-\"));\n    return dateA - dateB;\n  });\n  \n  // Limitar a exibição a no máximo 10 datas para evitar sobrecarga visual\n  const displayDates = sortedDates.length > 10 ? sortedDates.slice(-10) : sortedDates;\n  \n  const maxCount = Math.max(...Object.values(entriesByDate).map(entry => entry.count), 1);\n  \n  deliveryHistoryElement.innerHTML = `\n    <div class=\"chart-container\">\n      <div class=\"bar-chart\">\n        ${displayDates.map((date) => {\n          const { count } = entriesByDate[date];\n          const height = Math.max((count / maxCount) * 150, 10);\n          \n          return `\n            <div class=\"bar\" style=\"height: ${height}px\">\n              <div class=\"bar-value\">${count}</div>\n              <div class=\"bar-label\">${date}</div>\n            </div>\n          `;\n        }).join(\"\")}\n      </div>\n    </div>\n  `;\n}\n\n// Função para renderizar tendências\nfunction renderTrends() {\n  const trendsElement = document.getElementById('trends');\n  \n  if (deliveries.length < 2) {\n    trendsElement.innerHTML = '<p class=\"empty-state\">Dados insuficientes para análise de tendências.</p>';\n    return;\n  }\n  \n  // Ordenar as entregas por data\n  const sortedDeliveries = [...deliveries].sort((a, b) => new Date(a.date) - new Date(b.date));\n  \n  // Se tivermos poucos dias, não faz sentido dividir em dois períodos\n  if (new Set(sortedDeliveries.map(d => d.date)).size < 2) {\n    trendsElement.innerHTML = '<p class=\"empty-state\">Dados insuficientes para análise de tendências. São necessários pelo menos 2 dias diferentes.</p>';\n    return;\n  }\n  \n  // Dividir em dois períodos\n  const midIndex = Math.floor(sortedDeliveries.length / 2);\n  const firstPeriod = sortedDeliveries.slice(0, midIndex);\n  const secondPeriod = sortedDeliveries.slice(midIndex);\n  \n  // Fazer o mesmo para gastos de gasolina\n  const sortedGas = [...gasEntries].sort((a, b) => new Date(a.date) - new Date(b.date));\n  const midGasIndex = Math.floor(sortedGas.length / 2);\n  const firstGasPeriod = sortedGas.slice(0, midGasIndex);\n  const secondGasPeriod = sortedGas.slice(midGasIndex);\n  \n  // Calcular métricas para cada período\n  const period1Revenue = firstPeriod.reduce((sum, d) => sum + normalizeMoneyValue(d.fee), 0);\n  const period2Revenue = secondPeriod.reduce((sum, d) => sum + normalizeMoneyValue(d.fee), 0);\n  \n  const period1Gas = firstGasPeriod.reduce((sum, g) => sum + normalizeMoneyValue(g.amount), 0);\n  const period2Gas = secondGasPeriod.reduce((sum, g) => sum + normalizeMoneyValue(g.amount), 0);\n  \n  const period1Profit = period1Revenue - period1Gas;\n  const period2Profit = period2Revenue - period2Gas;\n  \n  // Calcular variações percentuais\n  const revenueChange = period1Revenue > 0 ? ((period2Revenue - period1Revenue) / period1Revenue) * 100 : period2Revenue > 0 ? 100 : 0;\n  const gasChange = period1Gas > 0 ? ((period2Gas - period1Gas) / period1Gas) * 100 : period2Gas > 0 ? 100 : 0;\n  const profitChange = Math.abs(period1Profit) > 0 ? ((period2Profit - period1Profit) / Math.abs(period1Profit)) * 100 : period2Profit !== 0 ? 100 : 0;\n  \n  // Determinar ícones de tendência\n  const revenueIcon = revenueChange > 0 ? '↑' : revenueChange < 0 ? '↓' : '–';\n  const gasIcon = gasChange > 0 ? '↑' : gasChange < 0 ? '↓' : '–';\n  const profitIcon = profitChange > 0 ? '↑' : profitChange < 0 ? '↓' : '–';\n  \n  // Classes para cores baseadas na tendência\n  const revenueClass = revenueChange > 0 ? 'trend-up' : revenueChange < 0 ? 'trend-down' : 'trend-neutral';\n  const gasClass = gasChange > 0 ? 'trend-up' : gasChange < 0 ? 'trend-down' : 'trend-neutral';\n  const profitClass = profitChange > 0 ? 'trend-up' : profitChange < 0 ? 'trend-down' : 'trend-neutral';\n  \n  // Construir a interface\n  trendsElement.innerHTML = `\n    <div>\n      <p>\n        <span class=\"trend-icon ${revenueClass}\">${revenueIcon}</span>\n        Receita: <span class=\"highlight\">${Math.abs(revenueChange).toFixed(1)}%</span> \n        ${revenueChange > 0 ? 'aumento' : revenueChange < 0 ? 'redução' : 'sem alteração'}\n      </p>\n      \n      <p>\n        <span class=\"trend-icon ${gasClass}\">${gasIcon}</span>\n        Gastos com gasolina: <span class=\"highlight\">${Math.abs(gasChange).toFixed(1)}%</span>\n        ${gasChange > 0 ? 'aumento' : gasChange < 0 ? 'redução' : 'sem alteração'}\n      </p>\n      \n      <p>\n        <span class=\"trend-icon ${profitClass}\">${profitIcon}</span>\n        Lucro: <span class=\"highlight\">${Math.abs(profitChange).toFixed(1)}%</span>\n        ${profitChange > 0 ? 'aumento' : profitChange < 0 ? 'redução' : 'sem alteração'}\n      </p>\n      \n      <p style=\"font-style: italic; color: var(--text-muted); margin-top: 8px;\">\n        Comparação entre primeira e segunda metade do período.\n      </p>\n    </div>\n  `;\n}\n\n// Função para renderizar evolução do lucro\nfunction renderProfitEvolution() {\n  const profitEvolutionChart = document.getElementById(\"profitEvolutionChart\");\n  \n  if (deliveries.length === 0 && gasEntries.length === 0) {\n    profitEvolutionChart.innerHTML = '<p class=\"empty-state\">Não há dados suficientes para análise</p>';\n    return;\n  }\n  \n  // Calcular lucro por dia\n  const dailyProfits = {};\n  let totalProfit = 0;\n  \n  // Agrupar todas as datas únicas\n  const allDates = new Set();\n  deliveries.forEach(delivery => allDates.add(delivery.date));\n  gasEntries.forEach(entry => allDates.add(entry.date));\n  \n  // Converter para array e ordenar\n  const sortedDates = Array.from(allDates).sort();\n  \n  // Calcular lucro acumulado para cada dia\n  sortedDates.forEach(date => {\n    // Calcular receitas do dia\n    const dayFees = deliveries\n      .filter(delivery => delivery.date === date)\n      .reduce((sum, delivery) => sum + normalizeMoneyValue(delivery.fee), 0);\n    \n    // Calcular gastos do dia\n    const dayGas = gasEntries\n      .filter(entry => entry.date === date)\n      .reduce((sum, entry) => sum + normalizeMoneyValue(entry.amount), 0);\n    \n    // Lucro do dia\n    const dayProfit = dayFees - dayGas;\n    \n    // Atualizar lucro total\n    totalProfit += dayProfit;\n    \n    // Armazenar na estrutura\n    dailyProfits[date] = {\n      date,\n      dayProfit,\n      totalProfit,\n      formattedDate: formatDate(date)\n    };\n  });\n  \n  // Se tivermos apenas poucos pontos, simplificar a visualização\n  const finalDates = sortedDates.length > 15 \n    ? sortedDates.filter((_, index, arr) => {\n        // Manter o primeiro, o último e alguns pontos intermediários\n        return index === 0 || index === arr.length - 1 || index % Math.ceil(arr.length / 10) === 0;\n      })\n    : sortedDates;\n  \n  // Encontrar valores máximo e mínimo para escala\n  const profits = finalDates.map(date => dailyProfits[date].totalProfit);\n  const minProfit = Math.min(...profits);\n  const maxProfit = Math.max(...profits);\n  const range = Math.max(Math.abs(minProfit), Math.abs(maxProfit), 100);\n  \n  const bestDay = getBestProfitDay(dailyProfits);\n  const worstDay = getWorstProfitDay(dailyProfits);\n  \n  // Construir gráfico e resumo\n  profitEvolutionChart.innerHTML = `\n    <div class=\"chart-container\">\n      <div class=\"line-chart-container\">\n        <div class=\"line-chart\">\n          <div class=\"line-chart-zero-line\"></div>\n          <svg class=\"line-chart-svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n            <defs>\n              <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0%\" stop-color=\"#3b82f6\" />\n                <stop offset=\"100%\" stop-color=\"#8b5cf6\" />\n              </linearGradient>\n            </defs>\n            ${generateLinePath(finalDates, dailyProfits, 50, 90, range)}\n            ${generateDataPoints(finalDates, dailyProfits, 50, 90, range)}\n          </svg>\n          <div class=\"line-chart-x-labels\">\n            ${finalDates.map((date, index) => {\n              const percentage = index / (finalDates.length - 1) * 100;\n              return `<div class=\"line-chart-x-label\" style=\"left: ${percentage}%\">${formatDate(date)}</div>`;\n            }).join('')}\n          </div>\n        </div>\n      </div>\n      <div class=\"line-chart-y-axis\">\n        <div>R$ ${formatCurrency(range)}</div>\n        <div>R$ 0.00</div>\n        <div>R$ ${formatCurrency(-range)}</div>\n      </div>\n    </div>\n    <div class=\"summary-container\">\n      <p>Lucro total no período: <span class=\"${totalProfit >= 0 ? 'profit-positive-text' : 'profit-negative-text'}\">R$ ${formatCurrency(totalProfit)}</span></p>\n      <p>Melhor dia: <span class=\"highlight\">${formatDate(bestDay.date)} (R$ ${formatCurrency(bestDay.dayProfit)})</span></p>\n      <p>Pior dia: <span class=\"highlight\">${formatDate(worstDay.date)} (R$ ${formatCurrency(worstDay.dayProfit)})</span></p>\n    </div>\n  `;\n}\n\n// Exportar funções auxiliares para uso em outros módulos\nexport {\n  generateLinePath,\n  generateDataPoints,\n  getBestProfitDay,\n  getWorstProfitDay\n}; ","// Chart utilities and optimizations\nimport { isMobileDevice } from './mobile.js';\n\n/**\n * Generate path for line chart with optimizations for mobile\n * @param {Array} dates - Array of dates\n * @param {Object} profits - Object containing profit data\n * @param {number} baseHeight - Base height for chart\n * @param {number} chartHeight - Chart height\n * @param {number} range - Data range\n * @returns {string} SVG path\n */\nexport function generateLinePath(dates, profits, baseHeight, chartHeight, range) {\n  if (dates.length === 0) return '';\n  \n  // Determine the scale factor\n  const scale = chartHeight / (range * 2);\n  \n  // Use simplified path for mobile to improve performance\n  if (isMobileDevice() && dates.length > 20) {\n    // Sample fewer points on mobile for better performance\n    const sampledDates = sampleDates(dates, 15);\n    \n    return `M ${0} ${baseHeight - profits[sampledDates[0]].totalProfit * scale} ` +\n      sampledDates.map((date, index) => {\n        const x = (index / (sampledDates.length - 1)) * 100;\n        const y = baseHeight - profits[date].totalProfit * scale;\n        return `L ${x} ${y}`;\n      }).join(' ');\n  }\n  \n  // Use full resolution for desktop\n  return `M ${0} ${baseHeight - profits[dates[0]].totalProfit * scale} ` +\n    dates.map((date, index) => {\n      const x = (index / (dates.length - 1)) * 100;\n      const y = baseHeight - profits[date].totalProfit * scale;\n      return `L ${x} ${y}`;\n    }).join(' ');\n}\n\n/**\n * Sample dates to reduce number of points on mobile devices\n * @param {Array} dates - Array of dates to sample\n * @param {number} maxPoints - Maximum number of points to include\n * @returns {Array} Sampled dates\n */\nfunction sampleDates(dates, maxPoints) {\n  if (dates.length <= maxPoints) return dates;\n  \n  // Always include first and last dates\n  const result = [dates[0]];\n  \n  // Sample evenly between first and last\n  const step = Math.ceil((dates.length - 2) / (maxPoints - 2));\n  for (let i = step; i < dates.length - 1; i += step) {\n    result.push(dates[i]);\n  }\n  \n  // Add the last date\n  result.push(dates[dates.length - 1]);\n  \n  return result;\n}\n\n/**\n * Generate data points for chart with mobile optimizations\n * @param {Array} dates - Array of dates\n * @param {Object} profits - Object containing profit data\n * @param {number} baseHeight - Base height for chart\n * @param {number} chartHeight - Chart height\n * @param {number} range - Data range\n * @returns {string} SVG data points\n */\nexport function generateDataPoints(dates, profits, baseHeight, chartHeight, range) {\n  if (dates.length === 0) return '';\n  \n  // Determine the scale factor\n  const scale = chartHeight / (range * 2);\n  \n  // Use fewer data points on mobile to improve performance\n  if (isMobileDevice() && dates.length > 20) {\n    const sampledDates = sampleDates(dates, 15);\n    \n    return sampledDates.map((date, index) => {\n      const x = (index / (sampledDates.length - 1)) * 100;\n      const y = baseHeight - profits[date].totalProfit * scale;\n      return `<circle class=\"data-point\" cx=\"${x}\" cy=\"${y}\" r=\"4\"></circle>`;\n    }).join('');\n  }\n  \n  // Generate data points\n  return dates.map((date, index) => {\n    const x = (index / (dates.length - 1)) * 100;\n    const y = baseHeight - profits[date].totalProfit * scale;\n    return `<circle class=\"data-point\" cx=\"${x}\" cy=\"${y}\" r=\"4\"></circle>`;\n  }).join('');\n}\n\n/**\n * Get best profit day\n * @param {Object} dailyProfits - Daily profit data\n * @returns {Object} Best day data\n */\nexport function getBestProfitDay(dailyProfits) {\n  const entries = Object.entries(dailyProfits);\n  if (entries.length === 0) return \"N/A\";\n\n  const bestDay = entries.reduce((best, current) => {\n    return current[1].dayProfit > best[1].dayProfit ? current : best;\n  }, entries[0]);\n\n  return dailyProfits[bestDay[0]];\n}\n\n/**\n * Get worst profit day\n * @param {Object} dailyProfits - Daily profit data\n * @returns {Object} Worst day data\n */\nexport function getWorstProfitDay(dailyProfits) {\n  const entries = Object.entries(dailyProfits);\n  if (entries.length === 0) return \"N/A\";\n\n  const worstDay = entries.reduce((worst, current) => {\n    return current[1].dayProfit < worst[1].dayProfit ? current : worst;\n  }, entries[0]);\n\n  return dailyProfits[worstDay[0]];\n}\n\n/**\n * Optimize chart rendering based on device type\n * @param {Element} container - The container element\n */\nexport function optimizeChartRendering(container) {\n  if (!container) return;\n  \n  // Apply mobile-specific optimizations\n  if (isMobileDevice()) {\n    // Add GPU acceleration\n    const chartElements = container.querySelectorAll('.pie-chart, .bar-chart, .line-chart');\n    chartElements.forEach(chart => {\n      chart.style.willChange = 'transform';\n      chart.style.transform = 'translateZ(0)';\n    });\n    \n    // Fix z-index issues for overlapping elements\n    const labels = container.querySelectorAll('.bar-value, .pie-label');\n    labels.forEach(label => {\n      label.style.zIndex = '2';\n    });\n  }\n}\n\n/**\n * Create responsive chart layout\n * @param {Element} container - The chart container\n * @param {Object} options - Configuration options\n */\nexport function makeChartResponsive(container, options = {}) {\n  if (!container) return;\n  \n  // Apply responsive fixes\n  if (isMobileDevice()) {\n    // Enable horizontal scrolling for charts that need it\n    const needsScroll = container.querySelector('.bar-chart, .line-chart');\n    if (needsScroll) {\n      container.style.overflowX = 'auto';\n      container.style.webkitOverflowScrolling = 'touch';\n    }\n    \n    // Fix overlapping labels in pie charts\n    const pieLabel = container.querySelector('.pie-label');\n    if (pieLabel) {\n      pieLabel.style.flexDirection = 'column';\n      pieLabel.style.alignItems = 'center';\n      pieLabel.style.marginTop = '45px';\n    }\n  }\n}\n\n/**\n * Adjust chart size based on screen size\n * @param {string} chartId - ID of chart container\n * @param {Object} options - Size options\n */\nexport function adjustChartSize(chartId, options = {}) {\n  const container = document.getElementById(chartId);\n  if (!container) return;\n  \n  // Default options\n  const defaults = {\n    mobileWidth: 150,\n    mobileHeight: 150,\n    tabletWidth: 200,\n    tabletHeight: 200\n  };\n  \n  const config = {...defaults, ...options};\n  \n  // Detect device type\n  if (window.innerWidth <= 480) {\n    // Mobile\n    if (container.querySelector('.pie-chart')) {\n      const pieChart = container.querySelector('.pie-chart');\n      pieChart.style.width = `${config.mobileWidth}px`;\n      pieChart.style.height = `${config.mobileHeight}px`;\n      pieChart.style.margin = '0 auto 40px auto';\n    }\n  } else if (window.innerWidth <= 768) {\n    // Tablet\n    if (container.querySelector('.pie-chart')) {\n      const pieChart = container.querySelector('.pie-chart');\n      pieChart.style.width = `${config.tabletWidth}px`;\n      pieChart.style.height = `${config.tabletHeight}px`;\n      pieChart.style.margin = '0 auto 40px auto';\n    }\n  }\n} ","import { deliveries, gasEntries, loadDeliveries, loadGasEntries, updateTotals } from './data.js';\nimport { parseCSVDate, showToast, normalizeDate } from './utils.js';\nimport { isMobileDevice } from './mobile.js';\n\n// Função para validar os dados importados\nfunction validateImportedData(entry, type) {\n  const errors = [];\n  \n  // Validar data\n  if (!entry.date) {\n    errors.push(`Data inválida para ${type}`);\n  }\n  \n  // Validar ID\n  if (!entry.id) {\n    errors.push(`ID inválido para ${type}`);\n  }\n  \n  if (type === 'Entrega') {\n    // Validar número do pedido\n    if (!entry.orderNumber) {\n      errors.push('Número do pedido inválido');\n    }\n    \n    // Validar taxa\n    if (typeof entry.fee !== 'number' && entry.fee !== '') {\n      errors.push('Taxa de entrega inválida');\n    }\n  } else if (type === 'Gasolina') {\n    // Validar valor da gasolina\n    if (typeof entry.amount !== 'number' && entry.amount !== '') {\n      errors.push('Valor da gasolina inválido');\n    }\n  }\n  \n  return errors;\n}\n\n// Função para verificar se o arquivo é um CSV válido\nfunction isCSVFile(file) {\n  // Verificar o tipo do arquivo\n  const validTypes = [\n    'text/csv',\n    'text/comma-separated-values',\n    'application/csv',\n    'application/excel',\n    'application/vnd.ms-excel',\n    'application/vnd.msexcel',\n    'text/anytext',\n    'text/plain'\n  ];\n  \n  // Verificar se a extensão é .csv\n  const fileName = file.name.toLowerCase();\n  const hasCSVExtension = fileName.endsWith('.csv');\n  \n  // Considerar válido se tiver extensão .csv ou um tipo MIME compatível\n  return hasCSVExtension || validTypes.includes(file.type);\n}\n\n// Função para importar dados do CSV\nexport function importCSV(event) {\n  // Reset the input to ensure change event fires even with same file\n  const resetInput = () => {\n    if (event && event.target) {\n      event.target.value = '';\n    }\n  };\n\n  // Handle the case where we got a direct file object (from mobile)\n  const file = event.target ? event.target.files[0] : (event.file || null);\n  if (!file) {\n    resetInput();\n    showToast('Nenhum arquivo selecionado', 'error');\n    return;\n  }\n  \n  // Verificar se o arquivo é um CSV válido\n  if (!isCSVFile(file)) {\n    resetInput();\n    showToast('Por favor, selecione um arquivo CSV válido', 'error');\n    return;\n  }\n\n  // Show loading indicator\n  const loadingToast = showToast('Processando arquivo...', 'info', 0);\n\n  const reader = new FileReader();\n  reader.onload = function(e) {\n    try {\n      // Remove loading toast\n      if (loadingToast) {\n        document.body.removeChild(loadingToast);\n      }\n\n      const text = e.target.result;\n      \n      // Verificar se tem conteúdo\n      if (!text || !text.trim()) {\n        throw new Error('O arquivo está vazio');\n      }\n      \n      // Detectar separador do CSV (vírgula, ponto e vírgula, tab)\n      const firstLine = text.split('\\n')[0];\n      let separator = ',';\n      \n      if (firstLine.includes(';')) {\n        separator = ';';\n      } else if (firstLine.includes('\\t')) {\n        separator = '\\t';\n      }\n      \n      const lines = text.split('\\n').filter(l => l.trim());\n      \n      // Validar cabeçalhos\n      const expectedHeaders = ['Data', 'Tipo', 'ID', 'Número do Pedido', 'Valor Pedido', 'Valor Gasolina', 'Status', 'Imagem'];\n      const headers = lines[0].split(separator).map(h => h.trim());\n      \n      const missingHeaders = expectedHeaders.filter(h => !headers.includes(h));\n      if (missingHeaders.length > 0) {\n        throw new Error(`Cabeçalhos ausentes no CSV: ${missingHeaders.join(', ')}`);\n      }\n      \n      // Processar dados de entregas e gasolina\n      const importedDeliveries = [];\n      const importedGasData = [];\n      const errors = [];\n      \n      for (let i = 1; i < lines.length; i++) {\n        if (!lines[i].trim()) continue;\n\n        // Parse CSV line respecting quoted fields\n        const values = [];\n        let currentValue = '';\n        let insideQuotes = false;\n        \n        for (let char of lines[i]) {\n          if (char === '\"') {\n            insideQuotes = !insideQuotes;\n          } else if (char === separator && !insideQuotes) {\n            values.push(currentValue);\n            currentValue = '';\n          } else {\n            currentValue += char;\n          }\n        }\n        values.push(currentValue); // Add the last value\n\n        // Create object from headers and values\n        const entry = {};\n        headers.forEach((header, index) => {\n          entry[header] = values[index]?.trim() || '';\n        });\n\n        // Processar e validar cada tipo de entrada\n        if (entry['Tipo'] === 'Gasolina') {\n          const gasEntry = {\n            id: entry['ID'] || String(Date.now()),\n            date: normalizeDate(parseCSVDate(entry['Data'])),\n            amount: parseFloat(entry['Valor Gasolina']) || 0,\n            image: entry['Imagem'] || null\n          };\n          \n          const validationErrors = validateImportedData(gasEntry, 'Gasolina');\n          if (validationErrors.length > 0) {\n            errors.push(`Linha ${i + 1} (Gasolina): ${validationErrors.join(', ')}`);\n          } else {\n            importedGasData.push(gasEntry);\n          }\n        } else {\n          const delivery = {\n            id: entry['ID'] || String(Date.now()),\n            date: normalizeDate(parseCSVDate(entry['Data'])),\n            orderNumber: entry['Número do Pedido'],\n            fee: parseFloat(entry['Valor Pedido']) || 0,\n            image: entry['Imagem'] || null\n          };\n          \n          const validationErrors = validateImportedData(delivery, 'Entrega');\n          if (validationErrors.length > 0) {\n            errors.push(`Linha ${i + 1} (Entrega): ${validationErrors.join(', ')}`);\n          } else {\n            importedDeliveries.push(delivery);\n          }\n        }\n      }\n      \n      // Se houver erros, mostrar e abortar importação\n      if (errors.length > 0) {\n        throw new Error(`Erros na importação:\\n${errors.join('\\n')}`);\n      }\n      \n      // Verificar se há dados para importar\n      if (importedDeliveries.length === 0 && importedGasData.length === 0) {\n        throw new Error('Nenhum dado válido encontrado para importação');\n      }\n      \n      // Atualizar dados\n      localStorage.setItem('deliveries', JSON.stringify(importedDeliveries));\n      localStorage.setItem('gasEntries', JSON.stringify(importedGasData));\n      \n      // Recarregar dados\n      loadDeliveries();\n      loadGasEntries();\n      updateTotals();\n      \n      showToast(`Importação concluída: ${importedDeliveries.length} entregas e ${importedGasData.length} abastecimentos`, 'success');\n    } catch (error) {\n      console.error('Erro na importação:', error);\n      showToast(error.message, 'error');\n    }\n    // Always reset the input\n    resetInput();\n  };\n  \n  reader.onerror = function() {\n    showToast('Erro ao ler o arquivo', 'error');\n    resetInput();\n  };\n  \n  // Start reading the file\n  reader.readAsText(file);\n} ","import { deliveries } from './data.js';\n\n/**\n * Gera um hash simples a partir de uma string\n * @param {string} str - String para gerar hash\n * @returns {number} Hash numérico\n */\nfunction generateHash(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Converte para 32 bits\n  }\n  return Math.abs(hash);\n}\n\n/**\n * Gera um ID único de 5 dígitos baseado nos dados do pedido\n * @param {Date} date - Data do pedido\n * @param {number} firstOrderValue - Valor do primeiro pedido\n * @param {number} lastOrderValue - Valor do último pedido\n * @returns {string} ID de 5 dígitos com zero padding\n */\nexport function generateOrderID(date, firstOrderValue, lastOrderValue) {\n  // Formata a data como DDMMYYYY\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const year = date.getFullYear();\n  const dateStr = `${day}${month}${year}`;\n  \n  // Formata os valores com 2 casas decimais\n  const firstValue = firstOrderValue.toFixed(2);\n  const lastValue = lastOrderValue.toFixed(2);\n  \n  // Cria a string base no formato especificado\n  const baseString = `${dateStr}-${firstValue}-${lastValue}`;\n  \n  // Gera o hash e extrai os últimos 5 dígitos\n  const hash = generateHash(baseString);\n  const fiveDigits = hash % 100000;\n  \n  // Retorna o ID com zero padding\n  return String(fiveDigits).padStart(5, '0');\n}\n\n/**\n * Gera o nome do arquivo no formato especificado\n * @param {Date} date - Data do pedido\n * @param {string} id - ID do pedido\n * @returns {string} Nome do arquivo no formato \"DD-MM-ID\"\n */\nexport function generateFileName(date, id) {\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  return `${day}-${month}-${id}`;\n}\n\n/**\n * Gera um ID e nome de arquivo para um novo pedido\n * @param {Date} date - Data do pedido\n * @returns {Object} Objeto contendo o ID e nome do arquivo\n */\nexport function generateDeliveryIdentifiers(date) {\n  // Encontra o primeiro e último pedido do dia\n  const dateStr = date.toISOString().split('T')[0];\n  const todaysDeliveries = deliveries\n    .filter(d => d.date === dateStr)\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\n  \n  // Define os valores padrão se não houver pedidos\n  const firstOrderValue = todaysDeliveries.length > 0 ? \n    parseFloat(todaysDeliveries[0].fee) || 0 : 0;\n  const lastOrderValue = todaysDeliveries.length > 0 ? \n    parseFloat(todaysDeliveries[todaysDeliveries.length - 1].fee) || 0 : 0;\n  \n  // Gera o ID e nome do arquivo\n  const id = generateOrderID(date, firstOrderValue, lastOrderValue);\n  const fileName = generateFileName(date, id);\n  \n  return {\n    id,\n    fileName,\n    firstOrderValue,\n    lastOrderValue\n  };\n}\n\n/**\n * Valida se um ID está no formato correto (5 dígitos)\n * @param {string} id - ID a ser validado\n * @returns {boolean} true se o ID é válido\n */\nexport function isValidOrderID(id) {\n  if (!id || typeof id !== 'string') return false;\n  return /^\\d{5}$/.test(id);\n}\n\n/**\n * Extrai a data de um nome de arquivo\n * @param {string} fileName - Nome do arquivo no formato \"DD-MM-ID\"\n * @returns {Object|null} Objeto com dia, mês e ID, ou null se inválido\n */\nexport function parseFileName(fileName) {\n  const match = fileName.match(/^(\\d{2})-(\\d{2})-(\\d{5})$/);\n  if (!match) return null;\n  \n  return {\n    day: match[1],\n    month: match[2],\n    id: match[3]\n  };\n}","import { deliveries, gasEntries, loadDeliveries, loadGasEntries, updateTotals } from './data.js';\nimport { formatDate, getCurrentDate, showToast } from './utils.js';\nimport { generateDeliveryIdentifiers } from './idGenerator.js';\nimport { optimizeStoredImages, formatImageDisplay } from './imageUtils.js';\nimport { renderAnalytics, clearDataCache } from './analytics.js';\nimport { forceSyncAllTabs } from './sync.js';\n\n// Função para validar dados antes da exportação\nfunction validateExportData(data, type) {\n  const errors = [];\n  \n  data.forEach((item, index) => {\n    if (!item.date) {\n      errors.push(`${type} #${index + 1}: Data inválida`);\n    }\n    if (!item.id) {\n      errors.push(`${type} #${index + 1}: ID inválido`);\n    }\n    \n    if (type === 'Entrega') {\n      if (!item.orderNumber) {\n        errors.push(`Entrega #${index + 1}: Número do pedido inválido`);\n      }\n      if (typeof item.fee !== 'number' && item.fee !== '') {\n        errors.push(`Entrega #${index + 1}: Taxa inválida`);\n      }\n    } else if (type === 'Gasolina') {\n      if (typeof item.amount !== 'number' && item.amount !== '') {\n        errors.push(`Gasolina #${index + 1}: Valor inválido`);\n      }\n    }\n  });\n  \n  return errors;\n}\n\n// Função para gerar CSV com os dados\nexport function generateCSV(includeGas = true) {\n  // Validar dados antes de exportar\n  const deliveryErrors = validateExportData(deliveries, 'Entrega');\n  const gasErrors = includeGas ? validateExportData(gasEntries, 'Gasolina') : [];\n  \n  const allErrors = [...deliveryErrors, ...gasErrors];\n  if (allErrors.length > 0) {\n    throw new Error(`Erros nos dados:\\n${allErrors.join('\\n')}`);\n  }\n  \n  const headers = ['Data', 'Tipo', 'ID', 'Número do Pedido', 'Valor Pedido', 'Valor Gasolina', 'Status', 'Imagem'];\n  const rows = [];\n  \n  // Adicionar entregas\n  deliveries.forEach(delivery => {\n    rows.push([\n      formatDate(delivery.date),\n      'Entrega',\n      delivery.id,\n      delivery.orderNumber,\n      delivery.fee,\n      '',\n      delivery.fee ? 'concluido' : 'pendente',\n      delivery.image || ''\n    ]);\n  });\n  \n  // Adicionar registros de gasolina se includeGas for true\n  if (includeGas) {\n    gasEntries.forEach(entry => {\n      rows.push([\n        formatDate(entry.date),\n        'Gasolina',\n        entry.id,\n        '',\n        '',\n        entry.amount,\n        'Pago',\n        entry.image || ''\n      ]);\n    });\n  }\n  \n  // Converter para CSV, escapando campos que possam conter vírgulas ou quebras de linha\n  return [\n    headers.join(','),\n    ...rows.map(row => row.map(field => {\n      // Se o campo contiver vírgulas, quebras de linha ou aspas, envolva em aspas\n      if (typeof field === 'string' && (field.includes(',') || field.includes('\\n') || field.includes('\"'))) {\n        return `\"${field.replace(/\"/g, '\"\"')}\"`;\n      }\n      return field;\n    }).join(','))\n  ].join('\\n');\n}\n\n// Função para fazer backup dos dados sem limpar\nexport function backupData(includeGas = true) {\n  try {\n    // Verificar se há dados para exportar\n    if (deliveries.length === 0 && (!includeGas || gasEntries.length === 0)) {\n      throw new Error('Não há dados para exportar');\n    }\n    \n    const date = new Date();\n    const { fileName } = generateDeliveryIdentifiers(date);\n    \n    // Gerar CSV\n    const csvContent = generateCSV(includeGas);\n    const csvBlob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const csvUrl = URL.createObjectURL(csvBlob);\n    \n    // Download do CSV\n    const link = document.createElement('a');\n    link.href = csvUrl;\n    link.download = `backup-${fileName}${includeGas ? '' : '-no-gas'}.csv`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(csvUrl);\n    \n    // Otimizar imagens armazenadas\n    optimizeStoredImages();\n    \n    const totalEntries = deliveries.length + (includeGas ? gasEntries.length : 0);\n    showToast(`Backup realizado com sucesso! ${totalEntries} registros exportados.`, 'success');\n  } catch (error) {\n    console.error('Erro ao fazer backup:', error);\n    showToast(error.message, 'error');\n  }\n}\n\n// Função para limpar todos os dados\nexport function clearAllData() {\n  if (!confirm('Tem certeza que deseja limpar todos os dados? Esta ação não pode ser desfeita.')) {\n    return;\n  }\n  \n  try {\n    // Perform complete data cleanup - clearing all browser storage\n    performCompleteDataCleanup();\n    \n    showToast('Todos os dados foram limpos com sucesso!', 'success');\n  } catch (error) {\n    console.error('Erro ao limpar dados:', error);\n    showToast(error.message, 'error');\n  }\n}\n\n/**\n * Performs a complete data cleanup, removing all data from browser storage\n * and resetting application state\n */\nfunction performCompleteDataCleanup() {\n  // Clear localStorage\n  localStorage.clear();\n  \n  // Clear sessionStorage\n  sessionStorage.clear();\n  \n  // Reset in-memory arrays\n  deliveries.length = 0;\n  gasEntries.length = 0;\n  \n  // Clear analytics cache\n  clearDataCache();\n  \n  // Clear any broadcast channels\n  try {\n    const syncChannel = new BroadcastChannel('entrega_financeira_sync');\n    syncChannel.postMessage({\n      type: 'FULL_CLEAR',\n      timestamp: Date.now()\n    });\n    syncChannel.close();\n  } catch (e) {\n    console.log('BroadcastChannel não disponível para limpeza');\n  }\n  \n  // Force cleanup of any object URLs\n  const images = document.querySelectorAll('img[src^=\"blob:\"]');\n  images.forEach(img => {\n    if (img.src.startsWith('blob:')) {\n      URL.revokeObjectURL(img.src);\n    }\n  });\n  \n  // Reload data (which will now be empty)\n  loadDeliveries();\n  loadGasEntries();\n  updateTotals();\n  \n  // Force tab sync\n  forceSyncAllTabs();\n}\n\n// Função para finalizar a semana\nexport function finishWeek() {\n  if (!confirm('Tem certeza que deseja finalizar a semana? Isso irá exportar e limpar todos os dados.')) {\n    return;\n  }\n\n  try {\n    // Verificar se há dados para exportar\n    if (deliveries.length === 0 && gasEntries.length === 0) {\n      throw new Error('Não há dados para exportar');\n    }\n    \n    const date = new Date();\n    const { fileName } = generateDeliveryIdentifiers(date);\n    const downloadFilename = `relatorio-${fileName}.csv`;\n    \n    // Gerar CSV\n    const csvContent = generateCSV(true);\n    const csvBlob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    \n    // Verificar se estamos em um dispositivo móvel\n    const isMobileDevice = window.innerWidth <= 768 || \n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    // Função para limpar dados após o download\n    const clearDataAfterExport = () => {\n      // Perform complete data cleanup\n      performCompleteDataCleanup();\n      \n      showToast('Semana finalizada com sucesso!', 'success');\n    };\n    \n    if (isMobileDevice) {\n      try {\n        // Para iOS Safari e alguns outros navegadores móveis\n        if (navigator.share && /iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n          // Criar um objeto de arquivo para compartilhar\n          const file = new File([csvBlob], downloadFilename, { type: 'text/csv' });\n          \n          navigator.share({\n            files: [file],\n            title: 'Exportação de dados semanal',\n            text: 'Relatório semanal do Sistema de Entregas'\n          }).then(() => {\n            clearDataAfterExport();\n          }).catch(err => {\n            console.error('Erro ao compartilhar arquivo:', err);\n            // Fallback para método tradicional\n            triggerDirectDownload(true);\n          });\n        } else {\n          // Fallback para download direto\n          triggerDirectDownload(true);\n        }\n      } catch (error) {\n        console.error('Erro específico para mobile:', error);\n        // Fallback para método tradicional\n        triggerDirectDownload(true);\n      }\n    } else {\n      // Método tradicional para desktop\n      triggerDirectDownload(true);\n    }\n    \n    // Função de fallback para download direto\n    function triggerDirectDownload(shouldClearData) {\n      const csvUrl = URL.createObjectURL(csvBlob);\n      const link = document.createElement('a');\n      link.href = csvUrl;\n      link.download = downloadFilename;\n      link.style.display = 'none';\n      document.body.appendChild(link);\n      link.click();\n      \n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(csvUrl);\n        \n        if (shouldClearData) {\n          clearDataAfterExport();\n        }\n      }, 300);\n    }\n  } catch (error) {\n    console.error('Erro ao finalizar semana:', error);\n    showToast(error.message, 'error');\n  }\n}\n\n// Função para gerar CSV sem imagens\nexport function generateCSVNoImages(includeGas = true) {\n  // Validar dados antes de exportar\n  const deliveryErrors = validateExportData(deliveries, 'Entrega');\n  const gasErrors = includeGas ? validateExportData(gasEntries, 'Gasolina') : [];\n  \n  const allErrors = [...deliveryErrors, ...gasErrors];\n  if (allErrors.length > 0) {\n    throw new Error(`Erros nos dados:\\n${allErrors.join('\\n')}`);\n  }\n  \n  // Remover a coluna de Imagem\n  const headers = ['Data', 'Tipo', 'ID', 'Número do Pedido', 'Valor Pedido', 'Valor Gasolina', 'Status'];\n  const rows = [];\n  \n  // Adicionar entregas\n  deliveries.forEach(delivery => {\n    rows.push([\n      formatDate(delivery.date),\n      'Entrega',\n      delivery.id,\n      delivery.orderNumber,\n      delivery.fee,\n      '',\n      delivery.fee ? 'concluido' : 'pendente'\n    ]);\n  });\n  \n  // Adicionar registros de gasolina se includeGas for true\n  if (includeGas) {\n    gasEntries.forEach(entry => {\n      rows.push([\n        formatDate(entry.date),\n        'Gasolina',\n        entry.id,\n        '',\n        '',\n        entry.amount,\n        'Pago'\n      ]);\n    });\n  }\n  \n  // Converter para CSV\n  return [\n    headers.join(','),\n    ...rows.map(row => row.map(field => {\n      if (typeof field === 'string' && (field.includes(',') || field.includes('\\n') || field.includes('\"'))) {\n        return `\"${field.replace(/\"/g, '\"\"')}\"`;\n      }\n      return field;\n    }).join(','))\n  ].join('\\n');\n}\n\n// Função para backup sem imagens em CSV\nexport function backupNoImagesCSV(includeGas = true) {\n  try {\n    if (deliveries.length === 0 && (!includeGas || gasEntries.length === 0)) {\n      throw new Error('Não há dados para exportar');\n    }\n    const date = new Date();\n    const { fileName } = generateDeliveryIdentifiers(date);\n\n    // Gerar CSV sem imagens\n    const csvContent = generateCSVNoImages(includeGas);\n    const csvBlob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const csvUrl = URL.createObjectURL(csvBlob);\n\n    // Download do CSV\n    const link = document.createElement('a');\n    link.href = csvUrl;\n    link.download = `backup-sem-imagens-${fileName}.csv`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(csvUrl);\n\n    const totalEntries = deliveries.length + (includeGas ? gasEntries.length : 0);\n    showToast(`Backup sem imagens realizado com sucesso! ${totalEntries} registros exportados.`, 'success');\n  } catch (error) {\n    console.error('Erro ao fazer backup sem imagens:', error);\n    showToast(error.message, 'error');\n  }\n}\n\n/**\n * Exibe o modal para seleção de opções de exportação CSV\n */\nexport function showExportModal() {\n  // Obter referência ao modal já existente no HTML\n  const modal = document.getElementById('exportModal');\n  if (!modal) {\n    console.error('Modal de exportação não encontrado');\n    return;\n  }\n  \n  // Exibir o modal\n  modal.style.display = 'flex';\n  \n  // Obter referências aos elementos do modal\n  const deliveriesCheckbox = document.getElementById('exportDeliveries');\n  const gasCheckbox = document.getElementById('exportGas');\n  const imagesCheckbox = document.getElementById('exportImages');\n  \n  const deliveriesGroup = document.getElementById('exportDeliveriesGroup');\n  const gasGroup = document.getElementById('exportGasGroup');\n  const imagesGroup = document.getElementById('exportImagesGroup');\n  \n  // Limpar listeners antigos para evitar duplicação\n  const newDeliveriesGroup = deliveriesGroup.cloneNode(true);\n  const newGasGroup = gasGroup.cloneNode(true);\n  const newImagesGroup = imagesGroup.cloneNode(true);\n  \n  deliveriesGroup.parentNode.replaceChild(newDeliveriesGroup, deliveriesGroup);\n  gasGroup.parentNode.replaceChild(newGasGroup, gasGroup);\n  imagesGroup.parentNode.replaceChild(newImagesGroup, imagesGroup);\n  \n  // Obter os novos checkboxes após a clonagem\n  const newDeliveriesCheckbox = document.getElementById('exportDeliveries');\n  const newGasCheckbox = document.getElementById('exportGas');\n  const newImagesCheckbox = document.getElementById('exportImages');\n  \n  // Adicionar evento de clique nos grupos completos para melhor experiência móvel\n  newDeliveriesGroup.addEventListener('click', (e) => {\n    if (e.target !== newDeliveriesCheckbox) {\n      newDeliveriesCheckbox.checked = !newDeliveriesCheckbox.checked;\n    }\n  });\n  \n  newGasGroup.addEventListener('click', (e) => {\n    if (e.target !== newGasCheckbox) {\n      newGasCheckbox.checked = !newGasCheckbox.checked;\n    }\n  });\n  \n  newImagesGroup.addEventListener('click', (e) => {\n    if (e.target !== newImagesCheckbox) {\n      newImagesCheckbox.checked = !newImagesCheckbox.checked;\n    }\n  });\n  \n  // Adicionar estilo para aumentar a área clicável\n  const styleGroups = [newDeliveriesGroup, newGasGroup, newImagesGroup];\n  styleGroups.forEach(group => {\n    group.style.cursor = 'pointer';\n    group.style.padding = '12px 8px';\n    group.style.margin = '8px 0';\n    group.style.borderRadius = '4px';\n    group.style.border = '1px solid #e0e0e0';\n    group.style.transition = 'background-color 0.2s';\n    \n    // Adicionar efeito hover com JavaScript para melhor desempenho\n    group.addEventListener('mouseover', () => {\n      group.style.backgroundColor = '#f5f5f5';\n    });\n    \n    group.addEventListener('mouseout', () => {\n      group.style.backgroundColor = '';\n    });\n  });\n  \n  // Limpar e adicionar event listeners para os botões\n  const cancelBtn = document.getElementById('cancelExport');\n  const confirmBtn = document.getElementById('confirmExport');\n  const exportImagesBtn = document.getElementById('exportOnlyImages');\n  \n  const newCancelBtn = cancelBtn.cloneNode(true);\n  const newConfirmBtn = confirmBtn.cloneNode(true);\n  const newExportImagesBtn = exportImagesBtn.cloneNode(true);\n  \n  cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);\n  confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);\n  exportImagesBtn.parentNode.replaceChild(newExportImagesBtn, exportImagesBtn);\n  \n  newCancelBtn.addEventListener('click', () => {\n    modal.style.display = 'none';\n  });\n  \n  newConfirmBtn.addEventListener('click', () => {\n    // Obter opções selecionadas\n    const includeDeliveries = document.getElementById('exportDeliveries').checked;\n    const includeGas = document.getElementById('exportGas').checked;\n    const includeImages = document.getElementById('exportImages').checked;\n    \n    // Validar que pelo menos um tipo de dado foi selecionado\n    if (!includeDeliveries && !includeGas) {\n      showToast('Selecione pelo menos um tipo de dado para exportar', 'error');\n      return;\n    }\n    \n    // Exportar com as opções selecionadas\n    exportCustomCSV(includeDeliveries, includeGas, includeImages);\n    \n    // Fechar o modal\n    modal.style.display = 'none';\n  });\n\n  // Adicionar evento para o botão de exportar somente imagens\n  newExportImagesBtn.addEventListener('click', async () => {\n    try {\n      // Fechamos o modal antes de mostrar o novo modal de imagens\n      modal.style.display = 'none';\n      \n      // Mostrar o modal de opções de exportação de imagens\n      showImagesExportModal();\n    } catch (error) {\n      console.error('Erro ao abrir modal de exportação de imagens:', error);\n      showToast(error.message, 'error');\n    }\n  });\n  \n  // Impedir que cliques na caixa modal propaguem para fechar o modal\n  const modalContent = modal.querySelector('.edit-modal');\n  modalContent.addEventListener('click', event => {\n    event.stopPropagation();\n  });\n  \n  // Fechar o modal ao clicar fora dele\n  modal.addEventListener('click', () => {\n    modal.style.display = 'none';\n  });\n}\n\n/**\n * Exporta dados para CSV com opções personalizadas\n * @param {boolean} includeDeliveries - Se deve incluir entregas\n * @param {boolean} includeGas - Se deve incluir abastecimentos\n * @param {boolean} includeImages - Se deve incluir referências às imagens\n */\nexport function exportCustomCSV(includeDeliveries = true, includeGas = true, includeImages = true) {\n  try {\n    // Usar todos os dados disponíveis\n    let filteredDeliveries = [...deliveries];\n    let filteredGasEntries = [...gasEntries];\n    \n    // Verificar se há dados para exportar\n    if (\n      (!includeDeliveries || filteredDeliveries.length === 0) && \n      (!includeGas || filteredGasEntries.length === 0)\n    ) {\n      throw new Error('Não há dados para exportar');\n    }\n    \n    // Definir cabeçalhos com base nas opções\n    let headers = ['Data', 'Tipo', 'ID', 'Número do Pedido', 'Valor Pedido'];\n    if (includeGas) headers.push('Valor Gasolina');\n    headers.push('Status');\n    if (includeImages) headers.push('Imagem');\n    \n    const rows = [];\n    \n    // Adicionar entregas filtradas se solicitado\n    if (includeDeliveries) {\n      filteredDeliveries.forEach(delivery => {\n        const row = [\n          formatDate(delivery.date),\n          'Entrega',\n          delivery.id,\n          delivery.orderNumber,\n          delivery.fee,\n        ];\n        \n        if (includeGas) row.push(''); // Coluna vazia para valor gasolina\n        \n        row.push(delivery.fee ? 'concluido' : 'pendente');\n        \n        if (includeImages) row.push(delivery.image || '');\n        \n        rows.push(row);\n      });\n    }\n    \n    // Adicionar registros de gasolina filtrados se solicitado\n    if (includeGas) {\n      filteredGasEntries.forEach(entry => {\n        const row = [\n          formatDate(entry.date),\n          'Gasolina',\n          entry.id,\n          '',\n          '',\n        ];\n        \n        if (includeGas) row.push(entry.amount);\n        \n        row.push('Pago');\n        \n        if (includeImages) row.push(entry.image || '');\n        \n        rows.push(row);\n      });\n    }\n    \n    // Converter para CSV\n    const csvContent = [\n      headers.join(','),\n      ...rows.map(row => row.map(field => {\n        if (typeof field === 'string' && (field.includes(',') || field.includes('\\n') || field.includes('\"'))) {\n          return `\"${field.replace(/\"/g, '\"\"')}\"`;\n        }\n        return field;\n      }).join(','))\n    ].join('\\n');\n    \n    // Gerar nome do arquivo\n    const date = new Date();\n    const { fileName } = generateDeliveryIdentifiers(date);\n    \n    // Criar sufixo para o nome do arquivo com base nas opções\n    let suffix = '';\n    if (!includeDeliveries) suffix += '-no-delivery';\n    if (!includeGas) suffix += '-no-gas';\n    if (!includeImages) suffix += '-no-images';\n    \n    // Nome do arquivo\n    const downloadFilename = `exportacao${suffix}-${fileName}.csv`;\n    \n    // Verificar se estamos em um dispositivo móvel\n    const isMobileDevice = window.innerWidth <= 768 || \n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    // Download do CSV - usar método diferente para mobile\n    const csvBlob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    \n    if (isMobileDevice) {\n      try {\n        // Para iOS Safari e alguns outros navegadores móveis\n        if (navigator.share && /iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n          // Criar um objeto de arquivo para compartilhar\n          const file = new File([csvBlob], downloadFilename, { type: 'text/csv' });\n          \n          navigator.share({\n            files: [file],\n            title: 'Exportação de dados',\n            text: 'Dados exportados do Sistema de Entregas'\n          }).then(() => {\n            showToast('Exportação concluída com sucesso!', 'success');\n          }).catch(err => {\n            console.error('Erro ao compartilhar arquivo:', err);\n            // Fallback para método tradicional\n            triggerDirectDownload();\n          });\n        } else {\n          // Fallback para download direto\n          triggerDirectDownload();\n        }\n      } catch (error) {\n        console.error('Erro específico para mobile:', error);\n        // Fallback para método tradicional\n        triggerDirectDownload();\n      }\n    } else {\n      // Método tradicional para desktop\n      triggerDirectDownload();\n    }\n    \n    // Função de fallback para download direto\n    function triggerDirectDownload() {\n      const csvUrl = URL.createObjectURL(csvBlob);\n      const link = document.createElement('a');\n      link.href = csvUrl;\n      link.download = downloadFilename;\n      link.style.display = 'none';\n      document.body.appendChild(link);\n      link.click();\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(csvUrl);\n      }, 100);\n    }\n    \n    // Otimizar imagens armazenadas se incluir imagens\n    if (includeImages) {\n      optimizeStoredImages();\n    }\n    \n    const totalEntries = \n      (includeDeliveries ? filteredDeliveries.length : 0) + \n      (includeGas ? filteredGasEntries.length : 0);\n      \n    showToast(`Exportação concluída com sucesso! ${totalEntries} registros exportados.`, 'success');\n  } catch (error) {\n    console.error('Erro ao exportar dados:', error);\n    showToast(error.message, 'error');\n  }\n}\n\n/**\n * Exporta apenas as imagens dos pedidos como um arquivo ZIP\n * @param {boolean} includeDeliveryImages - Se deve incluir imagens das entregas\n * @param {boolean} includeGasImages - Se deve incluir imagens dos abastecimentos\n */\nexport async function exportOnlyImages(includeDeliveryImages = true, includeGasImages = true) {\n  try {\n    // Verificar se o JSZip está disponível (adicionamos como dependência dinâmica)\n    if (typeof JSZip !== 'function') {\n      // Carregar JSZip dinamicamente se não estiver disponível\n      await loadJSZip();\n    }\n    \n    // Criar nova instância do JSZip\n    const zip = new JSZip();\n    let imageCount = 0;\n\n    // Adicionar imagens das entregas ao ZIP\n    if (includeDeliveryImages) {\n      deliveries.forEach(delivery => {\n        if (delivery.image) {\n          // Verificar o formato da imagem (otimizado ou completo)\n          const imageData = delivery.image.startsWith('data:') \n            ? delivery.image.split(',')[1]  // Extrair apenas os dados base64\n            : delivery.image;               // Já está em formato otimizado\n          \n          // Nome do arquivo: orderNumber_date.jpg\n          const fileName = `pedido_${delivery.orderNumber}_${delivery.date}.jpg`;\n          zip.file(fileName, imageData, { base64: true });\n          imageCount++;\n        }\n      });\n    }\n\n    // Adicionar imagens dos abastecimentos ao ZIP\n    if (includeGasImages) {\n      gasEntries.forEach((entry, index) => {\n        if (entry.image) {\n          // Verificar o formato da imagem\n          const imageData = entry.image.startsWith('data:') \n            ? entry.image.split(',')[1] \n            : entry.image;\n          \n          // Nome do arquivo: gas_date_index.jpg\n          const fileName = `gasolina_${entry.date}_${index + 1}.jpg`;\n          zip.file(fileName, imageData, { base64: true });\n          imageCount++;\n        }\n      });\n    }\n\n    // Verificar se há imagens para exportar\n    if (imageCount === 0) {\n      throw new Error('Não há imagens para exportar');\n    }\n\n    // Gerar nome do arquivo ZIP\n    const date = new Date();\n    const { fileName } = generateDeliveryIdentifiers(date);\n    let suffix = '';\n    if (!includeDeliveryImages) suffix += '-no-delivery';\n    if (!includeGasImages) suffix += '-no-gas';\n    const zipFileName = `imagens${suffix}-${fileName}.zip`;\n\n    // Gerar o arquivo ZIP\n    const zipBlob = await zip.generateAsync({ type: 'blob' });\n    \n    // Verificar se estamos em um dispositivo móvel\n    const isMobileDevice = window.innerWidth <= 768 || \n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    if (isMobileDevice) {\n      try {\n        // Para iOS Safari e outros navegadores móveis com suporte ao Web Share API\n        if (navigator.share && /iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n          const file = new File([zipBlob], zipFileName, { type: 'application/zip' });\n          \n          navigator.share({\n            files: [file],\n            title: 'Imagens Exportadas',\n            text: 'Imagens exportadas do Sistema de Entregas'\n          }).then(() => {\n            showToast(`Exportação de imagens concluída! ${imageCount} imagens exportadas.`, 'success');\n          }).catch(err => {\n            console.error('Erro ao compartilhar arquivo:', err);\n            // Fallback para download direto\n            downloadZipFile(zipBlob, zipFileName);\n          });\n        } else {\n          // Fallback para download direto\n          downloadZipFile(zipBlob, zipFileName);\n        }\n      } catch (error) {\n        console.error('Erro específico para mobile:', error);\n        downloadZipFile(zipBlob, zipFileName);\n      }\n    } else {\n      // Método tradicional para desktop\n      downloadZipFile(zipBlob, zipFileName);\n    }\n    \n    showToast(`Exportação de imagens concluída! ${imageCount} imagens exportadas.`, 'success');\n  } catch (error) {\n    console.error('Erro ao exportar imagens:', error);\n    showToast(error.message, 'error');\n  }\n}\n\n/**\n * Função auxiliar para fazer download do arquivo ZIP\n * @param {Blob} blob - Blob do arquivo ZIP\n * @param {string} fileName - Nome do arquivo para download\n */\nfunction downloadZipFile(blob, fileName) {\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = fileName;\n  link.style.display = 'none';\n  document.body.appendChild(link);\n  link.click();\n  setTimeout(() => {\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }, 100);\n}\n\n/**\n * Carrega a biblioteca JSZip dinamicamente\n * @returns {Promise} Promessa resolvida quando a biblioteca é carregada\n */\nfunction loadJSZip() {\n  return new Promise((resolve, reject) => {\n    // Verificar se o JSZip já está disponível\n    if (typeof JSZip === 'function') {\n      resolve();\n      return;\n    }\n    \n    // Criar elemento de script para carregar JSZip\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';\n    script.integrity = 'sha512-XMVd28F1oH/O71fzwBnV7HucLxVwtxf26XV8P4wPk26EDxuGZ91N8bsOttmnomcCD3CS5ZMRL50H0GgOHvegtg==';\n    script.crossOrigin = 'anonymous';\n    \n    script.onload = () => {\n      resolve();\n    };\n    \n    script.onerror = () => {\n      reject(new Error('Falha ao carregar biblioteca JSZip'));\n    };\n    \n    document.head.appendChild(script);\n  });\n}\n\n/**\n * Exibe o modal para seleção de opções de exportação de imagens\n */\nexport function showImagesExportModal() {\n  // Obter referência ao modal\n  const modal = document.getElementById('imagesExportModal');\n  if (!modal) {\n    console.error('Modal de exportação de imagens não encontrado');\n    return;\n  }\n  \n  // Exibir o modal\n  modal.style.display = 'flex';\n  \n  // Obter referências aos elementos do modal\n  const deliveryImagesCheckbox = document.getElementById('exportDeliveryImages');\n  const gasImagesCheckbox = document.getElementById('exportGasImages');\n  \n  const deliveryImagesGroup = document.getElementById('exportDeliveryImagesGroup');\n  const gasImagesGroup = document.getElementById('exportGasImagesGroup');\n  \n  // Limpar listeners antigos para evitar duplicação\n  const newDeliveryImagesGroup = deliveryImagesGroup.cloneNode(true);\n  const newGasImagesGroup = gasImagesGroup.cloneNode(true);\n  \n  deliveryImagesGroup.parentNode.replaceChild(newDeliveryImagesGroup, deliveryImagesGroup);\n  gasImagesGroup.parentNode.replaceChild(newGasImagesGroup, gasImagesGroup);\n  \n  // Obter os novos checkboxes após a clonagem\n  const newDeliveryImagesCheckbox = document.getElementById('exportDeliveryImages');\n  const newGasImagesCheckbox = document.getElementById('exportGasImages');\n  \n  // Adicionar evento de clique nos grupos completos para melhor experiência móvel\n  newDeliveryImagesGroup.addEventListener('click', (e) => {\n    if (e.target !== newDeliveryImagesCheckbox) {\n      newDeliveryImagesCheckbox.checked = !newDeliveryImagesCheckbox.checked;\n    }\n  });\n  \n  newGasImagesGroup.addEventListener('click', (e) => {\n    if (e.target !== newGasImagesCheckbox) {\n      newGasImagesCheckbox.checked = !newGasImagesCheckbox.checked;\n    }\n  });\n  \n  // Adicionar estilo para aumentar a área clicável\n  const styleGroups = [newDeliveryImagesGroup, newGasImagesGroup];\n  styleGroups.forEach(group => {\n    group.style.cursor = 'pointer';\n    group.style.padding = '12px 8px';\n    group.style.margin = '8px 0';\n    group.style.borderRadius = '4px';\n    group.style.border = '1px solid #e0e0e0';\n    group.style.transition = 'background-color 0.2s';\n    \n    // Adicionar efeito hover\n    group.addEventListener('mouseover', () => {\n      group.style.backgroundColor = '#f5f5f5';\n    });\n    \n    group.addEventListener('mouseout', () => {\n      group.style.backgroundColor = '';\n    });\n  });\n  \n  // Limpar e adicionar event listeners para os botões\n  const cancelBtn = document.getElementById('cancelImagesExport');\n  const confirmBtn = document.getElementById('confirmImagesExport');\n  \n  const newCancelBtn = cancelBtn.cloneNode(true);\n  const newConfirmBtn = confirmBtn.cloneNode(true);\n  \n  cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);\n  confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);\n  \n  newCancelBtn.addEventListener('click', () => {\n    modal.style.display = 'none';\n  });\n  \n  newConfirmBtn.addEventListener('click', async () => {\n    try {\n      // Obter opções selecionadas\n      const includeDeliveryImages = document.getElementById('exportDeliveryImages').checked;\n      const includeGasImages = document.getElementById('exportGasImages').checked;\n      \n      // Validar que pelo menos um tipo de imagem foi selecionado\n      if (!includeDeliveryImages && !includeGasImages) {\n        showToast('Selecione pelo menos um tipo de imagem para exportar', 'error');\n        return;\n      }\n      \n      // Fechar o modal antes de começar o processo\n      modal.style.display = 'none';\n      \n      // Mostrar toast informativo enquanto processa\n      showToast('Preparando imagens para exportação...', 'info');\n      \n      // Exportar imagens com as opções selecionadas\n      await exportOnlyImages(includeDeliveryImages, includeGasImages);\n    } catch (error) {\n      console.error('Erro ao exportar imagens:', error);\n      showToast(error.message, 'error');\n    }\n  });\n  \n  // Impedir que cliques na caixa modal propaguem para fechar o modal\n  const modalContent = modal.querySelector('.edit-modal');\n  modalContent.addEventListener('click', event => {\n    event.stopPropagation();\n  });\n  \n  // Fechar o modal ao clicar fora dele\n  modal.addEventListener('click', () => {\n    modal.style.display = 'none';\n  });\n} ","// Mobile utilities and optimizations\nimport { renderAnalytics } from './analytics.js';\nimport { importCSV } from './import.js';\nimport { exportCustomCSV, backupData, showExportModal } from './export.js';\nimport { showToast } from './utils.js';\n// Import specific functions instead of creating circular dependency\n// Don't import from mobileOptimizations.js here\n\n/**\n * Check if device is mobile\n * @returns {boolean} True if mobile device\n */\nexport function isMobileDevice() {\n  return window.innerWidth <= 768 || \n    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\n// Function to clean up resources moved from mobileOptimizations to avoid circular reference\nexport function cleanupUnusedResources() {\n  try {\n    // Clear any object URLs that might be hanging around\n    const images = document.querySelectorAll('img[src^=\"blob:\"]');\n    images.forEach(img => {\n      if (img.src.startsWith('blob:')) {\n        URL.revokeObjectURL(img.src);\n      }\n    });\n\n    // Clean up any unused canvas elements\n    const canvases = document.querySelectorAll('canvas');\n    canvases.forEach(canvas => {\n      if (!document.body.contains(canvas)) {\n        canvas.width = 0;\n        canvas.height = 0;\n      }\n    });\n\n    // Force browser to free memory if possible\n    if (window.gc) {\n      try {\n        window.gc();\n      } catch (e) {\n        console.log('Garbage collection not available');\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error cleaning up resources:', error);\n    return false;\n  }\n}\n\n// We'll implement basic memory optimizations here to avoid circular references\nexport function applyMemoryOptimizations() {\n  // Setup cleanup on file input focus\n  const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n  fileInputs.forEach(input => {\n    input.addEventListener('focus', () => {\n      // Clean up resources before opening file picker\n      cleanupUnusedResources();\n    });\n  });\n  \n  // Apply additional memory optimization logic as needed\n}\n\n// Function for handling file input issues\nexport function fixFileInputIssues() {\n  // Find all file inputs\n  const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n  fileInputs.forEach(input => {\n    // Remove capture attribute which can cause issues on some mobile browsers\n    input.removeAttribute('capture');\n    \n    // Ensure accept attribute is set correctly\n    if (input.accept && input.accept.includes('image')) {\n      input.accept = \"image/jpeg,image/png,image/webp,image/*;capture=camera\";\n    }\n  });\n}\n\n/**\n * Setup all mobile-specific optimizations\n */\nexport function setupMobileOptimizations() {\n  // Debounce resize operations for better performance\n  setupResizeHandlers();\n  \n  // Apply mobile-specific optimizations\n  if (isMobileDevice()) {\n    // Apply performance optimizations for low-end devices\n    optimizeForLowEndDevices();\n    \n    // Optimize scroll performance\n    optimizeScrollPerformance();\n    \n    // Fix viewport height issues on mobile browsers\n    fixMobileViewportHeight();\n    \n    // Setup mobile-specific file handling\n    setupMobileFileHandling();\n  }\n\n  // Apply memory optimizations for all devices (but with more aggressive settings for mobile)\n  applyMemoryOptimizations();\n  \n  // Fix file input issues that can cause memory problems\n  fixFileInputIssues();\n  \n  // Apply chart optimizations\n  setupChartOptimizations();\n}\n\n/**\n * Setup mobile-specific file handling for import/export\n */\nfunction setupMobileFileHandling() {\n  // Enhance import button for mobile\n  const importButton = document.getElementById('importButton');\n  const csvInput = document.getElementById('csvInput');\n  \n  if (importButton && csvInput) {\n    // Melhorar o input de arquivo para dispositivos móveis\n    // Expandir os tipos aceitos para garantir compatibilidade em diferentes dispositivos\n    csvInput.accept = \".csv,text/csv,text/comma-separated-values,application/csv,application/excel,application/vnd.ms-excel,application/vnd.msexcel,text/anytext,text/plain\";\n    \n    // Remover o atributo capture que pode estar limitando a seleção de arquivos\n    csvInput.removeAttribute('capture');\n    csvInput.setAttribute('multiple', 'false');\n\n    // Remover quaisquer listeners antigos para evitar duplicação\n    const newImportButton = importButton.cloneNode(true);\n    importButton.parentNode.replaceChild(newImportButton, importButton);\n    \n    const newCsvInput = csvInput.cloneNode(true);\n    csvInput.parentNode.replaceChild(newCsvInput, csvInput);\n\n    // Add memory cleanup before file selection\n    newImportButton.addEventListener('click', () => {\n      // Clean up any unused resources before opening file picker\n      cleanupUnusedResources();\n    });\n\n    // Criar um modal mais amigável para selecionar arquivos\n    const createFileSelectionModal = () => {\n      // Primeiro, remover qualquer modal antigo para evitar duplicação\n      const oldModal = document.getElementById('fileSelectionModal');\n      if (oldModal) {\n        document.body.removeChild(oldModal);\n      }\n      \n      // Criar o modal de seleção de arquivos\n      const fileModal = document.createElement('div');\n      fileModal.id = 'fileSelectionModal';\n      fileModal.className = 'modal-overlay';\n      fileModal.style.display = 'flex';\n      fileModal.innerHTML = `\n        <div class=\"edit-modal\">\n          <h2>Selecionar Arquivo</h2>\n          <div class=\"file-selection-container\">\n            <p>Selecione um arquivo CSV para importar:</p>\n            <div class=\"file-input-wrapper\">\n              <input type=\"file\" id=\"mobileFileInput\" accept=\".csv,text/csv,text/comma-separated-values,application/csv,application/excel,application/vnd.ms-excel,application/vnd.msexcel,text/anytext,text/plain\" class=\"mobile-file-input\">\n              <label for=\"mobileFileInput\" class=\"file-select-button\">\n                <i class=\"fas fa-file-upload\"></i>\n                Selecionar arquivo\n              </label>\n            </div>\n            <div id=\"selectedFileName\" class=\"selected-file-name\"></div>\n          </div>\n          <div class=\"modal-actions\">\n            <button type=\"button\" class=\"btn-cancel\" id=\"cancelFileSelection\">Cancelar</button>\n            <button type=\"button\" class=\"btn-update\" id=\"confirmFileSelection\" disabled>Importar</button>\n          </div>\n        </div>\n      `;\n      \n      document.body.appendChild(fileModal);\n      \n      // Configurar o input de arquivo móvel\n      const mobileFileInput = document.getElementById('mobileFileInput');\n      const selectedFileName = document.getElementById('selectedFileName');\n      const confirmFileSelection = document.getElementById('confirmFileSelection');\n      const cancelFileSelection = document.getElementById('cancelFileSelection');\n      \n      // Mostrar o nome do arquivo quando selecionado\n      mobileFileInput.addEventListener('change', (e) => {\n        if (e.target.files && e.target.files.length > 0) {\n          // Ocultar o card de seleção de arquivos\n          const fileInputWrapper = document.querySelector('.file-input-wrapper');\n          if (fileInputWrapper) {\n            fileInputWrapper.style.display = 'none';\n          }\n          \n          // Mostrar o nome do arquivo selecionado\n          selectedFileName.textContent = e.target.files[0].name;\n          \n          // Mostrar um alerta que o arquivo foi importado\n          alert(`Arquivo \"${e.target.files[0].name}\" selecionado para importação`);\n          \n          // Auto-importar após um breve delay\n          setTimeout(() => {\n            try {\n              // Importar o arquivo automaticamente\n              importCSV({\n                target: mobileFileInput,\n                file: mobileFileInput.files[0]\n              });\n              \n              // Fechar o modal após a importação\n              fileModal.style.display = 'none';\n              setTimeout(() => {\n                if (document.body.contains(fileModal)) {\n                  document.body.removeChild(fileModal);\n                }\n              }, 300);\n            } catch (err) {\n              console.error('Erro ao importar arquivo:', err);\n              showToast('Erro ao importar arquivo. Tente novamente.', 'error');\n            }\n          }, 500);\n        } else {\n          selectedFileName.textContent = '';\n          confirmFileSelection.disabled = true;\n        }\n      });\n      \n      // Add memory cleanup for the modal file input\n      mobileFileInput.addEventListener('focus', () => {\n        cleanupUnusedResources();\n      });\n      \n      // Remover o botão de confirmar já que agora importamos automaticamente\n      confirmFileSelection.style.display = 'none';\n      \n      // Melhorar o comportamento de clique no input\n      const fileInputWrapper = document.querySelector('.file-input-wrapper');\n      if (fileInputWrapper) {\n        fileInputWrapper.addEventListener('click', (e) => {\n          // Evitar que o evento de clique no wrapper cause conflito\n          e.stopPropagation();\n          \n          // Clean up resources before opening file picker\n          cleanupUnusedResources();\n          \n          // Focar e clicar no input de arquivo\n          if (mobileFileInput) {\n            mobileFileInput.focus();\n            mobileFileInput.click();\n          }\n        });\n      }\n      \n      // Botão para cancelar\n      cancelFileSelection.addEventListener('click', () => {\n        fileModal.style.display = 'none';\n        setTimeout(() => {\n          if (document.body.contains(fileModal)) {\n            document.body.removeChild(fileModal);\n          }\n        }, 300);\n      });\n      \n      // Fechar o modal quando clica fora\n      fileModal.addEventListener('click', (e) => {\n        if (e.target === fileModal) {\n          fileModal.style.display = 'none';\n          setTimeout(() => {\n            if (document.body.contains(fileModal)) {\n              document.body.removeChild(fileModal);\n            }\n          }, 300);\n        }\n      });\n    };\n    \n    // Override click handler to use mobile-friendly approach\n    newImportButton.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      \n      if (isMobileDevice()) {\n        createFileSelectionModal();\n      } else {\n        // Comportamento padrão para desktop\n        newCsvInput.click();\n      }\n    });\n    \n    // Add special handling for the file input on mobile\n    newCsvInput.addEventListener('change', (event) => {\n      if (event.target.files && event.target.files.length > 0) {\n        importCSV(event);\n      }\n    });\n  }\n  \n  // Enhance export button for mobile\n  const finishWeekButton = document.getElementById('finishWeekButton');\n  \n  if (finishWeekButton) {\n    const originalClickHandler = finishWeekButton.onclick;\n    finishWeekButton.onclick = (e) => {\n      if (isMobileDevice()) {\n        e.preventDefault();\n        \n        if (confirm('Tem certeza que deseja finalizar a semana? Isso irá exportar e limpar todos os dados.')) {\n          showExportModal();\n        }\n      } else if (originalClickHandler) {\n        originalClickHandler.call(finishWeekButton, e);\n      }\n    };\n  }\n  \n  // Make sure the export modal works on mobile\n  const exportModal = document.getElementById('exportModal');\n  const confirmExport = document.getElementById('confirmExport');\n  const cancelExport = document.getElementById('cancelExport');\n  \n  if (confirmExport) {\n    confirmExport.onclick = function() {\n      try {\n        const includeDeliveries = document.getElementById('exportDeliveries').checked;\n        const includeGas = document.getElementById('exportGas').checked;\n        const includeImages = document.getElementById('exportImages').checked;\n        \n        exportCustomCSV(includeDeliveries, includeGas, includeImages);\n        exportModal.style.display = 'none';\n      } catch (error) {\n        console.error('Error exporting on mobile:', error);\n      }\n    };\n  }\n  \n  if (cancelExport) {\n    cancelExport.onclick = function() {\n      exportModal.style.display = 'none';\n    };\n  }\n}\n\n/**\n * Setup resize handlers with debouncing\n */\nfunction setupResizeHandlers() {\n  let resizeTimer;\n  \n  window.addEventListener('resize', () => {\n    clearTimeout(resizeTimer);\n    document.body.classList.add('resize-transition-stopper');\n    \n    resizeTimer = setTimeout(() => {\n      document.body.classList.remove('resize-transition-stopper');\n      \n      // Re-render charts when in analytics tab\n      if (document.querySelector('.tab-content.active#analytics')) {\n        // Limpar cache antes de renderizar para atualizar adaptações de tela\n        if (typeof clearDataCache === 'function') {\n          clearDataCache();\n        }\n        renderAnalytics();\n      }\n    }, 250);\n  });\n}\n\n/**\n * Optimize for low-end devices by reducing animations\n */\nfunction optimizeForLowEndDevices() {\n  if (window.navigator.deviceMemory && window.navigator.deviceMemory < 4) {\n    document.documentElement.classList.add('reduce-motion');\n  }\n}\n\n/**\n * Optimize scroll performance with passive listeners and GPU acceleration\n */\nfunction optimizeScrollPerformance() {\n  let scrollTimer;\n  \n  document.addEventListener('scroll', () => {\n    clearTimeout(scrollTimer);\n    document.body.classList.add('is-scrolling');\n    \n    scrollTimer = setTimeout(() => {\n      document.body.classList.remove('is-scrolling');\n    }, 150);\n  }, { passive: true });\n}\n\n/**\n * Fix the 100vh issue on mobile browsers\n */\nfunction fixMobileViewportHeight() {\n  const appHeight = () => {\n    const doc = document.documentElement;\n    doc.style.setProperty('--app-height', `${window.innerHeight}px`);\n  };\n  \n  window.addEventListener('resize', appHeight);\n  appHeight(); // Initial call\n}\n\n/**\n * Setup scroll optimizations\n */\nfunction setupScrollOptimizations() {\n  let scrollTimer;\n  \n  window.addEventListener('scroll', () => {\n    const analyticsContainer = document.querySelector('.analytics-dashboard');\n    if (analyticsContainer) {\n      analyticsContainer.classList.add('is-scrolling');\n      \n      clearTimeout(scrollTimer);\n      scrollTimer = setTimeout(() => {\n        analyticsContainer.classList.remove('is-scrolling');\n      }, 150);\n    }\n  }, { passive: true });\n}\n\n/**\n * Setup touch interactions\n */\nfunction setupTouchInteractions() {\n  // Tornar cards clicáveis em dispositivos móveis\n  document.addEventListener('click', (e) => {\n    if (isMobileDevice()) {\n      const analyticsCard = e.target.closest('.analytics-card');\n      if (analyticsCard) {\n        const wasActive = analyticsCard.classList.contains('active-card');\n        \n        // Remover classe ativa de todos os cards\n        document.querySelectorAll('.analytics-card').forEach(card => {\n          card.classList.remove('active-card');\n        });\n        \n        // Adicionar classe ativa apenas ao card clicado (se não estava ativo antes)\n        if (!wasActive) {\n          analyticsCard.classList.add('active-card');\n        }\n      }\n    }\n  });\n}\n\n/**\n * Setup optimizations specific to the chart components\n */\nfunction setupChartOptimizations() {\n  // Add GPU acceleration to charts for smoother animations\n  const addGpuAcceleration = () => {\n    const charts = document.querySelectorAll('.pie-chart, .bar-chart, .line-chart, .summary-container');\n    charts.forEach(chart => {\n      chart.style.willChange = 'transform';\n      chart.style.transform = 'translateZ(0)';\n      \n      // Adicionar viewport hint para melhorar o carregamento em dispositivos móveis\n      if (isMobileDevice()) {\n        chart.setAttribute('loading', 'lazy');\n      }\n    });\n  };\n\n  // Call once at setup\n  if (document.readyState === 'complete') {\n    addGpuAcceleration();\n  } else {\n    window.addEventListener('load', addGpuAcceleration);\n  }\n\n  // Add listeners for tab changes to ensure charts are optimized\n  const tabButtons = document.querySelectorAll('.tab-button');\n  tabButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      if (button.dataset.tab === 'analytics') {\n        setTimeout(addGpuAcceleration, 100);\n      }\n    });\n  });\n}\n\n/**\n * Initialize all mobile optimizations\n */\nexport function initializeMobileOptimizations() {\n  setupResizeHandlers();\n  setupScrollOptimizations();\n  setupTouchInteractions();\n  setupChartOptimizations();\n  setupFastClick();\n  \n  if (isMobileDevice()) {\n    setupMobileFileHandling();\n  }\n}\n\n/**\n * Setup fast click for better touch response\n */\nfunction setupFastClick() {\n  if (isMobileDevice()) {\n    document.addEventListener('touchstart', function() {}, { passive: true });\n  }\n} ","// Image utilities and optimizations\nimport { isMobileDevice } from './mobile.js';\nimport { showToast } from './utils.js';\n\n/**\n * Check available storage space for image storage\n * @returns {boolean} True if sufficient storage is available\n */\nexport function checkStorageSpace() {\n  // Estimate current localStorage usage\n  let totalSize = 0;\n  for (let key in localStorage) {\n    if (localStorage.hasOwnProperty(key)) {\n      totalSize += (localStorage[key].length * 2) / 1024 / 1024; // Size in MB\n    }\n  }\n  \n  // Warn if storage is near limit (4MB is a conservative estimate for most browsers)\n  if (totalSize > 4) {\n    showToast('Armazenamento quase cheio. Considere fazer backup e limpar os dados antigos.', 'warning');\n    return false;\n  }\n  \n  return true;\n}\n\n/**\n * Compress an image for storage\n * @param {File} file - The image file to compress\n * @param {number} maxWidth - Maximum width to resize to\n * @param {number} quality - Compression quality (0-1)\n * @returns {Promise<string>} Base64 encoded compressed image\n */\nexport function compressImage(file, maxWidth = 800, quality = 0.7) {\n  return new Promise((resolve, reject) => {\n    // Create a unique object URL\n    const url = URL.createObjectURL(file);\n    const img = new Image();\n    \n    // Set up error handling first\n    img.onerror = () => {\n      // Clean up resources\n      URL.revokeObjectURL(url);\n      reject(new Error('Falha ao carregar a imagem'));\n    };\n    \n    img.onload = () => {\n      try {\n        // Create canvas for compression\n        const canvas = document.createElement('canvas');\n        let width = img.width;\n        let height = img.height;\n        \n        // Resize if necessary\n        if (width > maxWidth) {\n          height = Math.floor(height * (maxWidth / width));\n          width = maxWidth;\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        // Draw image on canvas\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // Convert to compressed format\n        canvas.toBlob((blob) => {\n          // Always release the object URL immediately after use\n          URL.revokeObjectURL(url);\n          \n          if (blob) {\n            const reader = new FileReader();\n            \n            reader.onloadend = () => {\n              // Ensure we're resolving with a valid result\n              if (reader.result) {\n                // Clean up to prevent memory leaks\n                canvas.width = 0;\n                canvas.height = 0;\n                resolve(reader.result);\n              } else {\n                reject(new Error('Resultado da compressão da imagem é inválido'));\n              }\n            };\n            \n            reader.onerror = (e) => {\n              reject(new Error(`Erro ao ler blob comprimido: ${e.message}`));\n            };\n            \n            reader.readAsDataURL(blob);\n          } else {\n            reject(new Error('Falha na compressão da imagem - blob nulo'));\n          }\n        }, 'image/jpeg', quality);\n      } catch (err) {\n        // Make sure to release the URL in case of error\n        URL.revokeObjectURL(url);\n        reject(new Error(`Erro ao processar imagem: ${err.message}`));\n      }\n    };\n    \n    // Start loading the image\n    img.src = url;\n  });\n}\n\n// Track ongoing image processing operations\nconst processingOperations = new Set();\n\n/**\n * Process and optimize an image for storage with mobile-specific settings\n * @param {File} file - The image file to process\n * @returns {Promise<string|null>} Base64 encoded processed image or null on error\n */\nexport async function processImageForStorage(file) {\n  if (!file) return null;\n  \n  // Generate a unique ID for this processing operation\n  const operationId = Date.now().toString() + Math.random().toString(36).substr(2, 9);\n  \n  // Register this operation\n  processingOperations.add(operationId);\n  \n  try {\n    // Force garbage collection between operations if possible\n    if (window.gc) {\n      try { window.gc(); } catch (e) { console.log('GC not available'); }\n    }\n    \n    // Validar tipo de arquivo\n    const validTypes = ['image/jpeg', 'image/png', 'image/webp'];\n    if (!validTypes.includes(file.type)) {\n      throw new Error('Tipo de arquivo não suportado. Use JPG, PNG ou WebP.');\n    }\n    \n    // Check max file size (5MB)\n    const MAX_FILE_SIZE = 5 * 1024 * 1024;\n    if (file.size > MAX_FILE_SIZE) {\n      showToast('Comprimindo imagem...', 'info');\n    }\n    \n    // Determine quality based on device and file size\n    const mobile = isMobileDevice();\n    \n    // Ajustar configurações para melhor performance em dispositivos móveis\n    let quality = mobile ? 0.5 : 0.7;  // Reduced from 0.6 to 0.5 for mobile\n    let maxWidth = mobile ? 600 : 1000;  // Reduced from 800 to 600 for mobile\n    \n    // Reduzir ainda mais para arquivos muito grandes\n    if (file.size > 3 * 1024 * 1024) { // Mais que 3MB\n      quality = mobile ? 0.3 : 0.5;  // Reduced from 0.4 to 0.3 for mobile\n      maxWidth = mobile ? 500 : 700;  // Reduced from 600 to 500 for mobile\n    }\n    \n    // Implementar compressão em etapas para arquivos muito grandes em dispositivos móveis\n    if (mobile && file.size > 2 * 1024 * 1024) {\n      // For very large files on mobile, do multi-step compression\n      let compressedImage = null;\n      \n      try {\n        // First step - more aggressive resizing\n        compressedImage = await compressImage(file, maxWidth * 0.8, quality);\n        \n        // Check if this operation is still valid\n        if (!processingOperations.has(operationId)) {\n          return null;\n        }\n        \n        // Create a new blob from the base64 string\n        const base64Response = await fetch(compressedImage);\n        const intermediateBlob = await base64Response.blob();\n        \n        // Second step - further compression \n        if (intermediateBlob.size > 1 * 1024 * 1024) {\n          compressedImage = await compressImage(\n            new File([intermediateBlob], file.name, { type: 'image/jpeg' }), \n            maxWidth * 0.7, \n            quality * 0.9\n          );\n        }\n      } catch (innerError) {\n        console.warn('Multi-step compression failed, falling back to standard compression', innerError);\n        // Fall back to standard compression\n      }\n      \n      // If multi-step compression succeeded, return the result\n      if (compressedImage) {\n        return compressedImage;\n      }\n      \n      // If it failed, proceed with standard compression\n    }\n    \n    // Check if this operation is still valid before proceeding\n    if (!processingOperations.has(operationId)) {\n      console.log('Operation cancelled - newer operation started');\n      return null;\n    }\n    \n    // Compress the image\n    const compressedImage = await compressImage(file, maxWidth, quality);\n    \n    if (!compressedImage) {\n      throw new Error('Falha ao processar a imagem. Tente novamente.');\n    }\n    \n    // Immediate cleanup to prevent memory leaks\n    cleanupAfterProcessing();\n    \n    return compressedImage;\n    \n  } catch (error) {\n    console.error('Erro ao processar imagem:', error);\n    \n    // Mensagens de erro mais específicas\n    if (error.name === 'QuotaExceededError') {\n      throw new Error('Armazenamento do dispositivo está cheio. Faça backup e limpe seus dados.');\n    } else if (error.name === 'NotReadableError') {\n      throw new Error('Não foi possível ler a imagem. Tente outra foto.');\n    } else if (error.message.includes('tipo de arquivo')) {\n      throw new Error(error.message);\n    } else if (isMobileDevice()) {\n      throw new Error('Erro ao processar a imagem. Tente uma foto menor ou use outro app de câmera.');\n    } else {\n      throw new Error('Erro ao processar a imagem. ' + error.message);\n    }\n  } finally {\n    // Clean up operation tracking\n    processingOperations.delete(operationId);\n    cleanupAfterProcessing();\n  }\n}\n\n/**\n * Performs cleanup after image processing to prevent memory leaks\n */\nfunction cleanupAfterProcessing() {\n  // Clean up object URLs\n  const images = document.querySelectorAll('img[src^=\"blob:\"]');\n  images.forEach(img => {\n    if (img.src.startsWith('blob:')) {\n      URL.revokeObjectURL(img.src);\n    }\n  });\n  \n  // Clean up any canvas elements created during processing\n  const canvases = document.querySelectorAll('canvas');\n  canvases.forEach(canvas => {\n    if (!document.body.contains(canvas)) {\n      canvas.width = 0;\n      canvas.height = 0;\n    }\n  });\n  \n  // Try to force garbage collection if possible\n  if (window.gc) {\n    try { window.gc(); } catch (e) { /* Ignore errors */ }\n  }\n}\n\n/**\n * Optimize all stored images by removing metadata\n */\nexport function optimizeStoredImages() {\n  try {\n    // Process deliveries\n    const deliveries = JSON.parse(localStorage.getItem('deliveries') || '[]');\n    if (deliveries && deliveries.length) {\n      let modified = false;\n      const updatedDeliveries = deliveries.map(delivery => {\n        if (delivery.image && delivery.image.length > 100000) { // If image is larger than ~100KB\n          // Remove metadata part of base64 to save space\n          const newEntry = {...delivery};\n          if (newEntry.image.startsWith('data:image')) {\n            newEntry.image = newEntry.image.replace(/^data:image\\/\\w+;base64,/, '');\n            modified = true;\n          }\n          return newEntry;\n        }\n        return delivery;\n      });\n      \n      if (modified) {\n        localStorage.setItem('deliveries', JSON.stringify(updatedDeliveries));\n      }\n    }\n    \n    // Process gas entries\n    const gasEntries = JSON.parse(localStorage.getItem('gasEntries') || '[]');\n    if (gasEntries && gasEntries.length) {\n      let modified = false;\n      const updatedGasEntries = gasEntries.map(entry => {\n        if (entry.image && entry.image.length > 100000) {\n          const newEntry = {...entry};\n          if (newEntry.image.startsWith('data:image')) {\n            newEntry.image = newEntry.image.replace(/^data:image\\/\\w+;base64,/, '');\n            modified = true;\n          }\n          return newEntry;\n        }\n        return entry;\n      });\n      \n      if (modified) {\n        localStorage.setItem('gasEntries', JSON.stringify(updatedGasEntries));\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao otimizar imagens:', error);\n    return false;\n  }\n}\n\n/**\n * Format image for display, ensuring proper base64 format\n * @param {string} imageSrc - The image source (potentially optimized without header)\n * @returns {string} Full image display HTML or text\n */\nexport function formatImageDisplay(imageSrc) {\n  if (!imageSrc) return 'Sem comprovante';\n  \n  // Check if image is in optimized format (without data:image header)\n  const imageUrl = imageSrc.startsWith('data:') \n    ? imageSrc \n    : `data:image/jpeg;base64,${imageSrc}`;\n  \n  return `<img src=\"${imageUrl}\" alt=\"Preview\" class=\"table-image\" onclick=\"showImageModal(this.src)\">`;\n}\n\n/**\n * Display an image in a modal with mobile touch support\n * @param {string} src - Base64 image data\n */\nexport function showImageModal(src) {\n  if (!src) {\n    console.log('Imagem não disponível para visualização');\n    showToast('Imagem não disponível para este pedido', 'warning');\n    return;\n  }\n  \n  try {\n    const modal = document.getElementById('imageModal');\n    if (!modal) {\n      console.error('Modal de imagem não encontrado');\n      return;\n    }\n    \n    const modalImg = document.getElementById('modalImage');\n    const zoomLevel = document.querySelector('.zoom-level');\n    const zoomInButton = document.getElementById('zoomIn');\n    const zoomOutButton = document.getElementById('zoomOut');\n    \n    if (!modalImg) {\n      console.error('Elemento de imagem modal não encontrado');\n      return;\n    }\n    \n    // Reset zoom state on opening\n    resetZoomState();\n    \n    // Add data URL prefix if not present\n    const imageUrl = src.startsWith('data:image') ? src : `data:image/jpeg;base64,${src}`;\n    \n    // Set image source\n    modalImg.src = imageUrl;\n    \n    // Create high quality mode toggle\n    setupHighQualityMode(modal, modalImg, imageUrl);\n    \n    modal.style.display = 'block';\n    \n    // Add show class after a small delay to trigger transition\n    setTimeout(() => {\n      modal.classList.add('show');\n    }, 10);\n    \n    // Set up zoom buttons\n    if (zoomInButton) {\n        zoomInButton.onclick = function() {\n            updateZoom(currentScale + 0.5);\n        };\n    }\n    \n    if (zoomOutButton) {\n        zoomOutButton.onclick = function() {\n            updateZoom(currentScale - 0.5);\n        };\n    }\n    \n    // Set up touch events for mobile\n    setupTouchEvents(modalImg);\n    \n    // Set up click outside to close\n    modal.onclick = function(event) {\n        if (event.target === modal && !isZooming && !isDragging) {\n            closeImageModal();\n        }\n    };\n    \n    // Set up keyboard event for escape key\n    const escKeyHandler = function(event) {\n        if (event.key === 'Escape') {\n            closeImageModal();\n            document.removeEventListener('keydown', escKeyHandler);\n        }\n    };\n    document.addEventListener('keydown', escKeyHandler);\n    \n    console.log('Imagem aberta no modal com sucesso');\n  } catch (error) {\n    console.error('Erro ao abrir imagem no modal:', error);\n    showToast('Erro ao abrir a imagem', 'error');\n  }\n}\n\n// Variables for tracking image zoom and pan state\nlet currentScale = 1;\nlet maxScale = 5;  // Maximum zoom level\nlet minScale = 0.5;  // Minimum zoom level\nlet startX = 0;\nlet startY = 0;\nlet initialDistance = 0;\nlet initialScale = 1;\nlet offsetX = 0;\nlet offsetY = 0;\nlet lastTapTime = 0;\nlet isZooming = false;\nlet isDragging = false;\n\n// Variables for tracking high quality mode\nlet isHighQualityMode = false;\nlet originalSrc = null;\nlet highQualitySrc = null;\n\n// Set up all touch events for mobile\nfunction setupTouchEvents(element) {\n    // Touch start event\n    element.addEventListener('touchstart', handleTouchStart, { passive: false });\n    \n    // Touch move event\n    element.addEventListener('touchmove', handleTouchMove, { passive: false });\n    \n    // Touch end event\n    element.addEventListener('touchend', handleTouchEnd, { passive: false });\n    \n    // Add mouse wheel support for desktop\n    element.addEventListener('wheel', handleMouseWheel, { passive: false });\n}\n\n// Handle touch start\nfunction handleTouchStart(e) {\n    e.preventDefault();\n    \n    const modal = document.getElementById('imageModal');\n    \n    if (e.touches.length === 1) {\n        // Single touch - prepare for drag or double tap\n        startX = e.touches[0].clientX - offsetX;\n        startY = e.touches[0].clientY - offsetY;\n        \n        // Check for double tap\n        const currentTime = new Date().getTime();\n        const tapLength = currentTime - lastTapTime;\n        \n        if (tapLength < 300 && tapLength > 0) {\n            // Double tap detected\n            if (currentScale > 1) {\n                // If zoomed in, reset zoom\n                resetZoomState();\n            } else {\n                // If at normal zoom, zoom in to 2x\n                updateZoom(2);\n            }\n            e.preventDefault();\n        }\n        \n        lastTapTime = currentTime;\n        isDragging = true;\n        \n        // Add visual feedback for dragging\n        if (currentScale > 1 && modal) {\n            modal.classList.add('dragging');\n        }\n        \n    } else if (e.touches.length === 2) {\n        // Pinch gesture started\n        isZooming = true;\n        isDragging = false;\n        \n        // Calculate distance between two touch points\n        const dx = e.touches[0].clientX - e.touches[1].clientX;\n        const dy = e.touches[0].clientY - e.touches[1].clientY;\n        initialDistance = Math.sqrt(dx * dx + dy * dy);\n        initialScale = currentScale;\n        \n        // Add visual feedback for zooming\n        if (modal) {\n            modal.classList.add('zooming');\n        }\n    }\n}\n\n// Handle touch move\nfunction handleTouchMove(e) {\n    e.preventDefault();\n    \n    if (isZooming && e.touches.length === 2) {\n        // Handle pinch zoom\n        const dx = e.touches[0].clientX - e.touches[1].clientX;\n        const dy = e.touches[0].clientY - e.touches[1].clientY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        // Calculate new scale based on how much fingers moved\n        let newScale = initialScale * (distance / initialDistance);\n        \n        // Ensure scale stays within bounds\n        newScale = Math.max(minScale, Math.min(maxScale, newScale));\n        \n        updateZoom(newScale);\n        \n    } else if (isDragging && e.touches.length === 1 && currentScale > 1) {\n        // Only allow dragging when zoomed in\n        const x = e.touches[0].clientX - startX;\n        const y = e.touches[0].clientY - startY;\n        \n        // Apply movement constraints based on zoom level\n        const modalImage = document.getElementById('modalImage');\n        const imgWidth = modalImage.width * currentScale;\n        const imgHeight = modalImage.height * currentScale;\n        const containerWidth = window.innerWidth;\n        const containerHeight = window.innerHeight;\n        \n        // Calculate maximum allowed drag distance\n        const maxX = Math.max(0, (imgWidth - containerWidth) / 2);\n        const maxY = Math.max(0, (imgHeight - containerHeight) / 2);\n        \n        // Apply constraints\n        offsetX = Math.max(-maxX, Math.min(maxX, x));\n        offsetY = Math.max(-maxY, Math.min(maxY, y));\n        \n        // Apply transform\n        applyTransform();\n    }\n}\n\n// Handle touch end\nfunction handleTouchEnd(e) {\n    const modal = document.getElementById('imageModal');\n    \n    // Remove visual feedback classes\n    if (modal) {\n        modal.classList.remove('dragging', 'zooming');\n    }\n    \n    isZooming = false;\n    \n    // Small timeout before disabling dragging to prevent unwanted clicks\n    setTimeout(() => {\n        isDragging = false;\n    }, 100);\n}\n\n// Handle mouse wheel for desktop zoom\nfunction handleMouseWheel(e) {\n    e.preventDefault();\n    \n    // Determine zoom direction based on wheel delta\n    const delta = Math.sign(e.deltaY) * -0.2;\n    \n    // Apply zoom centered on mouse position\n    const newScale = Math.max(minScale, Math.min(maxScale, currentScale + delta));\n    \n    // Only update if scale actually changed\n    if (newScale !== currentScale) {\n        const modal = document.getElementById('imageModal');\n        if (modal) {\n            // Add visual feedback\n            modal.classList.add('zooming');\n            \n            // Remove class after transition completes\n            setTimeout(() => {\n                modal.classList.remove('zooming');\n            }, 300);\n        }\n        \n        // Update zoom level\n        updateZoom(newScale);\n    }\n}\n\n// Update zoom level\nfunction updateZoom(newScale) {\n    // Clamp scale to min/max values\n    currentScale = Math.max(minScale, Math.min(maxScale, newScale));\n    \n    // Update the zoom level display\n    const zoomLevel = document.querySelector('.zoom-level');\n    if (zoomLevel) {\n        zoomLevel.textContent = `${Math.round(currentScale * 100)}%`;\n    }\n    \n    // If scale is reset to 1, reset offsets too\n    if (currentScale <= 1) {\n        offsetX = 0;\n        offsetY = 0;\n    }\n    \n    // Apply the transform\n    applyTransform();\n}\n\n// Apply transform to the image\nfunction applyTransform() {\n    const modalImage = document.getElementById('modalImage');\n    if (modalImage) {\n        modalImage.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(${currentScale})`;\n    }\n}\n\n// Reset zoom state\nfunction resetZoomState() {\n    currentScale = 1;\n    offsetX = 0;\n    offsetY = 0;\n    isZooming = false;\n    isDragging = false;\n    \n    // Update the zoom level display\n    const zoomLevel = document.querySelector('.zoom-level');\n    if (zoomLevel) {\n        zoomLevel.textContent = '100%';\n    }\n    \n    // Reset transform\n    const modalImage = document.getElementById('modalImage');\n    if (modalImage) {\n        modalImage.style.transform = 'translate(0px, 0px) scale(1)';\n    }\n}\n\n// Close image modal with cleanup for high quality mode\nfunction closeImageModal() {\n    const modal = document.getElementById('imageModal');\n    const modalImg = document.getElementById('modalImage');\n    const highQualityToggle = document.getElementById('highQualityToggle');\n    \n    if (modal) {\n        // Remove visual feedback classes\n        modal.classList.remove('show', 'dragging', 'zooming');\n        \n        // Clean up touch and mouse event listeners\n        if (modalImg) {\n            modalImg.removeEventListener('touchstart', handleTouchStart);\n            modalImg.removeEventListener('touchmove', handleTouchMove);\n            modalImg.removeEventListener('touchend', handleTouchEnd);\n            modalImg.removeEventListener('wheel', handleMouseWheel);\n        }\n        \n        // Remove button event listeners\n        const zoomInButton = document.getElementById('zoomIn');\n        const zoomOutButton = document.getElementById('zoomOut');\n        \n        if (zoomInButton) zoomInButton.onclick = null;\n        if (zoomOutButton) zoomOutButton.onclick = null;\n        if (highQualityToggle) highQualityToggle.onclick = null;\n        \n        // Clean up memory\n        originalSrc = null;\n        highQualitySrc = null;\n        isHighQualityMode = false;\n        \n        setTimeout(() => {\n            modal.style.display = 'none';\n            modal.onclick = null; // Remove click handler\n            \n            // Reset zoom when closing\n            resetZoomState();\n        }, 300);\n    }\n}\n\n/**\n * Sets up high quality mode toggle and functionality\n * @param {HTMLElement} modal - The modal element\n * @param {HTMLImageElement} modalImg - The modal image element\n * @param {string} imageUrl - The original image URL\n */\nfunction setupHighQualityMode(modal, modalImg, imageUrl) {\n  // Create high quality toggle if it doesn't exist\n  let highQualityToggle = document.getElementById('highQualityToggle');\n  \n  if (!highQualityToggle) {\n    // Create the container for high quality toggle\n    const qualityControlsContainer = document.createElement('div');\n    qualityControlsContainer.className = 'quality-controls';\n    \n    // Create toggle button\n    highQualityToggle = document.createElement('button');\n    highQualityToggle.id = 'highQualityToggle';\n    highQualityToggle.title = 'Alternar modo de alta qualidade';\n    highQualityToggle.innerHTML = '<i class=\"fas fa-glasses\"></i> Alta Qualidade';\n    \n    // Add the toggle to container\n    qualityControlsContainer.appendChild(highQualityToggle);\n    \n    // Add container to modal\n    modal.appendChild(qualityControlsContainer);\n  }\n  \n  // Reset high quality mode state\n  isHighQualityMode = false;\n  originalSrc = imageUrl;\n  highQualitySrc = null;\n  \n  // Set appropriate classes based on initial state\n  highQualityToggle.classList.remove('active');\n  highQualityToggle.innerHTML = '<i class=\"fas fa-glasses\"></i> Alta Qualidade';\n  \n  // Set up click handler for toggle\n  highQualityToggle.onclick = function(event) {\n    event.stopPropagation(); // Prevent closing modal\n    toggleHighQualityMode(modalImg, highQualityToggle);\n  };\n}\n\n/**\n * Toggles between normal and high quality image modes\n * @param {HTMLImageElement} modalImg - The modal image element\n * @param {HTMLButtonElement} toggleButton - The high quality toggle button\n */\nfunction toggleHighQualityMode(modalImg, toggleButton) {\n  // Toggle state\n  isHighQualityMode = !isHighQualityMode;\n  \n  if (isHighQualityMode) {\n    // Show loading indicator\n    modalImg.classList.add('loading');\n    toggleButton.disabled = true;\n    toggleButton.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Carregando...';\n    \n    // If we haven't created the high quality version yet\n    if (!highQualitySrc) {\n      // Create high quality version - enhanced clarity with sharpening\n      createHighQualityVersion(originalSrc).then(enhancedSrc => {\n        highQualitySrc = enhancedSrc;\n        if (isHighQualityMode) { // Check state again in case user switched back quickly\n          modalImg.src = highQualitySrc;\n          toggleButton.innerHTML = '<i class=\"fas fa-glasses\"></i> Modo Normal';\n          toggleButton.classList.add('active');\n        }\n        modalImg.classList.remove('loading');\n        toggleButton.disabled = false;\n      }).catch(error => {\n        console.error('Erro ao criar versão de alta qualidade:', error);\n        isHighQualityMode = false;\n        modalImg.src = originalSrc;\n        modalImg.classList.remove('loading');\n        toggleButton.disabled = false;\n        toggleButton.innerHTML = '<i class=\"fas fa-glasses\"></i> Alta Qualidade';\n        toggleButton.classList.remove('active');\n        showToast('Não foi possível melhorar a qualidade da imagem', 'error');\n      });\n    } else {\n      // Use already created high quality version\n      modalImg.src = highQualitySrc;\n      modalImg.classList.remove('loading');\n      toggleButton.disabled = false;\n      toggleButton.innerHTML = '<i class=\"fas fa-glasses\"></i> Modo Normal';\n      toggleButton.classList.add('active');\n    }\n  } else {\n    // Switch back to original version\n    modalImg.src = originalSrc;\n    toggleButton.innerHTML = '<i class=\"fas fa-glasses\"></i> Alta Qualidade';\n    toggleButton.classList.remove('active');\n  }\n  \n  // Reset zoom after changing image\n  resetZoomState();\n}\n\n/**\n * Creates a high quality version of the image\n * @param {string} imageUrl - The original image URL\n * @returns {Promise<string>} A promise that resolves to the enhanced image URL\n */\nfunction createHighQualityVersion(imageUrl) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = new Image();\n      \n      img.onload = function() {\n        try {\n          // Create a canvas with the original image dimensions\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          \n          // Set canvas size to match image, but at least 1200px wide for better quality\n          const targetWidth = Math.max(img.width, 1200);\n          const scale = targetWidth / img.width;\n          canvas.width = targetWidth;\n          canvas.height = img.height * scale;\n          \n          // Enable image smoothing for better upscaling\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'high';\n          \n          // Draw the image at the larger size\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          \n          // Apply sharpening filter for better clarity\n          applySharpening(ctx, canvas.width, canvas.height);\n          \n          // Convert to high quality JPEG\n          canvas.toBlob(blob => {\n            if (blob) {\n              const reader = new FileReader();\n              reader.onloadend = () => resolve(reader.result);\n              reader.onerror = err => reject(err);\n              reader.readAsDataURL(blob);\n            } else {\n              reject(new Error('Failed to create blob'));\n            }\n          }, 'image/jpeg', 0.95); // High quality setting\n        } catch (err) {\n          reject(err);\n        }\n      };\n      \n      img.onerror = () => reject(new Error('Failed to load image'));\n      \n      // Load the image\n      img.src = imageUrl;\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Applies a sharpening filter to the canvas context\n * @param {CanvasRenderingContext2D} ctx - The canvas context\n * @param {number} width - The canvas width\n * @param {number} height - The canvas height\n */\nfunction applySharpening(ctx, width, height) {\n  try {\n    // Get image data\n    const imageData = ctx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    \n    // Simple sharpening convolution\n    const sharpen = (data, width, height, factor = 0.5) => {\n      // Create a copy of the original data\n      const tempData = new Uint8ClampedArray(data);\n      \n      // Apply convolution to each pixel (except edges)\n      for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n          const idx = (y * width + x) * 4;\n          \n          // For each RGB channel (skip alpha)\n          for (let c = 0; c < 3; c++) {\n            const currentPixel = tempData[idx + c];\n            \n            // Get surrounding pixels\n            const top = tempData[idx - width * 4 + c];\n            const bottom = tempData[idx + width * 4 + c];\n            const left = tempData[idx - 4 + c];\n            const right = tempData[idx + 4 + c];\n            \n            // Apply sharpening: 5×center - surrounding pixels\n            const sharpened = 5 * currentPixel - top - bottom - left - right;\n            \n            // Blend original with sharpened using factor\n            data[idx + c] = Math.min(255, Math.max(0, \n              currentPixel + (sharpened - currentPixel) * factor\n            ));\n          }\n        }\n      }\n    };\n    \n    // Apply sharpening\n    sharpen(data, width, height, 0.3);\n    \n    // Put the modified image data back\n    ctx.putImageData(imageData, 0, 0);\n  } catch (err) {\n    console.error('Error applying sharpening:', err);\n    // Continue without sharpening if there's an error\n  }\n} ","// Função para obter a data atual no formato YYYY-MM-DD\nexport function getCurrentDate() {\n  const now = new Date();\n  return now.toLocaleDateString('en-CA'); // Returns YYYY-MM-DD in local timezone\n}\n\n// Função para formatar uma data para exibição\nexport function formatDate(dateString) {\n  if (!dateString) return '';\n  const date = new Date(dateString + 'T12:00:00'); // Add noon time to avoid timezone issues\n  if (isNaN(date.getTime())) return '';\n  \n  return date.toLocaleDateString('pt-BR'); // Returns DD/MM/YYYY in Brazilian format\n}\n\n// Função para normalizar uma data para o formato YYYY-MM-DD\nexport function normalizeDate(dateString) {\n  if (!dateString) return '';\n  const date = new Date(dateString + 'T12:00:00'); // Add noon time to avoid timezone issues\n  if (isNaN(date.getTime())) return '';\n  \n  return date.toLocaleDateString('en-CA'); // Returns YYYY-MM-DD consistently\n}\n\n// Função para formatar valores monetários\nexport function formatCurrency(value) {\n  if (isNaN(value)) return '0,00';\n  \n  return value\n    .toFixed(2)\n    .replace('.', ',')\n    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1.');\n}\n\n// Função para obter nome do dia da semana\nexport function getWeekdayName(dateString) {\n  const date = new Date(dateString + 'T00:00:00');\n  const weekdays = [\n    \"Domingo\", \"Segunda\", \"Terça\", \"Quarta\",\n    \"Quinta\", \"Sexta\", \"Sábado\"\n  ];\n  return weekdays[date.getDay()];\n}\n\n// Função para converter data do CSV\nexport function parseCSVDate(dateStr) {\n  if (!dateStr) return '';\n  const [day, month, year] = dateStr.split('/');\n  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n}\n\n// Função para mostrar notificações toast\nexport function showToast(message, type = 'info', duration = 3000) {\n  const toast = document.createElement('div');\n  toast.className = `toast toast-${type}`;\n  toast.textContent = message;\n  \n  document.body.appendChild(toast);\n  \n  setTimeout(() => {\n    toast.classList.add('show');\n  }, 100);\n  \n  // If duration is 0, don't auto-hide the toast\n  if (duration !== 0) {\n    setTimeout(() => {\n      toast.classList.remove('show');\n      setTimeout(() => {\n        if (document.body.contains(toast)) {\n          document.body.removeChild(toast);\n        }\n      }, 300);\n    }, duration);\n  }\n  \n  return toast;\n}\n\n// Função para resolver caminhos relativos considerando o GitHub Pages\nexport function getResourcePath(path) {\n  // Se a função global existir (definida em index.html), use-a\n  if (window.getResourcePath) {\n    return window.getResourcePath(path);\n  }\n  \n  // Caso contrário, implemente a lógica aqui\n  if (!path) return path;\n  if (path.startsWith('http') || path.startsWith('//') || path.startsWith('data:')) return path;\n  \n  const basePath = window.__APP_BASE_PATH || '/';\n  // Remove leading slash if exists to avoid double slashes\n  const cleanPath = path.startsWith('/') ? path.substring(1) : path;\n  return basePath + cleanPath;\n}\n\n// Export image handling functions from imageUtils.js\nexport { \n  compressImage, \n  checkStorageSpace, \n  processImageForStorage, \n  showImageModal,\n  formatImageDisplay,\n  optimizeStoredImages\n} from './imageUtils.js';\n\n// Export mobile detection from mobile.js\nexport { isMobileDevice } from './mobile.js';\n\n// Função para verificar se há entregas duplicadas\nexport function checkDuplicateDelivery(orderNumber, date, deliveries, excludeId = null) {\n  const normalizedDate = normalizeDate(date);\n  return deliveries.some(delivery => \n    delivery.orderNumber === orderNumber && \n    delivery.date === normalizedDate &&\n    (!excludeId || delivery.id !== excludeId)\n  );\n} ","/**\n * Valida os dados do pedido\n * @param {Object} orderData - Dados do pedido a serem validados\n * @returns {string|null} Mensagem de erro ou null se válido\n */\nexport function validateOrder(orderData) {\n  // Validação do número do pedido\n  if (!orderData.orderNumber?.trim()) {\n    return 'O número do pedido é obrigatório';\n  }\n\n  // Validação da data\n  if (!orderData.date) {\n    return 'A data é obrigatória';\n  }\n\n  // Validação do formato da data (YYYY-MM-DD)\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(orderData.date)) {\n    return 'Formato de data inválido. Use YYYY-MM-DD';\n  }\n\n  // Validação da taxa (se fornecida)\n  if (orderData.fee !== undefined && orderData.fee !== null && orderData.fee !== '') {\n    const fee = parseFloat(orderData.fee);\n    if (isNaN(fee)) {\n      return 'Taxa inválida';\n    }\n    if (fee < 0) {\n      return 'A taxa não pode ser negativa';\n    }\n  }\n\n  // Validação da imagem\n  if (!orderData.image) {\n    return 'O comprovante é obrigatório';\n  }\n\n  // Se chegou até aqui, não há erros\n  return null;\n}\n\n/**\n * Valida os dados de gasolina\n * @param {Object} gasData - Dados de gasolina a serem validados\n * @returns {string|null} Mensagem de erro ou null se válido\n */\nexport function validateGasEntry(gasData) {\n  // Validação da data\n  if (!gasData.date) {\n    return 'A data é obrigatória';\n  }\n\n  // Validação do formato da data (YYYY-MM-DD)\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(gasData.date)) {\n    return 'Formato de data inválido. Use YYYY-MM-DD';\n  }\n\n  // Validação do valor\n  if (!gasData.amount) {\n    return 'O valor é obrigatório';\n  }\n\n  const amount = parseFloat(gasData.amount);\n  if (isNaN(amount)) {\n    return 'Valor inválido';\n  }\n\n  if (amount <= 0) {\n    return 'O valor deve ser maior que zero';\n  }\n\n  // Se chegou até aqui, não há erros\n  return null;\n}\n\n/**\n * Valida o formato de uma data\n * @param {string} date - Data a ser validada\n * @returns {boolean} true se a data é válida\n */\nexport function isValidDate(date) {\n  // Verifica o formato YYYY-MM-DD\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(date)) {\n    return false;\n  }\n\n  // Verifica se é uma data válida\n  const d = new Date(date);\n  if (isNaN(d.getTime())) {\n    return false;\n  }\n\n  // Verifica se não é uma data futura\n  const today = new Date();\n  today.setHours(23, 59, 59, 999);\n  if (d > today) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Valida um número de pedido\n * @param {string} orderNumber - Número do pedido a ser validado\n * @returns {boolean} true se o número é válido\n */\nexport function isValidOrderNumber(orderNumber) {\n  // Remove espaços em branco\n  const trimmed = orderNumber.trim();\n  \n  // Verifica se não está vazio\n  if (!trimmed) {\n    return false;\n  }\n\n  // Verifica o comprimento mínimo e máximo\n  if (trimmed.length < 1 || trimmed.length > 20) {\n    return false;\n  }\n\n  // Verifica se contém apenas caracteres válidos\n  // Permite números, letras, traços e underscores\n  return /^[a-zA-Z0-9-_]+$/.test(trimmed);\n}\n\n/**\n * Valida um valor monetário\n * @param {string|number} value - Valor a ser validado\n * @returns {boolean} true se o valor é válido\n */\nexport function isValidMoneyValue(value) {\n  // Se for string, converte para número\n  const number = typeof value === 'string' ? parseFloat(value) : value;\n  \n  // Verifica se é um número válido\n  if (isNaN(number)) {\n    return false;\n  }\n\n  // Verifica se é não-negativo\n  if (number < 0) {\n    return false;\n  }\n\n  // Verifica se tem no máximo 2 casas decimais\n  const decimalPlaces = (number.toString().split('.')[1] || '').length;\n  if (decimalPlaces > 2) {\n    return false;\n  }\n\n  return true;\n} ","import { deliveries, saveDeliveries } from './data.js';\nimport { normalizeDate, getCurrentDate } from './utils.js';\nimport { validateOrder } from './validation.js';\n\n/**\n * Cria um novo pedido\n * @param {Object} orderData - Dados do pedido\n * @returns {Promise<Object>} Pedido criado\n */\nexport async function createOrder(orderData) {\n  try {\n    // Validação usando o módulo de validação\n    const validationError = validateOrder(orderData);\n    if (validationError) {\n      throw new Error(validationError);\n    }\n\n    // Verifica duplicidade\n    const isDuplicate = isOrderNumberTaken(orderData.orderNumber, orderData.date);\n    if (isDuplicate) {\n      throw new Error('Já existe um pedido com este número nesta data');\n    }\n\n    // Determina o status baseado na taxa\n    const fee = parseFloat(orderData.fee) || 0;\n    const status = fee > 0 ? 'completed' : 'pending';\n\n    // Cria o pedido com status\n    const newOrder = {\n      id: String(Date.now()),\n      orderNumber: orderData.orderNumber.trim(),\n      fee: fee,\n      date: orderData.date,\n      image: orderData.image,\n      status: status,\n      createdAt: new Date().toISOString()\n    };\n\n    // Adiciona à lista e salva\n    deliveries.push(newOrder);\n    sortDeliveries();\n    saveDeliveries();\n\n    return newOrder;\n  } catch (error) {\n    console.error('Erro ao criar pedido:', error);\n    throw error;\n  }\n}\n\n/**\n * Atualiza um pedido existente\n * @param {string} id - ID do pedido\n * @param {Object} updateData - Dados para atualização\n * @returns {Object} Pedido atualizado\n */\nexport function updateOrder(id, updateData) {\n  try {\n    const orderIndex = deliveries.findIndex(d => d.id === id);\n    if (orderIndex === -1) {\n      throw new Error('Pedido não encontrado');\n    }\n\n    // Prepara dados para atualização\n    const currentOrder = deliveries[orderIndex];\n    const fee = parseFloat(updateData.fee) || 0;\n    \n    // Verifica se um status foi explicitamente fornecido\n    const status = updateData.status || (fee > 0 ? 'completed' : 'pending');\n    \n    const updatedOrder = {\n      ...currentOrder,\n      ...updateData,\n      fee: fee,\n      date: normalizeDate(updateData.date || currentOrder.date),\n      id: currentOrder.id, // Mantém o ID original\n      status: status // Usa o status fornecido ou calcula baseado na taxa\n    };\n\n    // Valida os dados atualizados\n    const validationError = validateOrder(updatedOrder);\n    if (validationError) {\n      throw new Error(validationError);\n    }\n\n    // Verifica duplicidade excluindo o pedido atual\n    if (isOrderNumberTaken(updatedOrder.orderNumber, updatedOrder.date, id)) {\n      throw new Error('Já existe um pedido com este número nesta data');\n    }\n\n    // Atualiza o pedido\n    deliveries[orderIndex] = updatedOrder;\n    sortDeliveries();\n    saveDeliveries();\n\n    return updatedOrder;\n  } catch (error) {\n    throw new Error(`Erro ao atualizar pedido: ${error.message}`);\n  }\n}\n\n/**\n * Ordena a lista de pedidos\n * - Data mais recente primeiro\n * - Mesmo dia: ordem crescente por número do pedido\n */\nfunction sortDeliveries() {\n  deliveries.sort((a, b) => {\n    // Primeiro por data (mais recente primeiro)\n    const dateComparison = new Date(b.date) - new Date(a.date);\n    if (dateComparison !== 0) return dateComparison;\n    \n    // Mesmo dia: ordenar por número do pedido\n    return a.orderNumber.localeCompare(b.orderNumber, undefined, {\n      numeric: true,\n      sensitivity: 'base'\n    });\n  });\n}\n\n/**\n * Busca um pedido por ID\n * @param {string} id - ID do pedido\n * @returns {Object|null} Pedido encontrado ou null\n */\nexport function getOrderById(id) {\n  return deliveries.find(d => d.id === id) || null;\n}\n\n/**\n * Busca pedidos por data\n * @param {string} date - Data no formato YYYY-MM-DD\n * @returns {Array} Lista de pedidos da data\n */\nexport function getOrdersByDate(date) {\n  const normalizedDate = normalizeDate(date);\n  return deliveries.filter(d => d.date === normalizedDate);\n}\n\n/**\n * Verifica se um número de pedido já existe na mesma data\n * @param {string} orderNumber - Número do pedido\n * @param {string} date - Data do pedido\n * @param {string} [excludeId] - ID do pedido a ser excluído da verificação\n * @returns {boolean} true se já existe na mesma data\n */\nexport function isOrderNumberTaken(orderNumber, date, excludeId = null) {\n  const normalizedDate = normalizeDate(date);\n  return deliveries.some(d => \n    d.orderNumber === orderNumber && \n    d.date === normalizedDate &&\n    (!excludeId || d.id !== excludeId)\n  );\n} ","import { showToast } from './utils.js';\nimport { processImageForStorage } from './imageUtils.js';\nimport { getOrderById, updateOrder } from './orderManager.js';\nimport { updateDeliveriesTable } from './data.js';\n\n// Estado do editor\nconst state = {\n  currentEditId: null,\n  isEditing: false,\n  hasUnsavedChanges: false,\n  isProcessingImage: false // Flag to track if image is currently being processed\n};\n\nlet scrollPosition = 0;\n\n// Debounce function to prevent multiple rapid calls\nfunction debounce(func, wait) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n\nexport function isEditing() {\n  return state.isEditing;\n}\n\nfunction setUnsavedChanges(hasChanges) {\n  state.hasUnsavedChanges = hasChanges;\n  const notice = document.getElementById('unsavedChangesNotice');\n  if (notice) {\n    notice.classList.toggle('active', hasChanges);\n  }\n}\n\nexport function startEditing(orderId) {\n  const order = getOrderById(orderId);\n  if (!order) {\n    showToast('Pedido não encontrado', 'error');\n    return;\n  }\n\n  // Store current scroll position\n  scrollPosition = window.pageYOffset;\n  document.body.classList.add('modal-open');\n  document.body.style.top = `-${scrollPosition}px`;\n\n  state.currentEditId = orderId;\n  state.isEditing = true;\n  state.isProcessingImage = false;\n  setUnsavedChanges(false);\n\n  // Populate form fields\n  document.getElementById('editOrderNumber').value = order.orderNumber;\n  document.getElementById('editFee').value = order.fee || '';\n  document.getElementById('editDate').value = order.date;\n  \n  // Marcar checkbox de status com base no status atual\n  const statusCheckbox = document.getElementById('editStatus');\n  if (statusCheckbox) {\n    // Se tem valor na taxa mas status é pendente, marcar o checkbox\n    const hasFee = parseFloat(order.fee) > 0;\n    const isPending = order.status === 'pending';\n    statusCheckbox.checked = hasFee && isPending;\n  }\n  \n  // Clear previous errors\n  document.getElementById('editOrderNumberError').textContent = '';\n  document.getElementById('editDateError').textContent = '';\n  document.getElementById('editImageError').textContent = '';\n  \n  // Show image preview if exists\n  const imagePreview = document.getElementById('editImagePreview');\n  imagePreview.innerHTML = '';\n  if (order.image) {\n    const img = document.createElement('img');\n    img.src = `data:image/jpeg;base64,${order.image}`;\n    img.alt = 'Preview';\n    img.className = 'preview-image';\n    imagePreview.innerHTML = `\n      <div class=\"image-preview-item\">\n        <img src=\"${img.src}\" \n            alt=\"Preview\" \n            class=\"preview-image\">\n        <button type=\"button\" class=\"delete-image\" onclick=\"clearEditImage()\">×</button>\n      </div>\n    `;\n  }\n  \n  const modal = document.getElementById('editModal');\n  modal.classList.add('active');\n  \n  // Focus on first input after modal animation\n  setTimeout(() => {\n    document.getElementById('editOrderNumber').focus();\n  }, 100);\n\n  // Configura os event listeners\n  setupEditListeners();\n}\n\nfunction setupEditListeners() {\n  const editForm = document.getElementById('editForm');\n  const cancelButton = document.getElementById('cancelEdit');\n  const uploadButton = document.getElementById('editUploadButton');\n  const imageInput = document.getElementById('editImage');\n  const modal = document.getElementById('editModal');\n  \n  // Clone form inputs to remove existing listeners\n  const newEditForm = editForm.cloneNode(true);\n  editForm.parentNode.replaceChild(newEditForm, editForm);\n  \n  const newCancelButton = document.getElementById('cancelEdit');\n  const newUploadButton = document.getElementById('editUploadButton');\n  const newImageInput = document.getElementById('editImage');\n  \n  // Get all form inputs after cloning\n  const formInputs = newEditForm.querySelectorAll('input');\n\n  // Add new listeners\n  newEditForm.addEventListener('submit', handleEditSubmit);\n  newCancelButton.addEventListener('click', handleCancelEdit);\n  \n  // Add modal click listener\n  modal.addEventListener('click', handleModalClick);\n  \n  // Setup image upload with debouncing\n  newUploadButton.addEventListener('click', () => {\n    // Only trigger click if not currently processing\n    if (!state.isProcessingImage) {\n      // Clear the input value to ensure change event triggers even with the same file\n      newImageInput.value = '';\n      newImageInput.click();\n    } else {\n      showToast('Aguarde o processamento da imagem atual...', 'info');\n    }\n  });\n  \n  // Use debounced handler to prevent multiple rapid calls\n  newImageInput.addEventListener('change', debouncedImageChange);\n\n  // Monitora mudanças no formulário\n  formInputs.forEach(input => {\n    input.addEventListener('change', () => setUnsavedChanges(true));\n    input.addEventListener('input', () => setUnsavedChanges(true));\n  });\n\n  // Configura função global para limpar imagem\n  window.clearEditImage = () => {\n    const imagePreview = document.getElementById('editImagePreview');\n    const imageError = document.getElementById('editImageError');\n    \n    if (imagePreview) imagePreview.innerHTML = '';\n    if (imageError) imageError.textContent = 'O comprovante é obrigatório';\n    setUnsavedChanges(true);\n  };\n}\n\nfunction handleUploadClick() {\n  const imageInput = document.getElementById('editImage');\n  \n  // Only proceed if not currently processing\n  if (!state.isProcessingImage && imageInput) {\n    imageInput.click();\n  } else {\n    showToast('Aguarde o processamento da imagem atual...', 'info');\n  }\n}\n\nfunction handleModalClick(event) {\n  const modal = document.getElementById('editModal');\n  if (event.target === modal) {\n    if (state.hasUnsavedChanges) {\n      const unsavedChangesNotice = document.getElementById('unsavedChangesNotice');\n      unsavedChangesNotice.classList.add('active');\n      \n      setTimeout(() => {\n        unsavedChangesNotice.classList.remove('active');\n      }, 3000);\n      return;\n    }\n    cancelEdit();\n  }\n}\n\nasync function handleImageChange(event) {\n  // Check if already processing\n  if (state.isProcessingImage) {\n    console.log('Já existe um processamento de imagem em andamento, aguardando...');\n    return;\n  }\n\n  const file = event.target.files?.[0];\n  if (!file) return;\n\n  try {\n    state.isProcessingImage = true;\n    \n    const imagePreview = document.getElementById('editImagePreview');\n    const imageError = document.getElementById('editImageError');\n    const imageInput = document.getElementById('editImage');\n    \n    // Reset file input to prevent issues with selecting the same file again\n    if (imageInput) {\n      // Clone and replace to ensure clean state\n      const newInput = imageInput.cloneNode(true);\n      imageInput.parentNode.replaceChild(newInput, imageInput);\n      // Add event listener to the new input\n      newInput.addEventListener('change', debouncedImageChange);\n    }\n    \n    if (imageError) imageError.textContent = '';\n    if (imagePreview) imagePreview.innerHTML = `<div class=\"processing-indicator\">Processando imagem...</div>`;\n    \n    const compressedImage = await processImageForStorage(file);\n    \n    if (compressedImage && imagePreview) {\n      imagePreview.innerHTML = `\n        <div class=\"image-preview-item\">\n          <img src=\"${compressedImage}\" \n               alt=\"Preview\" \n               class=\"preview-image\">\n          <button type=\"button\" class=\"delete-image\" onclick=\"clearEditImage()\">×</button>\n        </div>\n      `;\n      setUnsavedChanges(true);\n    } else {\n      if (imagePreview) imagePreview.innerHTML = '';\n      if (imageError) imageError.textContent = 'Erro ao processar a imagem. Tente novamente.';\n    }\n  } catch (error) {\n    console.error('Erro ao processar imagem:', error);\n    \n    const imagePreview = document.getElementById('editImagePreview');\n    const imageError = document.getElementById('editImageError');\n    \n    if (imagePreview) imagePreview.innerHTML = '';\n    if (imageError) imageError.textContent = 'Erro ao processar a imagem. Verifique o tamanho e formato.';\n  } finally {\n    state.isProcessingImage = false;\n  }\n}\n\n// Create debounced version of image change handler\nconst debouncedImageChange = debounce(handleImageChange, 300);\n\nexport async function handleEditSubmit(event) {\n  event.preventDefault();\n  \n  const orderNumber = document.getElementById('editOrderNumber').value.trim();\n  const fee = document.getElementById('editFee').value;\n  const date = document.getElementById('editDate').value;\n  const imagePreview = document.getElementById('editImagePreview');\n  const image = imagePreview.querySelector('img')?.src;\n  \n  // Obter o valor do checkbox de status\n  const forcePending = document.getElementById('editStatus')?.checked || false;\n  \n  try {\n    // Process image\n    const processedImage = image ? image.replace(/^data:image\\/\\w+;base64,/, '') : null;\n    \n    // Determine status based on fee and checkbox\n    const feeValue = parseFloat(fee) || 0;\n    const status = forcePending ? 'pending' : (feeValue > 0 ? 'completed' : 'pending');\n    \n    // Update order\n    const updatedOrder = await updateOrder(state.currentEditId, {\n      orderNumber,\n      fee,\n      date,\n      image: processedImage,\n      status // Include the status in the update data\n    });\n    \n    showToast('Pedido atualizado com sucesso!', 'success');\n    \n    // Close modal and restore scroll\n    cancelEdit();\n    \n    // Refresh the table\n    updateDeliveriesTable();\n  } catch (error) {\n    console.error('Erro ao atualizar pedido:', error);\n    showToast(error.message, 'error');\n  }\n}\n\nexport function handleCancelEdit() {\n  if (state.hasUnsavedChanges) {\n    if (confirm('Existem alterações não salvas. Deseja realmente sair?')) {\n      cancelEdit();\n    }\n  } else {\n    cancelEdit();\n  }\n}\n\nexport function cancelEdit() {\n  const modal = document.getElementById('editModal');\n  modal.classList.remove('active');\n  document.body.classList.remove('modal-open');\n  document.body.style.top = '';\n  window.scrollTo(0, scrollPosition);\n  \n  state.currentEditId = null;\n  state.isEditing = false;\n  state.isProcessingImage = false;\n  setUnsavedChanges(false);\n  \n  // Clear form\n  document.getElementById('editForm').reset();\n  document.getElementById('editImagePreview').innerHTML = '';\n} ","import { showToast, getCurrentDate } from './utils.js';\nimport { processImageForStorage } from './imageUtils.js';\nimport { createOrder, isOrderNumberTaken, getOrdersByDate } from './orderManager.js';\nimport { \n  updateDeliveriesTable,\n  updateTotals,\n  saveDeliveries,\n  loadDeliveries,\n  updateGasTable,\n  saveGasEntries,\n  gasEntries\n} from './data.js';\nimport { renderAnalytics } from './analytics.js';\n\n/**\n * Manipula o envio do formulário de pedidos\n * @param {Event} event - Evento de submit do formulário\n */\nexport async function handleOrderFormSubmit(event) {\n  event.preventDefault();\n  \n  const orderNumber = document.getElementById('orderNumber').value.trim();\n  const fee = document.getElementById('fee').value.trim();\n  const date = document.getElementById('date').value;\n  const imagePreview = document.getElementById('imagePreview');\n  const image = imagePreview.querySelector('img')?.src;\n  \n  try {\n    // Verifica duplicata antes de prosseguir\n    if (isOrderNumberTaken(orderNumber, date)) {\n      const existingOrders = getOrdersByDate(date);\n      const duplicateOrder = existingOrders.find(order => order.orderNumber === orderNumber);\n      \n      const shouldEdit = confirm(\n        `Já existe um pedido #${orderNumber} registrado em ${date}.\\n` +\n        `Taxa: R$ ${duplicateOrder.fee}\\n\\n` +\n        `Deseja editar o pedido existente?`\n      );\n      \n      if (shouldEdit) {\n        // Chama a função de edição\n        window.editDelivery(duplicateOrder.id);\n        return;\n      } else {\n        throw new Error('Operação cancelada. Escolha um número de pedido diferente.');\n      }\n    }\n\n    // Process image if exists\n    const processedImage = image ? image.replace(/^data:image\\/\\w+;base64,/, '') : null;\n    \n    // Create new order\n    await createOrder({\n      orderNumber,\n      fee: fee === '' ? null : fee,\n      date,\n      image: processedImage\n    });\n    \n    // Clear form\n    event.target.reset();\n    imagePreview.innerHTML = '';\n    document.getElementById('imageError').textContent = '';\n    \n    // Set current date\n    document.getElementById('date').value = getCurrentDate();\n    \n    // Atualiza a interface\n    loadDeliveries();\n    renderAnalytics();\n    \n    showToast('Pedido registrado com sucesso!', 'success');\n  } catch (error) {\n    console.error('Erro ao criar pedido:', error);\n    showToast(error.message, 'error');\n  }\n}\n\n/**\n * Manipula o envio do formulário de gasolina\n * @param {Event} event - Evento de submit do formulário\n */\nexport function handleGasFormSubmit(event) {\n  event.preventDefault();\n  \n  const amount = document.getElementById('gasAmount').value.trim();\n  const date = document.getElementById('gasDate').value;\n  \n  try {\n    // Validação básica\n    if (!amount || !date) {\n      throw new Error('Todos os campos são obrigatórios');\n    }\n    \n    // Cria novo registro\n    const newEntry = {\n      id: String(Date.now()),\n      amount: parseFloat(amount),\n      date: date\n    };\n    \n    // Adiciona ao array e salva\n    gasEntries.push(newEntry);\n    saveGasEntries();\n    \n    // Limpa o formulário\n    event.target.reset();\n    document.getElementById('gasDate').value = getCurrentDate();\n    \n    // Atualiza a interface\n    updateGasTable();\n    updateTotals();\n    renderAnalytics();\n    \n    showToast('Registro de gasolina adicionado com sucesso!', 'success');\n  } catch (error) {\n    console.error('Erro ao adicionar registro de gasolina:', error);\n    showToast(error.message, 'error');\n  }\n}\n\n// Flag to track if image is currently being processed\nlet isProcessingImage = false;\n\n// Debounce function to prevent multiple rapid calls\nfunction debounce(func, wait) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n\n/**\n * Manipula o upload de imagem\n * @param {Event} event - Evento de change do input de arquivo\n */\nexport async function handleImageUpload(event) {\n  // Check if already processing\n  if (isProcessingImage) {\n    console.log('Já existe um processamento de imagem em andamento, aguardando...');\n    return;\n  }\n\n  const file = event.target.files?.[0];\n  if (!file) return;\n  \n  try {\n    isProcessingImage = true;\n    \n    const imagePreview = document.getElementById('imagePreview');\n    const imageError = document.getElementById('imageError');\n    const imageInput = document.getElementById('image');\n    \n    // Clear previous errors and show processing indicator\n    if (imageError) imageError.textContent = '';\n    if (imagePreview) imagePreview.innerHTML = `<div class=\"processing-indicator\">Processando imagem...</div>`;\n    \n    // Clean up any previous preview images to free memory\n    cleanupPreviousPreview();\n    \n    // Reset file input to prevent issues with selecting the same file again\n    if (imageInput) {\n      // Clone and replace to ensure clean state\n      const newInput = imageInput.cloneNode(true);\n      imageInput.parentNode.replaceChild(newInput, imageInput);\n      // Add event listener to the new input\n      newInput.addEventListener('change', debouncedImageUpload);\n    }\n    \n    // Implement pre-validation checks for better memory management\n    // Validate file size before processing - helps prevent OOM errors\n    const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n    if (file.size > MAX_FILE_SIZE) {\n      imagePreview.innerHTML = '';\n      throw new Error('Imagem muito grande. O tamanho máximo permitido é 10MB.');\n    }\n    \n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/png', 'image/webp'];\n    if (!validTypes.includes(file.type)) {\n      imagePreview.innerHTML = '';\n      throw new Error('Tipo de arquivo não suportado. Use JPG, PNG ou WebP.');\n    }\n    \n    // Process the image with a timeout to prevent UI freezing\n    let processTimeout;\n    const timeoutPromise = new Promise((_, reject) => {\n      processTimeout = setTimeout(() => {\n        reject(new Error('Tempo limite excedido ao processar a imagem. Tente uma imagem menor.'));\n      }, 30000); // 30 second timeout\n    });\n    \n    // Race between processing and timeout\n    const compressedImage = await Promise.race([\n      processImageForStorage(file),\n      timeoutPromise\n    ]).finally(() => {\n      clearTimeout(processTimeout);\n    });\n    \n    if (compressedImage) {\n      // Clear any previous content\n      imagePreview.innerHTML = '';\n      \n      // Create new preview\n      const previewContainer = document.createElement('div');\n      previewContainer.className = 'image-preview-item';\n      \n      const img = document.createElement('img');\n      img.src = compressedImage;\n      img.alt = 'Preview';\n      img.className = 'preview-image';\n      \n      const deleteButton = document.createElement('button');\n      deleteButton.type = 'button';\n      deleteButton.className = 'delete-image';\n      deleteButton.textContent = '×';\n      deleteButton.onclick = function() {\n        clearOrderImage();\n        // Clean up memory after removing image\n        if (img.src.startsWith('blob:')) {\n          URL.revokeObjectURL(img.src);\n        }\n        img.src = '';\n      };\n      \n      previewContainer.appendChild(img);\n      previewContainer.appendChild(deleteButton);\n      imagePreview.appendChild(previewContainer);\n    } else {\n      imagePreview.innerHTML = '';\n      imageError.textContent = 'Erro ao processar a imagem. Tente novamente.';\n    }\n  } catch (error) {\n    console.error('Erro ao processar imagem:', error);\n    \n    const imagePreview = document.getElementById('imagePreview');\n    const imageError = document.getElementById('imageError');\n    \n    if (imagePreview) imagePreview.innerHTML = '';\n    if (imageError) imageError.textContent = error.message || 'Erro ao processar a imagem. Verifique o tamanho e formato.';\n  } finally {\n    isProcessingImage = false;\n    \n    // Force garbage collection if possible\n    setTimeout(() => {\n      if (window.gc) {\n        try { window.gc(); } catch (e) { /* Ignore errors */ }\n      }\n    }, 500);\n  }\n}\n\n/**\n * Cleanup previous preview elements to prevent memory leaks\n */\nfunction cleanupPreviousPreview() {\n  const imagePreview = document.getElementById('imagePreview');\n  if (!imagePreview) return;\n  \n  // Clean up any blob URLs from previous previews\n  const previews = imagePreview.querySelectorAll('img');\n  if (previews && previews.length) {\n    previews.forEach(img => {\n      if (img.src && img.src.startsWith('blob:')) {\n        URL.revokeObjectURL(img.src);\n      }\n      img.src = ''; // Clear the source\n    });\n  }\n  \n  // Clear the HTML\n  imagePreview.innerHTML = '';\n}\n\n// Create debounced version of image upload handler\nconst debouncedImageUpload = debounce(handleImageUpload, 300);\n\n/**\n * Configura os event listeners do formulário\n */\nexport function setupOrderForm() {\n  const orderForm = document.getElementById('deliveryForm');\n  const uploadButton = document.getElementById('uploadButton');\n  const imageInput = document.getElementById('image');\n  const orderNumber = document.getElementById('orderNumber');\n  const date = document.getElementById('date');\n  \n  // Set current date as default\n  date.value = getCurrentDate();\n  \n  // Remove existing listeners by replacing elements with clones\n  if (orderForm) {\n    const newOrderForm = orderForm.cloneNode(true);\n    orderForm.parentNode.replaceChild(newOrderForm, orderForm);\n    newOrderForm.addEventListener('submit', handleOrderFormSubmit);\n  }\n  \n  // Get the new references after cloning\n  const newUploadButton = document.getElementById('uploadButton');\n  const newImageInput = document.getElementById('image');\n  const newOrderNumber = document.getElementById('orderNumber');\n  const newDate = document.getElementById('date');\n  \n  // Setup event listeners for new elements\n  if (newUploadButton && newImageInput) {\n    newUploadButton.addEventListener('click', () => {\n      // Only trigger click if not currently processing\n      if (!isProcessingImage) {\n        // Clear the input value to ensure change event triggers even with the same file\n        newImageInput.value = '';\n        newImageInput.click();\n      } else {\n        showToast('Aguarde o processamento da imagem atual...', 'info');\n      }\n    });\n    \n    // Use debounced handler to prevent multiple rapid calls\n    newImageInput.addEventListener('change', debouncedImageUpload);\n  }\n  \n  // Adiciona validação em tempo real para número do pedido\n  if (newOrderNumber && newDate) {\n    newOrderNumber.addEventListener('input', () => {\n      const number = newOrderNumber.value.trim();\n      const currentDate = newDate.value;\n      \n      if (number && currentDate && isOrderNumberTaken(number, currentDate)) {\n        newOrderNumber.classList.add('invalid');\n        newOrderNumber.title = `Pedido #${number} já existe em ${currentDate}`;\n      } else {\n        newOrderNumber.classList.remove('invalid');\n        newOrderNumber.title = '';\n      }\n    });\n    \n    // Atualiza validação quando a data muda\n    newDate.addEventListener('change', () => {\n      const number = newOrderNumber.value.trim();\n      const currentDate = newDate.value;\n      \n      if (number && currentDate && isOrderNumberTaken(number, currentDate)) {\n        newOrderNumber.classList.add('invalid');\n        newOrderNumber.title = `Pedido #${number} já existe em ${currentDate}`;\n      } else {\n        newOrderNumber.classList.remove('invalid');\n        newOrderNumber.title = '';\n      }\n    });\n  }\n  \n  // Setup global image clear function\n  window.clearOrderImage = () => {\n    const imagePreview = document.getElementById('imagePreview');\n    const imageError = document.getElementById('imageError');\n    \n    if (imagePreview) imagePreview.innerHTML = '';\n    if (imageError) imageError.textContent = 'O comprovante é obrigatório';\n  };\n}\n\n/**\n * Configura os event listeners do formulário de gasolina\n */\nexport function setupGasForm() {\n  const gasForm = document.getElementById('gasForm');\n  \n  // Set current date as default\n  document.getElementById('gasDate').value = getCurrentDate();\n  \n  // Remove existing listener\n  gasForm.onsubmit = null;\n  \n  // Add new listener\n  gasForm.addEventListener('submit', handleGasFormSubmit);\n} ","/**\n * dataDiagnostic.js\n * Ferramenta de diagnóstico e reparo para problemas de integridade de dados\n */\n\nimport { \n  deliveries, \n  gasEntries, \n  saveDeliveries, \n  saveGasEntries,\n  updateTotals,\n  forceSyncData\n} from './data.js';\nimport { validateDatabaseIntegrity, getErrorMessages } from './dataValidator.js';\nimport { showToast } from './utils.js';\n\n/**\n * Realiza um diagnóstico completo dos dados e exibe os resultados\n * @param {boolean} autoRepair - Se deve tentar reparar automaticamente os problemas\n * @returns {Object} Resultado do diagnóstico\n */\nexport function runDiagnostic(autoRepair = false) {\n  console.time('Diagnóstico de Dados');\n  \n  // Executar verificação de integridade\n  const result = validateDatabaseIntegrity();\n  const diagnosticReport = analyzeDiagnosticResults(result);\n  \n  // Exibir resultados no console de forma organizada\n  console.group('Relatório de Diagnóstico de Dados');\n  console.log(`Status: ${result.isValid ? 'ÍNTEGRO ✅' : 'COM PROBLEMAS ❌'}`);\n  console.log(`Timestamp: ${new Date(result.timestamp).toLocaleString()}`);\n  \n  // Relatório de entregas\n  console.group('Entregas');\n  console.log(`Total: ${deliveries.length}`);\n  console.log(`Válidas: ${result.deliveries.validItems.length}`);\n  console.log(`Inválidas: ${result.deliveries.invalidItems.length}`);\n  \n  if (result.deliveries.invalidItems.length > 0) {\n    console.group('Problemas encontrados');\n    diagnosticReport.deliveryIssues.forEach((issue, index) => {\n      console.log(`🔍 Problema #${index + 1}: ${issue.message} (${issue.count} ocorrências)`);\n    });\n    console.groupEnd();\n  }\n  console.groupEnd();\n  \n  // Relatório de abastecimentos\n  console.group('Abastecimentos');\n  console.log(`Total: ${gasEntries.length}`);\n  console.log(`Válidos: ${result.gasEntries.validItems.length}`);\n  console.log(`Inválidos: ${result.gasEntries.invalidItems.length}`);\n  \n  if (result.gasEntries.invalidItems.length > 0) {\n    console.group('Problemas encontrados');\n    diagnosticReport.gasIssues.forEach((issue, index) => {\n      console.log(`🔍 Problema #${index + 1}: ${issue.message} (${issue.count} ocorrências)`);\n    });\n    console.groupEnd();\n  }\n  console.groupEnd();\n  \n  console.groupEnd();\n  console.timeEnd('Diagnóstico de Dados');\n  \n  // Mostrar toast resumido\n  if (!result.isValid) {\n    const totalIssues = result.deliveries.invalidItems.length + result.gasEntries.invalidItems.length;\n    \n    if (autoRepair) {\n      // Tentar reparar automaticamente\n      const repairResult = repairData(result);\n      showToast(`Encontrados ${totalIssues} problemas. Reparo automático: ${repairResult.success ? 'Sucesso' : 'Falha'} (${repairResult.fixed}/${totalIssues} corrigidos)`, 'warning');\n    } else {\n      showToast(`Diagnóstico encontrou ${totalIssues} problemas de integridade. Verifique o console para detalhes.`, 'error');\n    }\n  } else {\n    showToast('Dados verificados. Nenhum problema encontrado.', 'success');\n  }\n  \n  return {\n    result,\n    report: diagnosticReport\n  };\n}\n\n/**\n * Analisa os resultados do diagnóstico para um relatório mais amigável\n * @param {Object} result - Resultado da validação\n * @returns {Object} Relatório de problemas organizado\n */\nfunction analyzeDiagnosticResults(result) {\n  const report = {\n    deliveryIssues: [],\n    gasIssues: []\n  };\n  \n  // Organizar problemas comuns nas entregas\n  const deliveryErrorMap = new Map();\n  result.deliveries.invalidItems.forEach(item => {\n    item.errors.forEach(error => {\n      const key = `${error.field}:${error.message}`;\n      if (!deliveryErrorMap.has(key)) {\n        deliveryErrorMap.set(key, {\n          field: error.field,\n          message: error.message,\n          items: [],\n          count: 0\n        });\n      }\n      \n      deliveryErrorMap.get(key).items.push(item.item);\n      deliveryErrorMap.get(key).count++;\n    });\n  });\n  \n  // Converter mapa em array\n  report.deliveryIssues = Array.from(deliveryErrorMap.values());\n  \n  // Organizar problemas comuns nos abastecimentos\n  const gasErrorMap = new Map();\n  result.gasEntries.invalidItems.forEach(item => {\n    item.errors.forEach(error => {\n      const key = `${error.field}:${error.message}`;\n      if (!gasErrorMap.has(key)) {\n        gasErrorMap.set(key, {\n          field: error.field,\n          message: error.message,\n          items: [],\n          count: 0\n        });\n      }\n      \n      gasErrorMap.get(key).items.push(item.item);\n      gasErrorMap.get(key).count++;\n    });\n  });\n  \n  // Converter mapa em array\n  report.gasIssues = Array.from(gasErrorMap.values());\n  \n  return report;\n}\n\n/**\n * Tenta reparar automaticamente os problemas de integridade\n * @param {Object} diagnosticResult - Resultado do diagnóstico\n * @returns {Object} Resultado do reparo\n */\nexport function repairData(diagnosticResult) {\n  console.time('Reparo de Dados');\n  \n  const repairResult = {\n    success: false,\n    fixed: 0,\n    total: 0,\n    deliveryFixed: 0,\n    gasFixed: 0,\n    unrepaired: []\n  };\n  \n  // Contabilizar total de problemas\n  repairResult.total = diagnosticResult.deliveries.invalidItems.length + \n                      diagnosticResult.gasEntries.invalidItems.length;\n  \n  // Reparar entregas\n  diagnosticResult.deliveries.invalidItems.forEach(item => {\n    const index = deliveries.findIndex(d => d.id === item.item.id);\n    if (index !== -1) {\n      let fixed = false;\n      \n      // Verificar cada tipo de erro e tentar reparar\n      item.errors.forEach(error => {\n        switch (error.field) {\n          case 'status':\n            deliveries[index].status = parseFloat(deliveries[index].fee) > 0 ? 'completed' : 'pending';\n            fixed = true;\n            break;\n          \n          case 'id':\n            if (!deliveries[index].id) {\n              deliveries[index].id = `repair_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n              fixed = true;\n            }\n            break;\n            \n          case 'date':\n            // Corrigir data se estiver em formato inválido\n            if (deliveries[index].date) {\n              try {\n                const dateObj = new Date(deliveries[index].date);\n                if (!isNaN(dateObj.getTime())) {\n                  deliveries[index].date = dateObj.toISOString().split('T')[0];\n                  fixed = true;\n                }\n              } catch (e) {\n                // Não foi possível reparar a data\n              }\n            }\n            break;\n            \n          case 'fee':\n            // Garantir que fee é um número\n            if (deliveries[index].fee !== undefined) {\n              const fee = parseFloat(deliveries[index].fee);\n              if (!isNaN(fee)) {\n                deliveries[index].fee = fee;\n                fixed = true;\n              } else {\n                deliveries[index].fee = 0;\n                fixed = true;\n              }\n            }\n            break;\n            \n          case 'orderNumber':\n            // Se o número do pedido estiver vazio, criar um sintético\n            if (!deliveries[index].orderNumber) {\n              deliveries[index].orderNumber = `REPARO_${index + 1}`;\n              fixed = true;\n            }\n            break;\n        }\n      });\n      \n      if (fixed) {\n        repairResult.fixed++;\n        repairResult.deliveryFixed++;\n      } else {\n        repairResult.unrepaired.push({\n          type: 'delivery',\n          id: item.item.id,\n          errors: item.errors\n        });\n      }\n    }\n  });\n  \n  // Reparar abastecimentos\n  diagnosticResult.gasEntries.invalidItems.forEach(item => {\n    const index = gasEntries.findIndex(g => g.id === item.item.id);\n    if (index !== -1) {\n      let fixed = false;\n      \n      // Verificar cada tipo de erro e tentar reparar\n      item.errors.forEach(error => {\n        switch (error.field) {\n          case 'id':\n            if (!gasEntries[index].id) {\n              gasEntries[index].id = `repair_gas_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n              fixed = true;\n            }\n            break;\n            \n          case 'date':\n            // Corrigir data se estiver em formato inválido\n            if (gasEntries[index].date) {\n              try {\n                const dateObj = new Date(gasEntries[index].date);\n                if (!isNaN(dateObj.getTime())) {\n                  gasEntries[index].date = dateObj.toISOString().split('T')[0];\n                  fixed = true;\n                }\n              } catch (e) {\n                // Não foi possível reparar a data\n              }\n            }\n            break;\n            \n          case 'amount':\n            // Garantir que amount é um número positivo\n            if (gasEntries[index].amount !== undefined) {\n              const amount = parseFloat(gasEntries[index].amount);\n              if (!isNaN(amount) && amount > 0) {\n                gasEntries[index].amount = amount;\n                fixed = true;\n              } else if (!isNaN(amount) && amount <= 0) {\n                gasEntries[index].amount = 0.01;\n                fixed = true;\n              }\n            }\n            break;\n        }\n      });\n      \n      if (fixed) {\n        repairResult.fixed++;\n        repairResult.gasFixed++;\n      } else {\n        repairResult.unrepaired.push({\n          type: 'gasEntry',\n          id: item.item.id,\n          errors: item.errors\n        });\n      }\n    }\n  });\n  \n  // Salvar alterações\n  if (repairResult.deliveryFixed > 0) {\n    saveDeliveries();\n  }\n  \n  if (repairResult.gasFixed > 0) {\n    saveGasEntries();\n  }\n  \n  // Forçar sincronização de dados\n  if (repairResult.fixed > 0) {\n    updateTotals();\n    forceSyncData();\n  }\n  \n  repairResult.success = repairResult.fixed > 0;\n  \n  console.timeEnd('Reparo de Dados');\n  console.log('Resultado do reparo:', repairResult);\n  \n  return repairResult;\n}\n\n/**\n * Verifica campos duplicados entre entregas (datas e números de pedido)\n * @returns {Object} Relatório de duplicatas\n */\nexport function checkDuplicates() {\n  const report = {\n    sameOrderNumberAndDate: [],\n    sameDate: {},\n    total: 0\n  };\n  \n  // Verificar pedidos com mesmo número e data\n  for (let i = 0; i < deliveries.length; i++) {\n    for (let j = i + 1; j < deliveries.length; j++) {\n      if (deliveries[i].orderNumber === deliveries[j].orderNumber && \n          deliveries[i].date === deliveries[j].date) {\n        report.sameOrderNumberAndDate.push({\n          first: deliveries[i],\n          second: deliveries[j],\n          suggestion: 'Alterar o número de pedido ou a data de uma das entregas'\n        });\n        report.total++;\n      }\n    }\n  }\n  \n  // Agrupar por data para análise\n  deliveries.forEach(delivery => {\n    if (!report.sameDate[delivery.date]) {\n      report.sameDate[delivery.date] = [];\n    }\n    report.sameDate[delivery.date].push(delivery);\n  });\n  \n  // Limpar datas com apenas uma entrega\n  Object.keys(report.sameDate).forEach(date => {\n    if (report.sameDate[date].length <= 1) {\n      delete report.sameDate[date];\n    }\n  });\n  \n  return report;\n}\n\n/**\n * Cria e exibe um modal de diagnóstico\n */\nexport function showDiagnosticModal() {\n  // Executar diagnóstico\n  const diagnostic = runDiagnostic(false);\n  \n  // Criar modal se não existir\n  let modal = document.getElementById('diagnosticModal');\n  if (!modal) {\n    modal = document.createElement('div');\n    modal.id = 'diagnosticModal';\n    modal.className = 'modal-overlay';\n    document.body.appendChild(modal);\n  }\n  \n  // Construir o conteúdo do modal\n  const isValid = diagnostic.result.isValid;\n  const totalIssues = diagnostic.result.deliveries.invalidItems.length + diagnostic.result.gasEntries.invalidItems.length;\n  \n  // Conteúdo HTML para o modal\n  modal.innerHTML = `\n    <div class=\"diagnostic-modal\">\n      <h2>Diagnóstico de Integridade de Dados</h2>\n      \n      <div class=\"diagnostic-summary ${isValid ? 'valid' : 'invalid'}\">\n        <div class=\"diagnostic-status\">\n          <span class=\"status-icon\">${isValid ? '✅' : '❌'}</span>\n          <span class=\"status-text\">${isValid ? 'Dados Íntegros' : 'Problemas Encontrados'}</span>\n        </div>\n        <div class=\"diagnostic-counts\">\n          <div class=\"count-item\">\n            <span class=\"count-value\">${deliveries.length}</span>\n            <span class=\"count-label\">Entregas Totais</span>\n          </div>\n          <div class=\"count-item\">\n            <span class=\"count-value\">${gasEntries.length}</span>\n            <span class=\"count-label\">Abastecimentos Totais</span>\n          </div>\n          <div class=\"count-item ${totalIssues > 0 ? 'invalid' : ''}\">\n            <span class=\"count-value\">${totalIssues}</span>\n            <span class=\"count-label\">Problemas</span>\n          </div>\n        </div>\n      </div>\n      \n      ${totalIssues > 0 ? `\n        <div class=\"diagnostic-issues\">\n          <h3>Problemas Encontrados</h3>\n          \n          ${diagnostic.report.deliveryIssues.length > 0 ? `\n            <div class=\"issue-group\">\n              <h4>Problemas em Entregas</h4>\n              <ul class=\"issue-list\">\n                ${diagnostic.report.deliveryIssues.map(issue => `\n                  <li class=\"issue-item\">\n                    <div class=\"issue-header\">\n                      <span class=\"issue-field\">${issue.field}</span>\n                      <span class=\"issue-count\">${issue.count} ocorrência${issue.count !== 1 ? 's' : ''}</span>\n                    </div>\n                    <div class=\"issue-message\">${issue.message}</div>\n                  </li>\n                `).join('')}\n              </ul>\n            </div>\n          ` : ''}\n          \n          ${diagnostic.report.gasIssues.length > 0 ? `\n            <div class=\"issue-group\">\n              <h4>Problemas em Abastecimentos</h4>\n              <ul class=\"issue-list\">\n                ${diagnostic.report.gasIssues.map(issue => `\n                  <li class=\"issue-item\">\n                    <div class=\"issue-header\">\n                      <span class=\"issue-field\">${issue.field}</span>\n                      <span class=\"issue-count\">${issue.count} ocorrência${issue.count !== 1 ? 's' : ''}</span>\n                    </div>\n                    <div class=\"issue-message\">${issue.message}</div>\n                  </li>\n                `).join('')}\n              </ul>\n            </div>\n          ` : ''}\n          \n          <div class=\"repair-actions\">\n            <button id=\"autoRepairBtn\" class=\"button primary\">Reparar Automaticamente</button>\n            <p class=\"repair-note\">O reparo automático tentará corrigir os problemas mais comuns. É recomendado fazer um backup antes.</p>\n          </div>\n        </div>\n      ` : `\n        <div class=\"diagnostic-valid\">\n          <p>Todos os dados foram verificados e estão íntegros.</p>\n        </div>\n      `}\n      \n      <div class=\"modal-actions\">\n        <button id=\"closeDiagnosticBtn\" class=\"button outline\">Fechar</button>\n        <button id=\"backupBeforeRepairBtn\" class=\"button outline\">Fazer Backup</button>\n      </div>\n    </div>\n  `;\n  \n  // Exibir o modal\n  modal.style.display = 'flex';\n  \n  // Adicionar event listeners\n  document.getElementById('closeDiagnosticBtn').addEventListener('click', () => {\n    modal.style.display = 'none';\n  });\n  \n  document.getElementById('backupBeforeRepairBtn').addEventListener('click', () => {\n    // Importar dinamicamente o módulo de backup para evitar dependência circular\n    import('./export.js').then(exportModule => {\n      exportModule.backupData();\n      showToast('Backup criado com sucesso', 'success');\n    });\n  });\n  \n  // Adicionar listener para reparo apenas se houver problemas\n  if (totalIssues > 0) {\n    document.getElementById('autoRepairBtn').addEventListener('click', () => {\n      // Executar reparo\n      const repairResult = repairData(diagnostic.result);\n      \n      // Atualizar modal com o resultado\n      if (repairResult.success) {\n        showToast(`Reparo: ${repairResult.fixed}/${totalIssues} problemas corrigidos`, 'success');\n        \n        // Recarregar diagnóstico após o reparo\n        setTimeout(() => {\n          modal.style.display = 'none';\n          showDiagnosticModal();\n        }, 1500);\n      } else {\n        showToast('Não foi possível reparar os problemas automaticamente', 'error');\n      }\n    });\n  }\n  \n  // Evitar que cliques no conteúdo do modal fechem o modal\n  modal.querySelector('.diagnostic-modal').addEventListener('click', event => {\n    event.stopPropagation();\n  });\n  \n  // Fechar o modal ao clicar fora\n  modal.addEventListener('click', () => {\n    modal.style.display = 'none';\n  });\n}\n\n// Exportar função utilitária\nexport function removeDataItem(itemType, itemId) {\n  if (itemType === 'delivery') {\n    const index = deliveries.findIndex(d => d.id === itemId);\n    if (index !== -1) {\n      deliveries.splice(index, 1);\n      saveDeliveries();\n      return true;\n    }\n  } else if (itemType === 'gasEntry') {\n    const index = gasEntries.findIndex(g => g.id === itemId);\n    if (index !== -1) {\n      gasEntries.splice(index, 1);\n      saveGasEntries();\n      return true;\n    }\n  }\n  return false;\n} ","import { showToast } from './utils.js';\nimport { deleteDelivery, deleteGasEntry } from './data.js';\n\n// Estado para controlar o modal\nconst state = {\n  isOpen: false,\n  itemId: null,\n  itemType: null, // 'delivery' ou 'gas'\n  expectedValue: '',\n  onConfirm: null,\n  valueType: 'numero' // 'numero' ou 'valor'\n};\n\n// Elementos do DOM\nlet modal, messageElement, inputElement, errorElement, cancelButton, confirmButton;\n\n// Inicializar os elementos quando o DOM estiver pronto\nexport function initializeDeleteConfirmation() {\n  modal = document.getElementById('deleteConfirmModal');\n  messageElement = document.getElementById('deleteConfirmMessage');\n  inputElement = document.getElementById('deleteConfirmInput');\n  errorElement = document.getElementById('deleteConfirmError');\n  cancelButton = document.getElementById('cancelDelete');\n  confirmButton = document.getElementById('confirmDelete');\n  \n  if (!modal || !messageElement || !inputElement || !errorElement || !cancelButton || !confirmButton) {\n    console.error('Elementos do modal de confirmação não encontrados');\n    return;\n  }\n  \n  // Adicionar event listeners\n  cancelButton.addEventListener('click', closeModal);\n  confirmButton.addEventListener('click', handleConfirmDelete);\n  inputElement.addEventListener('input', clearError);\n  \n  // Fechar o modal ao clicar fora\n  modal.addEventListener('click', (e) => {\n    if (e.target === modal) {\n      closeModal();\n    }\n  });\n  \n  // Fechar modal com a tecla ESC\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'Escape' && state.isOpen) {\n      closeModal();\n    }\n  });\n  \n  // Submeter o formulário ao pressionar Enter\n  inputElement.addEventListener('keydown', (e) => {\n    if (e.key === 'Enter' && state.isOpen) {\n      handleConfirmDelete();\n    }\n  });\n}\n\n// Abrir modal para confirmação de exclusão de entrega\nexport function confirmDeliveryDeletion(deliveryId, orderNumber) {\n  state.itemId = deliveryId;\n  state.itemType = 'delivery';\n  state.expectedValue = orderNumber;\n  state.valueType = 'numero';\n  state.onConfirm = () => {\n    deleteDelivery(deliveryId);\n  };\n  \n  messageElement.textContent = `Para confirmar a exclusão, digite o número do pedido: ${orderNumber}`;\n  inputElement.placeholder = 'Digite o número do pedido';\n  openModal();\n}\n\n// Abrir modal para confirmação de exclusão de abastecimento\nexport function confirmGasDeletion(gasId, amount) {\n  state.itemId = gasId;\n  state.itemType = 'gas';\n  state.expectedValue = amount.toString();\n  state.valueType = 'valor';\n  state.onConfirm = () => {\n    deleteGasEntry(gasId);\n  };\n  \n  messageElement.textContent = `Para confirmar a exclusão, digite o valor do abastecimento: ${amount}`;\n  inputElement.placeholder = 'Digite o valor';\n  openModal();\n}\n\n// Abrir o modal\nfunction openModal() {\n  modal.style.display = 'flex';\n  inputElement.value = '';\n  errorElement.textContent = '';\n  inputElement.classList.remove('error');\n  \n  // Dar foco ao input após a animação do modal\n  setTimeout(() => {\n    inputElement.focus();\n    state.isOpen = true;\n  }, 50);\n}\n\n// Fechar o modal\nfunction closeModal() {\n  modal.style.display = 'none';\n  state.isOpen = false;\n  state.itemId = null;\n  state.expectedValue = '';\n  state.onConfirm = null;\n}\n\n// Limpar mensagem de erro ao digitar\nfunction clearError() {\n  errorElement.textContent = '';\n  inputElement.classList.remove('error');\n}\n\n// Processar confirmação de exclusão\nfunction handleConfirmDelete() {\n  const inputValue = inputElement.value.trim();\n  \n  // Validar se o input está vazio\n  if (!inputValue) {\n    showError('Este campo é obrigatório.');\n    return;\n  }\n  \n  // Verificar se corresponde ao valor esperado\n  if (state.valueType === 'numero') {\n    // Para número do pedido, verificar correspondência exata\n    if (inputValue !== state.expectedValue) {\n      showError('O número do pedido não corresponde.');\n      return;\n    }\n  } else {\n    // Para valor de abastecimento, permitir diferentes formatos\n    // Converter para número e comparar os valores numéricos\n    const inputNumber = parseFloat(inputValue.replace(',', '.'));\n    const expectedNumber = parseFloat(state.expectedValue.replace(',', '.'));\n    \n    if (isNaN(inputNumber) || Math.abs(inputNumber - expectedNumber) > 0.01) {\n      showError('O valor não corresponde.');\n      return;\n    }\n  }\n  \n  // Se passou na validação, executar a função de confirmação\n  if (state.onConfirm) {\n    state.onConfirm();\n    closeModal();\n  }\n}\n\n// Exibir mensagem de erro\nfunction showError(message) {\n  errorElement.textContent = message;\n  inputElement.classList.add('error');\n  inputElement.focus();\n} ","import { getCurrentDate, showToast, checkDuplicateDelivery } from './utils.js';\nimport { \n  deliveries, \n  gasEntries, \n  saveDeliveries, \n  saveGasEntries,\n  deleteDelivery,\n  deleteGasEntry,\n  loadDeliveries,\n  loadGasEntries,\n  updateTotals,\n  initializeData,\n  forceSyncData\n} from './data.js';\nimport { finishWeek, clearAllData, backupData, exportCustomCSV, showExportModal } from './export.js';\nimport { importCSV } from './import.js';\nimport { processImageForStorage, showImageModal } from './imageUtils.js';\nimport { renderAnalytics } from './analytics.js';\nimport { \n  startEditing as startDeliveryEditing,\n  handleEditSubmit,\n  handleCancelEdit,\n  isEditing as isDeliveryEditing,\n  cancelEdit as cancelDeliveryEdit\n} from './editHandler.js';\nimport { handleOrderFormSubmit, setupOrderForm, setupGasForm } from './formHandler.js';\nimport { initializeMobileOptimizations } from './mobile.js';\nimport { initializeSync, getSyncStatus } from './sync.js';\nimport { runDiagnostic, repairData } from './dataDiagnostic.js';\nimport { initializeDeleteConfirmation, confirmDeliveryDeletion, confirmGasDeletion } from './deleteConfirmation.js';\n\n// Export all necessary setup functions\nexport {\n  setupEditForms,\n  setupTabs,\n  initializeApp,\n  setupOrderForm as setupDeliveryForm,\n  setupGasForm,\n  handleOrderFormSubmit as handleDeliveryFormSubmit\n};\n\n// Função para gerar dados aleatórios para teste\nfunction generateRandomData(days = 7) {\n  // Helper para gerar número aleatório entre min e max\n  const randomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n  \n  // Helper para gerar data aleatória nos últimos X dias\n  const randomDate = (daysAgo) => {\n    const date = new Date();\n    date.setDate(date.getDate() - daysAgo);\n    return date.toISOString().split('T')[0];\n  };\n\n  // Limpar dados existentes\n  deliveries.length = 0;\n  gasEntries.length = 0;\n\n  // Gerar entregas para cada dia\n  for (let i = 0; i < days; i++) {\n    const date = randomDate(i);\n    const numDeliveries = randomNumber(3, 8); // 3 a 8 entregas por dia\n    \n    // Gerar entregas para este dia\n    for (let j = 0; j < numDeliveries; j++) {\n      const fee = parseFloat(randomNumber(5, 15).toFixed(2));\n      const delivery = {\n        id: `${Date.now()}-${i}-${j}`,\n        date: date,\n        orderNumber: `${randomNumber(1000, 9999)}`,\n        fee: fee,\n        image: null,\n        status: fee > 0 ? 'completed' : 'pending'\n      };\n      deliveries.push(delivery);\n    }\n\n    // 50% de chance de ter abastecimento neste dia\n    if (Math.random() > 0.5) {\n      const gasEntry = {\n        id: `gas-${Date.now()}-${i}`,\n        date: date,\n        amount: parseFloat(randomNumber(30, 70).toFixed(2)),\n        image: null\n      };\n      gasEntries.push(gasEntry);\n    }\n  }\n\n  // Salvar dados\n  saveDeliveries();\n  saveGasEntries();\n  updateTotals();\n  \n  showToast(`Dados aleatórios gerados para ${days} dias!`, 'success');\n  \n  return {\n    totalDeliveries: deliveries.length,\n    totalGasEntries: gasEntries.length\n  };\n}\n\n// Função para configurar os formulários de edição\nfunction setupEditForms() {\n  const modal = document.getElementById('imageModal');\n  const closeButton = modal.querySelector('.close');\n  \n  closeButton.addEventListener('click', closeImageModal);\n  \n  modal.addEventListener('click', (event) => {\n    if (event.target === modal) {\n      closeImageModal();\n    }\n  });\n  \n  // Setup for finish week button (with mobile handling via mobile.js)\n  const finishWeekButton = document.getElementById('finishWeekButton');\n  if (finishWeekButton) {\n    // Setup click handler but allow override from mobile.js\n    if (!finishWeekButton.onclick) {\n      finishWeekButton.addEventListener('click', finishWeek);\n    }\n    finishWeekButton.title = \"Exportar dados e limpar todas as entregas\";\n  }\n\n  const clearDataButton = document.getElementById('clearDataButton');\n  if (clearDataButton) {\n    // Remover eventos existentes para evitar duplicação\n    clearDataButton.replaceWith(clearDataButton.cloneNode(true));\n    \n    // Obter referência ao novo botão\n    const newClearDataButton = document.getElementById('clearDataButton');\n    \n    // Adicionar listener com confirmação de segurança\n    newClearDataButton.addEventListener('click', () => {\n      // Confirmação adicional para evitar limpeza acidental\n      if (confirm('ATENÇÃO: Todos os dados serão permanentemente excluídos. Esta ação não pode ser desfeita.\\n\\nDeseja continuar?')) {\n        clearAllData(); // Chama a função que limpa todos os dados\n        \n        // Verificar se a limpeza foi bem-sucedida\n        setTimeout(() => {\n          // Validar se localStorage está vazio\n          if (localStorage.length === 0) {\n            console.log('Limpeza de dados validada com sucesso');\n          } else {\n            console.warn('Possível falha na limpeza - ainda existem dados no localStorage');\n            // Tentar limpeza direta como fallback\n            try {\n              localStorage.clear();\n              sessionStorage.clear();\n              \n              // Forçar atualização de dados\n              loadDeliveries();\n              loadGasEntries();\n              updateTotals();\n              \n              showToast('Dados limpos (fallback)', 'info');\n            } catch (e) {\n              console.error('Erro na limpeza fallback:', e);\n            }\n          }\n          \n          // Forçar sincronização entre abas\n          forceSyncAllTabs();\n        }, 500);\n      }\n    });\n    newClearDataButton.title = \"Limpar todos os dados\";\n  }\n\n  // Setup for import button (with mobile handling via mobile.js)\n  const importButton = document.getElementById('importButton');\n  const csvInput = document.getElementById('csvInput');\n  \n  if (importButton && csvInput) {\n    // Setup click handler but allow override from mobile.js  \n    if (!importButton.onclick) {\n      importButton.addEventListener('click', () => {\n        csvInput.click();\n      });\n    }\n    \n    // Ensure the change event is properly captured\n    if (!csvInput.onchange) {\n      csvInput.addEventListener('change', importCSV);\n    }\n  }\n\n  // Setup the export modal event listeners\n  setupExportModalHandlers();\n\n  // Setup storage event listener to handle changes from other tabs\n  window.addEventListener('storage', (event) => {\n    if (event.key === 'deliveries' || event.key === 'gasEntries') {\n      loadDeliveries();\n      loadGasEntries();\n    }\n  });\n\n  // Atualizar as funções globais\n  window.editDelivery = startDeliveryEditing;\n  window.deleteDelivery = deleteDelivery;\n  window.deleteGasEntry = deleteGasEntry;\n  window.showImageModal = showImageModal;\n  window.cancelDeliveryEdit = cancelDeliveryEdit;\n  \n  // Adicionar funções de confirmação de exclusão\n  window.confirmDeliveryDeletion = confirmDeliveryDeletion;\n  window.confirmGasDeletion = confirmGasDeletion;\n\n  // Adicionar função de teste à window\n  window.generateTestData = (days) => {\n    try {\n      const result = generateRandomData(days);\n      console.log('Dados gerados:', result);\n      return result;\n    } catch (error) {\n      console.error('Erro ao gerar dados:', error);\n      showToast('Erro ao gerar dados de teste', 'error');\n    }\n  };\n\n  // Carrega os dados iniciais\n  loadDeliveries();\n  renderAnalytics();\n}\n\n// Setup export modal handlers\nfunction setupExportModalHandlers() {\n  const exportModal = document.getElementById('exportModal');\n  const confirmExport = document.getElementById('confirmExport');\n  const cancelExport = document.getElementById('cancelExport');\n  \n  if (exportModal && confirmExport && cancelExport) {\n    // Setup confirmation button handler if it's not already set\n    if (!confirmExport.onclick) {\n      confirmExport.addEventListener('click', () => {\n        try {\n          const includeDeliveries = document.getElementById('exportDeliveries').checked;\n          const includeGas = document.getElementById('exportGas').checked;\n          const includeImages = document.getElementById('exportImages').checked;\n          \n          exportCustomCSV(includeDeliveries, includeGas, includeImages);\n          exportModal.style.display = 'none';\n        } catch (error) {\n          console.error('Erro ao exportar dados:', error);\n          showToast(error.message, 'error');\n        }\n      });\n    }\n    \n    // Setup cancellation button handler if it's not already set\n    if (!cancelExport.onclick) {\n      cancelExport.addEventListener('click', () => {\n        exportModal.style.display = 'none';\n      });\n    }\n  }\n}\n\n// Função para configurar as tabs\nfunction setupTabs() {\n  const tabs = document.querySelectorAll('.tab-button');\n  const contents = document.querySelectorAll('.tab-content');\n\n  tabs.forEach(tab => {\n    tab.addEventListener('click', () => {\n      // Remove active class from all tabs and contents\n      tabs.forEach(t => t.classList.remove('active'));\n      contents.forEach(c => c.classList.remove('active'));\n\n      // Add active class to clicked tab and corresponding content\n      tab.classList.add('active');\n      const contentId = tab.getAttribute('data-tab');\n      document.getElementById(contentId).classList.add('active');\n\n      // If analytics tab is clicked, render analytics\n      if (contentId === 'analytics') {\n        if (deliveries.length === 0) {\n          showToast('Nenhuma entrega registrada para análise', 'info');\n        }\n        renderAnalytics();\n      }\n    });\n  });\n}\n\n// Função para fechar o modal de imagem\nfunction closeImageModal() {\n  const modal = document.getElementById('imageModal');\n  modal.classList.remove('show');\n  \n  setTimeout(() => {\n    modal.style.display = 'none';\n  }, 300);\n}\n\n// Improved page load handling\nfunction handlePageLoad() {\n    const MAX_WAIT_TIME = 1000; // 1 second maximum wait time\n    const loadingIndicator = document.querySelector('.loading-indicator');\n    \n    // Create a promise that resolves when stylesheets are loaded\n    const stylesLoaded = Promise.all(\n        Array.from(document.querySelectorAll('link[rel=\"stylesheet\"]'))\n            .map(stylesheet => {\n                if (stylesheet.loaded) return Promise.resolve();\n                return new Promise((resolve) => {\n                    stylesheet.addEventListener('load', resolve);\n                    stylesheet.addEventListener('error', resolve); // Resolve on error too\n                });\n            })\n    );\n\n    // Create a timeout promise\n    const timeout = new Promise(resolve => setTimeout(resolve, MAX_WAIT_TIME));\n\n    // Race between stylesheet loading and timeout\n    Promise.race([stylesLoaded, timeout])\n        .then(() => {\n            // Small delay to ensure browser has painted\n            setTimeout(() => {\n                if (loadingIndicator) {\n                    loadingIndicator.style.display = 'none';\n                }\n                document.body.classList.add('ready');\n            }, 100);\n        })\n        .catch(() => {\n            // Ensure content is shown even if there's an error\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'none';\n            }\n            document.body.classList.add('ready');\n        });\n}\n\n// Initialize page load handling\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', handlePageLoad);\n} else {\n    handlePageLoad();\n}\n\n// Performance optimizations\ndocument.addEventListener('scroll', () => {\n    document.body.classList.add('is-scrolling');\n    clearTimeout(window.scrollTimer);\n    window.scrollTimer = setTimeout(() => {\n        document.body.classList.remove('is-scrolling');\n    }, 150);\n}, { passive: true });\n\n// Check for reduced motion preference\nif (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n    document.body.classList.add('reduce-motion');\n}\n\n// Fix for 100vh on mobile browsers\nconst setAppHeight = () => {\n    document.documentElement.style.setProperty('--app-height', `${window.innerHeight}px`);\n};\nwindow.addEventListener('resize', setAppHeight);\nsetAppHeight();\n\n// Função para inicializar a aplicação\nfunction initializeApp() {\n  console.time('Inicialização da Aplicação');\n  \n  // Fix para altura em dispositivos móveis\n  setAppHeight();\n  window.addEventListener('resize', () => {\n    setAppHeight();\n  });\n  \n  // Verificar integridade dos dados ao iniciar\n  checkDataIntegrity();\n  \n  // Verificar e reparar problemas de integridade automaticamente\n  checkDataIntegrityOnStartup();\n  \n  // Carregar dados\n  loadDeliveries();\n  loadGasEntries();\n  updateTotals();\n  \n  // Inicializar sistema de sincronização\n  initializeSync();\n  \n  // Inicializar sistema de sincronização entre abas\n  const syncStatus = initializeSync();\n  console.log('Sistema de sincronização inicializado:', syncStatus.sessionId);\n  \n  // Carrega dados do localStorage\n  initializeData();\n  \n  // Garante que todas as entregas têm status definidos\n  deliveries.forEach(delivery => {\n    if (!delivery.status) {\n      delivery.status = parseFloat(delivery.fee) > 0 ? 'completed' : 'pending';\n    }\n  });\n  saveDeliveries();\n  \n  // Configura formulários\n  setupOrderForm();\n  setupGasForm();\n  setupEditForms();\n  setupTabs();\n  \n  // Inicializa o sistema de confirmação de exclusão\n  initializeDeleteConfirmation();\n  \n  // Inicializa otimizações para dispositivos móveis\n  initializeMobileOptimizations();\n  \n  // Configura eventos globais\n  window.showImageModal = showImageModal;\n  window.deleteDelivery = deleteDelivery;\n  window.deleteGasEntry = deleteGasEntry;\n  window.editDelivery = startDeliveryEditing;\n  window.handleEditSubmit = handleEditSubmit;\n  window.handleCancelEdit = handleCancelEdit;\n  window.importCSV = importCSV;\n  window.forceSyncData = forceSyncData;\n  window.getSyncStatus = getSyncStatus;\n  window.runDiagnostic = runDiagnostic;\n  \n  // Configura o botão de fechar modal\n  const closeButton = document.querySelector('.close');\n  if (closeButton) {\n    closeButton.addEventListener('click', () => {\n      const modal = document.getElementById('imageModal');\n      if (modal) modal.style.display = 'none';\n    });\n  }\n  \n  // Adicionar indicador de sincronização no rodapé\n  setupSyncIndicator();\n  \n  console.timeEnd('Inicialização da Aplicação');\n}\n\n/**\n * Verifica e repara problemas de integridade durante a inicialização\n */\nfunction checkDataIntegrityOnStartup() {\n  // Verificar se é a primeira vez que o usuário abre a aplicação nesta sessão\n  if (!sessionStorage.getItem('integrity_checked')) {\n    // Executar diagnóstico sem mostrar toast para o usuário\n    const diagnostic = runDiagnostic(false);\n    \n    // Se houver problemas, tentar reparar automaticamente\n    if (!diagnostic.result.isValid) {\n      const totalIssues = diagnostic.result.deliveries.invalidItems.length + \n                          diagnostic.result.gasEntries.invalidItems.length;\n      \n      if (totalIssues > 0) {\n        // Realizar o reparo automaticamente\n        const repairResult = repairData(diagnostic.result);\n        \n        if (repairResult.success) {\n          console.log(`Reparados automaticamente ${repairResult.fixed}/${totalIssues} problemas de integridade.`);\n          \n          // Notificar o usuário apenas se houver problemas não reparados\n          if (repairResult.fixed < totalIssues) {\n            setTimeout(() => {\n              showToast(`Alguns problemas de integridade (${totalIssues - repairResult.fixed}/${totalIssues}) não puderam ser reparados automaticamente. Use o Diagnóstico de Dados para mais informações.`, 'warning');\n            }, 1500);\n          }\n        } else {\n          // Se não foi possível reparar, apenas registrar no console\n          console.warn('Não foi possível reparar automaticamente os problemas de integridade.');\n        }\n      }\n    }\n    \n    // Marcar que a verificação de integridade já foi feita nesta sessão\n    sessionStorage.setItem('integrity_checked', 'true');\n  }\n}\n\n// Função para adicionar indicador de sincronização\nfunction setupSyncIndicator() {\n  const footer = document.querySelector('.footer');\n  \n  if (footer) {\n    const syncIndicator = document.createElement('div');\n    syncIndicator.className = 'sync-indicator';\n    syncIndicator.innerHTML = `\n      <span class=\"sync-status\"></span>\n      <span class=\"sync-text\">Sincronização automática ativada</span>\n    `;\n    \n    footer.appendChild(syncIndicator);\n    \n    // Atualizar status periodicamente\n    updateSyncStatus();\n    setInterval(updateSyncStatus, 10000);\n    \n    // Sincronização manual ao clicar no indicador\n    syncIndicator.addEventListener('click', () => {\n      syncIndicator.classList.add('syncing');\n      forceSyncData();\n      showToast('Sincronizando dados...', 'info');\n      \n      setTimeout(() => {\n        syncIndicator.classList.remove('syncing');\n        updateSyncStatus();\n      }, 1000);\n    });\n  }\n}\n\n// Função para atualizar o indicador de sincronização\nfunction updateSyncStatus() {\n  const status = getSyncStatus();\n  const indicator = document.querySelector('.sync-status');\n  const text = document.querySelector('.sync-text');\n  \n  if (indicator && text) {\n    const isActive = status.isPrimary;\n    const lastSync = status.lastSyncTime ? new Date(status.lastSyncTime) : null;\n    const now = new Date();\n    \n    indicator.className = 'sync-status ' + (isActive ? 'active' : 'passive');\n    \n    if (lastSync) {\n      const timeDiff = Math.floor((now - lastSync) / 1000);\n      let timeText = '';\n      \n      if (timeDiff < 60) {\n        timeText = `${timeDiff}s atrás`;\n      } else if (timeDiff < 3600) {\n        timeText = `${Math.floor(timeDiff / 60)}m atrás`;\n      } else {\n        timeText = `${Math.floor(timeDiff / 3600)}h atrás`;\n      }\n      \n      text.textContent = `Última sincronização: ${timeText}`;\n    } else {\n      text.textContent = isActive ? 'Aba principal' : 'Sincronização automática ativada';\n    }\n  }\n}\n\n// Função para verificar integridade dos dados\nfunction checkDataIntegrity() {\n  try {\n    // Já verificado nesta sessão? (evita múltiplas verificações)\n    if (sessionStorage.getItem('integrity_checked')) {\n      return;\n    }\n    \n    // Verificar localStorage\n    let dataIntegrityIssue = false;\n    \n    // Validar entradas JSON\n    try {\n      const rawDeliveries = localStorage.getItem('deliveries');\n      if (rawDeliveries) {\n        JSON.parse(rawDeliveries);\n      }\n      \n      const rawGasEntries = localStorage.getItem('gasEntries');\n      if (rawGasEntries) {\n        JSON.parse(rawGasEntries);\n      }\n    } catch (e) {\n      console.error('Dados corrompidos no localStorage:', e);\n      dataIntegrityIssue = true;\n    }\n    \n    // Se houver problemas, limpar dados\n    if (dataIntegrityIssue) {\n      console.warn('Problemas de integridade encontrados. Reiniciando armazenamento.');\n      \n      // Limpar todos os dados\n      localStorage.clear();\n      sessionStorage.clear();\n      \n      // Recarregar dados (agora vazios)\n      loadDeliveries();\n      loadGasEntries();\n      updateTotals();\n      \n      showToast('Dados reiniciados devido a um problema de integridade', 'warning');\n    }\n    \n    // Marcar como verificado\n    sessionStorage.setItem('integrity_checked', 'true');\n    \n  } catch (error) {\n    console.error('Erro ao verificar integridade dos dados:', error);\n    \n    // Em caso de erro na verificação, limpar dados como precaução\n    try {\n      localStorage.clear();\n      sessionStorage.clear();\n    } catch (e) {\n      console.error('Falha ao limpar dados corrompidos:', e);\n    }\n  }\n} ","// Constantes para controle do zoom\nconst MIN_ZOOM = 1;\nconst MAX_ZOOM = 3;\nconst ZOOM_STEP = 0.1;\n\n// Variáveis globais\nwindow.currentZoom = 1;  // Exposto globalmente para poder ser acessado de outros módulos\nlet currentZoom = window.currentZoom;\nlet initialPinchDistance = 0;\nlet lastPinchDistance = 0;\nlet isDragging = false;\nlet startX = 0;\nlet startY = 0;\nlet translateX = 0;\nlet translateY = 0;\n\n// Elementos do DOM\nconst modal = document.getElementById('imageModal');\nconst modalContent = modal.querySelector('.modal-content');\nconst modalImage = document.getElementById('modalImage');\nconst zoomLevel = document.querySelector('.zoom-level');\nconst zoomIn = document.getElementById('zoomIn');\nconst zoomOut = document.getElementById('zoomOut');\n\n// Função para atualizar o zoom\nfunction updateZoom(zoom) {\n    // Limita o zoom entre MIN_ZOOM e MAX_ZOOM\n    currentZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, zoom));\n    window.currentZoom = currentZoom;  // Atualiza a variável global\n    \n    // Atualiza a transformação da imagem\n    modalImage.style.transform = `scale(${currentZoom})`;\n    \n    // Atualiza o indicador de zoom\n    zoomLevel.textContent = `${Math.round(currentZoom * 100)}%`;\n    \n    // Atualiza o estado dos botões\n    zoomIn.disabled = currentZoom >= MAX_ZOOM;\n    zoomOut.disabled = currentZoom <= MIN_ZOOM;\n}\n\n// Função para calcular a distância entre dois pontos\nfunction getDistance(point1, point2) {\n    const dx = point1.clientX - point2.clientX;\n    const dy = point1.clientY - point2.clientY;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\n// Event Listeners para desktop\nmodalImage.addEventListener('wheel', (e) => {\n    e.preventDefault();\n    \n    // Determina a direção do scroll\n    const delta = e.deltaY > 0 ? -ZOOM_STEP : ZOOM_STEP;\n    \n    // Calcula o novo zoom\n    const newZoom = currentZoom + delta;\n    updateZoom(newZoom);\n});\n\n// Event Listeners para mobile\nmodalImage.addEventListener('touchstart', (e) => {\n    if (e.touches.length === 2) {\n        // Inicia o zoom com dois dedos\n        initialPinchDistance = getDistance(e.touches[0], e.touches[1]);\n        lastPinchDistance = initialPinchDistance;\n    } else if (e.touches.length === 1 && currentZoom > 1) {\n        // Inicia o arrasto com um dedo\n        isDragging = true;\n        startX = e.touches[0].clientX - translateX;\n        startY = e.touches[0].clientY - translateY;\n    }\n});\n\nmodalImage.addEventListener('touchmove', (e) => {\n    e.preventDefault();\n    \n    if (e.touches.length === 2) {\n        // Atualiza o zoom com dois dedos\n        const currentDistance = getDistance(e.touches[0], e.touches[1]);\n        const scale = currentDistance / initialPinchDistance;\n        const newZoom = currentZoom * (currentDistance / lastPinchDistance);\n        \n        updateZoom(newZoom);\n        lastPinchDistance = currentDistance;\n    } else if (e.touches.length === 1 && isDragging) {\n        // Atualiza a posição durante o arrasto\n        translateX = e.touches[0].clientX - startX;\n        translateY = e.touches[0].clientY - startY;\n        \n        modalImage.style.transform = `scale(${currentZoom}) translate(${translateX / currentZoom}px, ${translateY / currentZoom}px)`;\n    }\n});\n\nmodalImage.addEventListener('touchend', () => {\n    isDragging = false;\n    initialPinchDistance = 0;\n    lastPinchDistance = 0;\n});\n\n// Event Listeners para os botões de zoom\nzoomIn.addEventListener('click', () => {\n    updateZoom(currentZoom + ZOOM_STEP);\n});\n\nzoomOut.addEventListener('click', () => {\n    updateZoom(currentZoom - ZOOM_STEP);\n});\n\n// Reset do zoom quando o modal é fechado\nfunction resetZoomAndClose() {\n    currentZoom = 1;\n    translateX = 0;\n    translateY = 0;\n    modalImage.style.transform = 'scale(1)';\n    zoomLevel.textContent = '100%';\n    modal.style.display = 'none';\n    modal.classList.remove('show');\n}\n\n// Adicionar o listener ao botão de fechar\nconst closeButton = modal.querySelector('.close');\nif (closeButton) {\n    closeButton.addEventListener('click', resetZoomAndClose);\n}\n\n// Fechar o modal ao clicar fora da imagem\nmodal.addEventListener('click', function(event) {\n    if (event.target === modal) {\n        resetZoomAndClose();\n    }\n});\n\n// Fechar o modal com a tecla ESC\ndocument.addEventListener('keydown', function(event) {\n    if (event.key === 'Escape' && modal.style.display === 'block') {\n        resetZoomAndClose();\n    }\n});\n\n// Exporta as funções necessárias\nexport function initializeImageZoom() {\n    try {\n        // Verificar se os elementos existem\n        if (!modal || !modalImage || !zoomLevel || !zoomIn || !zoomOut) {\n            console.error('Elementos do modal de imagem não encontrados');\n            return;\n        }\n        \n        // Inicializa o zoom\n        updateZoom(1);\n        \n        // Expor a função de reset para o uso global\n        window.resetImageZoom = resetZoomAndClose;\n        \n        console.log('Zoom de imagem inicializado com sucesso');\n    } catch (error) {\n        console.error('Erro ao inicializar o zoom de imagem:', error);\n    }\n} ","/**\n * Image Optimizer\n * \n * Provides specialized image optimization functions for mobile devices\n * to reduce memory usage and improve performance.\n */\n\nimport { isMobileDevice } from './mobile.js';\nimport { showToast } from './utils.js';\n\n/**\n * Checks if device has enough memory for image processing\n * @returns {boolean} True if the device has enough memory\n */\nexport function hasEnoughMemory() {\n  // Use performance.memory if available (Chrome/Chromium browsers)\n  if (window.performance && window.performance.memory) {\n    const memory = window.performance.memory;\n    // If device has less than 300MB of available memory, warn the user\n    if (memory.jsHeapSizeLimit - memory.usedJSHeapSize < 300 * 1024 * 1024) {\n      return false;\n    }\n  }\n  \n  // For other browsers, check localStorage usage as a proxy for memory usage\n  try {\n    let totalSize = 0;\n    for (let key in localStorage) {\n      if (localStorage.hasOwnProperty(key)) {\n        totalSize += (localStorage[key].length * 2) / 1024 / 1024; // Size in MB\n      }\n    }\n    \n    // If using more than 70% of a typical browser's localStorage limit (5MB), warn\n    if (totalSize > 3.5) {\n      return false;\n    }\n  } catch (e) {\n    console.warn('Error checking localStorage usage:', e);\n  }\n  \n  return true;\n}\n\n/**\n * Aggressively optimizes images for low-memory devices\n * @param {string} base64Image - Base64 encoded image\n * @returns {Promise<string>} Optimized base64 image\n */\nexport async function optimizeForLowMemory(base64Image) {\n  if (!base64Image) return null;\n  \n  try {\n    // Create a new image element\n    const img = new Image();\n    \n    // Create a promise to handle the image loading\n    const loadPromise = new Promise((resolve, reject) => {\n      img.onload = () => resolve();\n      img.onerror = () => reject(new Error('Falha ao carregar imagem para otimização'));\n    });\n    \n    // Set the source of the image (safe because we're not creating an object URL)\n    img.src = base64Image;\n    \n    // Wait for the image to load\n    await loadPromise;\n    \n    // Create a canvas for the optimized image\n    const canvas = document.createElement('canvas');\n    \n    // For very low memory devices, reduce dimensions drastically\n    let targetWidth = Math.min(400, img.width);\n    let targetHeight = Math.round(img.height * (targetWidth / img.width));\n    \n    canvas.width = targetWidth;\n    canvas.height = targetHeight;\n    \n    // Draw the image on the canvas\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\n    \n    // Convert to very low quality JPEG\n    const optimizedDataURL = canvas.toDataURL('image/jpeg', 0.3);\n    \n    // Clean up resources\n    canvas.width = 0;\n    canvas.height = 0;\n    img.src = '';\n    \n    return optimizedDataURL;\n  } catch (error) {\n    console.error('Erro na otimização agressiva de imagem:', error);\n    // Return the original image if optimization fails\n    return base64Image;\n  }\n}\n\n/**\n * Reduces memory usage by downsampling existing images in storage\n * Useful for fixing memory issues after they've occurred\n */\nexport function downsampleStoredImages() {\n  if (!isMobileDevice()) return; // Only for mobile devices\n  \n  try {\n    // Get the deliveries from localStorage\n    const deliveries = JSON.parse(localStorage.getItem('deliveries') || '[]');\n    if (!deliveries.length) return;\n    \n    showToast('Otimizando imagens para economizar memória...', 'info');\n    \n    // Process a batch of images asynchronously to avoid freezing the UI\n    const batchSize = 2;\n    let processed = 0;\n    \n    const processBatch = async () => {\n      const batch = deliveries.slice(processed, processed + batchSize)\n        .filter(delivery => delivery.image && delivery.image.length > 20000);\n      \n      for (const delivery of batch) {\n        try {\n          // Only optimize images that haven't been optimized yet or are large\n          if (delivery.image && delivery.image.length > 20000) {\n            // Reconstruct full base64 image\n            const base64Image = `data:image/jpeg;base64,${delivery.image}`;\n            \n            // Optimize the image\n            const optimized = await optimizeForLowMemory(base64Image);\n            \n            // If optimization succeeded, update the delivery\n            if (optimized) {\n              // Strip the data URL prefix\n              delivery.image = optimized.replace(/^data:image\\/\\w+;base64,/, '');\n            }\n          }\n        } catch (error) {\n          console.error('Error optimizing image for delivery:', delivery.id, error);\n        }\n      }\n      \n      processed += batch.length;\n      \n      // Save progress so far\n      localStorage.setItem('deliveries', JSON.stringify(deliveries));\n      \n      // Continue with the next batch if there are more images to process\n      if (processed < deliveries.length) {\n        setTimeout(processBatch, 100); // Add delay to prevent UI freezing\n      } else {\n        showToast('Otimização de imagens concluída!', 'success');\n      }\n    };\n    \n    // Start processing\n    processBatch();\n    \n    return true;\n  } catch (error) {\n    console.error('Erro ao otimizar imagens armazenadas:', error);\n    return false;\n  }\n}\n\n/**\n * Detects memory issues and attempts to recover\n * @returns {boolean} True if recovery was attempted\n */\nexport function detectAndRecoverFromMemoryIssues() {\n  if (!isMobileDevice()) return false;\n  \n  // Check if browser seems to be running low on memory\n  if (!hasEnoughMemory()) {\n    showToast('Memória do dispositivo baixa. Otimizando...', 'warning');\n    \n    // Cleanup any object URLs\n    const images = document.querySelectorAll('img[src^=\"blob:\"]');\n    images.forEach(img => {\n      if (img.src.startsWith('blob:')) {\n        URL.revokeObjectURL(img.src);\n      }\n    });\n    \n    // Attempt to downsample images\n    setTimeout(() => {\n      downsampleStoredImages();\n    }, 1000);\n    \n    return true;\n  }\n  \n  return false;\n}\n\n// Default export for easier imports\nexport default {\n  hasEnoughMemory,\n  optimizeForLowMemory,\n  downsampleStoredImages,\n  detectAndRecoverFromMemoryIssues\n}; ","/**\n * Mobile Optimizations Module\n * \n * This module serves as a central entry point for all mobile optimizations\n * applied throughout the application.\n */\n\n// Import directly from mobile.js to avoid scope issues\nimport { \n  setupMobileOptimizations,\n  cleanupUnusedResources,\n  applyMemoryOptimizations,\n  fixFileInputIssues\n} from './mobile.js';\n\n// Re-export the functions from mobile.js\nexport { \n  setupMobileOptimizations,\n  cleanupUnusedResources,\n  applyMemoryOptimizations,\n  fixFileInputIssues\n};\n\n// Define isMobileDevice directly to avoid circular dependency\n/**\n * Check if device is mobile\n * @returns {boolean} True if mobile device\n */\nexport function isMobileDevice() {\n  return window.innerWidth <= 768 || \n    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\n// Image optimizations for mobile\nexport {\n  processImageForStorage,\n  optimizeStoredImages,\n  formatImageDisplay,\n  showImageModal\n} from './imageUtils.js';\n\n// Advanced image optimization for mobile\nimport {\n  hasEnoughMemory,\n  optimizeForLowMemory,\n  downsampleStoredImages,\n  detectAndRecoverFromMemoryIssues\n} from './imageOptimizer.js';\n\n// Chart optimizations for mobile\nexport {\n  generateLinePath,\n  generateDataPoints,\n  getBestProfitDay,\n  getWorstProfitDay,\n  optimizeChartRendering,\n  makeChartResponsive,\n  adjustChartSize\n} from './charts.js';\n\n// Mobile specific optimizations\nimport { showToast } from './utils.js';\n\n// Re-export needed functions from imageOptimizer.js, but avoid duplicate exports\nexport { hasEnoughMemory, optimizeForLowMemory, downsampleStoredImages };\n\n// Explicitly re-export detectAndRecoverFromMemoryIssues to avoid duplicate export\n// by using a new name for our import\nconst { detectAndRecoverFromMemoryIssues: recoverMemory } = { detectAndRecoverFromMemoryIssues };\nexport { recoverMemory as detectAndRecoverFromMemoryIssues };\n\n/**\n * Run all additional memory optimizations for mobile devices\n */\nexport function applyAdvancedMemoryOptimizations() {\n  // Apply memory-related optimizations\n  setupImageCleanupRoutine();\n  optimizeMemoryUsage();\n  \n  // Add periodic memory check for mobile devices\n  if (isMobileDevice()) {\n    setupPeriodicMemoryCheck();\n  }\n}\n\n/**\n * Sets up a routine to clean up image resources\n */\nfunction setupImageCleanupRoutine() {\n  // Force cleanup on tab visibility change (when user switches tabs/apps)\n  document.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'hidden') {\n      // Force garbage collection on tab hide if possible\n      cleanupUnusedResources();\n    }\n  });\n\n  // Clean up on device orientation change (common on mobile)\n  window.addEventListener('orientationchange', () => {\n    setTimeout(() => {\n      cleanupUnusedResources();\n    }, 300);\n  });\n  \n  // Monitor back button for cleanup\n  window.addEventListener('popstate', () => {\n    cleanupUnusedResources();\n  });\n}\n\n/**\n * Setup periodic memory checks to prevent out of memory errors\n */\nfunction setupPeriodicMemoryCheck() {\n  // Check memory status every 30 seconds\n  const memoryCheckInterval = setInterval(() => {\n    // Only run check if page is visible\n    if (document.visibilityState === 'visible') {\n      // Check if memory is running low\n      if (!hasEnoughMemory()) {\n        // Attempt recovery\n        detectAndRecoverFromMemoryIssues();\n      }\n    }\n  }, 30000);\n  \n  // Clear interval when page is unloaded\n  window.addEventListener('beforeunload', () => {\n    clearInterval(memoryCheckInterval);\n  });\n}\n\n/**\n * Apply optimizations for better memory usage\n */\nfunction optimizeMemoryUsage() {\n  // Setup cleanup on file input focus\n  const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n  fileInputs.forEach(input => {\n    input.addEventListener('focus', () => {\n      // Clean up resources before opening file picker\n      cleanupUnusedResources();\n    });\n  });\n\n  // Setup cleanup for image preview containers\n  const setupPreviewContainerCleanup = () => {\n    const containers = [\n      document.getElementById('imagePreview'),\n      document.getElementById('editImagePreview')\n    ];\n\n    containers.forEach(container => {\n      if (container) {\n        // Create a mutation observer to watch for DOM changes\n        const observer = new MutationObserver((mutations) => {\n          mutations.forEach(mutation => {\n            if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {\n              // When nodes are removed, clean up resources\n              cleanupUnusedResources();\n            }\n          });\n        });\n\n        // Start observing\n        observer.observe(container, { childList: true, subtree: true });\n      }\n    });\n  };\n\n  // Setup cleanup for preview containers\n  setupPreviewContainerCleanup();\n  \n  // Optimize existing stored images on startup for mobile\n  if (isMobileDevice()) {\n    // Delay to not interfere with initial page load\n    setTimeout(() => {\n      // Check if memory is low before optimizing\n      if (!hasEnoughMemory()) {\n        downsampleStoredImages();\n      }\n    }, 5000);\n  }\n}\n\n// Export additional optimization functions\nexport default {\n  applyAdvancedMemoryOptimizations,\n  cleanupUnusedResources, // This is now properly in scope as it's directly imported\n  fixFileInputIssues,\n  hasEnoughMemory,\n  optimizeForLowMemory,\n  downsampleStoredImages,\n  detectAndRecoverFromMemoryIssues: recoverMemory\n}; ","/**\n * Utility for handling base path issues in different environments\n * Ensures resources are loaded correctly regardless of deployment environment\n */\n\n// Determine the base path for the application based on its deployment location\nexport function getBasePath() {\n  // If we're in development, use the base from Vite's import.meta\n  if (import.meta && import.meta.env && import.meta.env.BASE_URL) {\n    return import.meta.env.BASE_URL;\n  }\n  \n  // If running in GitHub Pages, the URL will include the repo name\n  if (window.location.pathname.includes('/entrega-financeira-semanal/')) {\n    return '/entrega-financeira-semanal/';\n  }\n  \n  // Default case - running at root\n  return '/';\n}\n\n// Resolve a path against the base path to ensure it loads correctly\nexport function resolvePath(path) {\n  const basePath = getBasePath();\n  \n  // If the path is already absolute (starts with http, https, or //) or is a data URL, return it as is\n  if (path && (\n    path.startsWith('http://') || \n    path.startsWith('https://') || \n    path.startsWith('//') ||\n    path.startsWith('data:')\n  )) {\n    return path;\n  }\n  \n  // Remove any leading slashes from the path to avoid double slashes\n  const normalizedPath = path.startsWith('/') ? path.substring(1) : path;\n  \n  // Combine the base path with the normalized path\n  return `${basePath}${normalizedPath}`;\n}\n\n// Utility function to convert all relative URLs in a DOM element's attributes\nexport function fixElementUrls(element) {\n  if (!element) return;\n  \n  // Process background images and other style properties\n  if (element.style && element.style.backgroundImage) {\n    const urlMatch = element.style.backgroundImage.match(/url\\(['\"]?([^'\")]+)['\"]?\\)/);\n    if (urlMatch && urlMatch[1]) {\n      const newUrl = resolvePath(urlMatch[1]);\n      element.style.backgroundImage = `url('${newUrl}')`;\n    }\n  }\n  \n  // Process common URL attributes\n  const urlAttributes = ['src', 'href', 'data-src', 'poster'];\n  urlAttributes.forEach(attr => {\n    if (element.hasAttribute(attr)) {\n      const value = element.getAttribute(attr);\n      if (value && !value.startsWith('#') && !value.startsWith('javascript:')) {\n        element.setAttribute(attr, resolvePath(value));\n      }\n    }\n  });\n  \n  // Process srcset attribute for responsive images\n  if (element.hasAttribute('srcset')) {\n    const srcset = element.getAttribute('srcset');\n    const newSrcset = srcset.split(',').map(src => {\n      const [url, descriptor] = src.trim().split(/\\s+/);\n      return `${resolvePath(url)} ${descriptor || ''}`.trim();\n    }).join(', ');\n    element.setAttribute('srcset', newSrcset);\n  }\n}\n\n// Initialize the basePath handling\nexport function initializeBasePath() {\n  // Set a global variable for use in other scripts\n  window.__APP_BASE_PATH = getBasePath();\n  \n  // Auto-fix all image sources on load\n  document.addEventListener('DOMContentLoaded', () => {\n    // Fix all images\n    document.querySelectorAll('img').forEach(fixElementUrls);\n    \n    // Fix all links\n    document.querySelectorAll('a').forEach(fixElementUrls);\n    \n    // Fix all video and audio sources\n    document.querySelectorAll('video, audio').forEach(el => {\n      fixElementUrls(el);\n      el.querySelectorAll('source').forEach(fixElementUrls);\n    });\n    \n    console.log('Base path initialized:', window.__APP_BASE_PATH);\n  });\n}\n\n// Run initialization\ninitializeBasePath(); ","// Importação dos módulos\nimport { setupDeliveryForm, setupGasForm, setupEditForms, setupTabs } from './setup.js';\nimport { loadDeliveries, loadGasEntries } from './data.js';\nimport { renderAnalytics } from './analytics.js';\nimport { setupMobileOptimizations } from './mobile.js';\nimport { updateTotals } from './data.js';\nimport { initializeApp } from './setup.js';\nimport { initializeImageZoom } from './imageZoom.js';\nimport { showExportModal } from './export.js';\nimport { \n  cleanupUnusedResources,\n  applyMemoryOptimizations,\n  detectAndRecoverFromMemoryIssues\n} from './mobileOptimizations.js';\n// Import the base path utilities\nimport { initializeBasePath, resolvePath } from './basePath.js';\n\n// Ensure base path is initialized early\ninitializeBasePath();\n\n// Espera o DOM estar pronto\ndocument.addEventListener('DOMContentLoaded', async () => {\n  try {\n    // Only reference the loading screen, don't try to manage it here\n    // since it's already managed by the inline script\n    const container = document.querySelector('.container');\n    \n    // Cleanup any resources first to ensure a clean startup\n    cleanupUnusedResources();\n    \n    // Aplicar otimizações de memória antes de iniciar o carregamento\n    applyMemoryOptimizations();\n    \n    // Carrega os dados\n    await Promise.all([\n      loadDeliveries(),\n      loadGasEntries()\n    ]);\n    \n    // Atualiza os totais\n    updateTotals();\n\n    // Configurar otimizações para dispositivos móveis\n    setupMobileOptimizations();\n    \n    // Configurar event listeners dos formulários\n    setupDeliveryForm();\n    setupGasForm();\n    setupEditForms();\n    \n    // Configurar event listeners das tabs\n    setupTabs();\n\n    // Inicializa a aplicação\n    initializeApp();\n\n    // Inicializa o zoom de imagem\n    initializeImageZoom();\n\n    // Event listener para modal de exportação\n    const exportBtn = document.getElementById('exportButton');\n    if (exportBtn) exportBtn.addEventListener('click', showExportModal);\n    \n    // Listen for browser beforesunload event to clean up resources\n    window.addEventListener('beforeunload', () => {\n      cleanupUnusedResources();\n    });\n    \n    // Force cleanup every time main tab is changed\n    const tabButtons = document.querySelectorAll('.tab-button');\n    if (tabButtons.length) {\n      tabButtons.forEach(button => {\n        button.addEventListener('click', () => {\n          setTimeout(() => cleanupUnusedResources(), 100);\n        });\n      });\n    }\n    \n    // Detectar e recuperar de problemas de memória\n    setTimeout(() => {\n      detectAndRecoverFromMemoryIssues();\n    }, 2000);\n    \n    // Mark the application as ready but let the inline script handle the loading screen\n    if (container) {\n      container.classList.add('loaded');\n      \n      // Final cleanup após carregamento completo\n      cleanupUnusedResources();\n    }\n    \n    console.log('Aplicação inicializada com sucesso');\n    \n  } catch (error) {\n    console.error('Erro ao inicializar aplicação:', error);\n    \n    // In case of error, make sure the application is still shown\n    const container = document.querySelector('.container');\n    \n    if (container) {\n      container.classList.add('loaded');\n    }\n  }\n}); ","\n        import { initializeApp } from './scripts/setup.js';\n        import { showDiagnosticModal } from './scripts/dataDiagnostic.js';\n        \n        document.addEventListener('DOMContentLoaded', () => {\n            initializeApp();\n            \n            // Configurar botão de diagnóstico\n            const diagnosticButton = document.getElementById('diagnosticButton');\n            if (diagnosticButton) {\n                diagnosticButton.addEventListener('click', showDiagnosticModal);\n            }\n        });\n    "],"file":"assets/index.CiUHYS5-.js"}